// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mapgoo.paas.socol.data.proto

package api

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SocolActionData struct {
	//摄像头
	Channel int32 `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
	//指令具体时间，13位毫秒时间戳
	Stime []int64 `protobuf:"varint,2,rep,packed,name=stime,proto3" json:"stime,omitempty"`
	//指令有效时长
	Rrt int64 `protobuf:"varint,3,opt,name=rrt,proto3" json:"rrt,omitempty"`
	//指令抽帧成功的要求的最低成功率
	MinSucceccRate       uint32   `protobuf:"varint,4,opt,name=min_succecc_rate,json=minSucceccRate,proto3" json:"min_succecc_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SocolActionData) Reset()         { *m = SocolActionData{} }
func (m *SocolActionData) String() string { return proto.CompactTextString(m) }
func (*SocolActionData) ProtoMessage()    {}
func (*SocolActionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9038a572a6b9607, []int{0}
}
func (m *SocolActionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SocolActionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SocolActionData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SocolActionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocolActionData.Merge(m, src)
}
func (m *SocolActionData) XXX_Size() int {
	return m.Size()
}
func (m *SocolActionData) XXX_DiscardUnknown() {
	xxx_messageInfo_SocolActionData.DiscardUnknown(m)
}

var xxx_messageInfo_SocolActionData proto.InternalMessageInfo

//socol指令状态
type SocolCmdStatus struct {
	//指令发送标志，0-未发送 1-已发送
	SendFlag bool `protobuf:"varint,1,opt,name=send_flag,json=sendFlag,proto3" json:"send_flag,omitempty"`
	//指令发送时间，时间戳
	SendTime uint32 `protobuf:"varint,2,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	//指令发送结果，-1-位置，0-失败，1-成功
	SendResult int32 `protobuf:"varint,3,opt,name=send_result,json=sendResult,proto3" json:"send_result,omitempty"`
	//指令成功时间
	SuccessTime uint32 `protobuf:"varint,4,opt,name=success_time,json=successTime,proto3" json:"success_time,omitempty"`
	//指令重试次数
	RetryTimes           uint32   `protobuf:"varint,5,opt,name=retry_times,json=retryTimes,proto3" json:"retry_times,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SocolCmdStatus) Reset()         { *m = SocolCmdStatus{} }
func (m *SocolCmdStatus) String() string { return proto.CompactTextString(m) }
func (*SocolCmdStatus) ProtoMessage()    {}
func (*SocolCmdStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9038a572a6b9607, []int{1}
}
func (m *SocolCmdStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SocolCmdStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SocolCmdStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SocolCmdStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocolCmdStatus.Merge(m, src)
}
func (m *SocolCmdStatus) XXX_Size() int {
	return m.Size()
}
func (m *SocolCmdStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SocolCmdStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SocolCmdStatus proto.InternalMessageInfo

type SocolUploadImage struct {
	//索引
	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	//指令开始时间
	Time int64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	//图片URL
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	//图片大小
	Size_ uint32 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	//包名
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SocolUploadImage) Reset()         { *m = SocolUploadImage{} }
func (m *SocolUploadImage) String() string { return proto.CompactTextString(m) }
func (*SocolUploadImage) ProtoMessage()    {}
func (*SocolUploadImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9038a572a6b9607, []int{2}
}
func (m *SocolUploadImage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SocolUploadImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SocolUploadImage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SocolUploadImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocolUploadImage.Merge(m, src)
}
func (m *SocolUploadImage) XXX_Size() int {
	return m.Size()
}
func (m *SocolUploadImage) XXX_DiscardUnknown() {
	xxx_messageInfo_SocolUploadImage.DiscardUnknown(m)
}

var xxx_messageInfo_SocolUploadImage proto.InternalMessageInfo

type SocolUploadData struct {
	Images               []*SocolUploadImage `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SocolUploadData) Reset()         { *m = SocolUploadData{} }
func (m *SocolUploadData) String() string { return proto.CompactTextString(m) }
func (*SocolUploadData) ProtoMessage()    {}
func (*SocolUploadData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9038a572a6b9607, []int{3}
}
func (m *SocolUploadData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SocolUploadData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SocolUploadData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SocolUploadData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocolUploadData.Merge(m, src)
}
func (m *SocolUploadData) XXX_Size() int {
	return m.Size()
}
func (m *SocolUploadData) XXX_DiscardUnknown() {
	xxx_messageInfo_SocolUploadData.DiscardUnknown(m)
}

var xxx_messageInfo_SocolUploadData proto.InternalMessageInfo

type SocolUploadSummary struct {
	//期望抽帧的总数
	ExpectCnt uint32 `protobuf:"varint,1,opt,name=expect_cnt,json=expectCnt,proto3" json:"expect_cnt,omitempty"`
	//实际成功的数量
	SuccessCnt uint32 `protobuf:"varint,2,opt,name=success_cnt,json=successCnt,proto3" json:"success_cnt,omitempty"`
	ExtractCnt uint32 `protobuf:"varint,3,opt,name=extract_cnt,json=extractCnt,proto3" json:"extract_cnt,omitempty"`
	//任务尝试次数(最小为1)
	TryCnt uint32 `protobuf:"varint,4,opt,name=try_cnt,json=tryCnt,proto3" json:"try_cnt,omitempty"`
	//任务完成时间
	FinishTime uint64 `protobuf:"varint,5,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	//任务执行时长（单位：s）
	Duration             uint32   `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SocolUploadSummary) Reset()         { *m = SocolUploadSummary{} }
func (m *SocolUploadSummary) String() string { return proto.CompactTextString(m) }
func (*SocolUploadSummary) ProtoMessage()    {}
func (*SocolUploadSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9038a572a6b9607, []int{4}
}
func (m *SocolUploadSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SocolUploadSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SocolUploadSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SocolUploadSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocolUploadSummary.Merge(m, src)
}
func (m *SocolUploadSummary) XXX_Size() int {
	return m.Size()
}
func (m *SocolUploadSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_SocolUploadSummary.DiscardUnknown(m)
}

var xxx_messageInfo_SocolUploadSummary proto.InternalMessageInfo

type SocolCmdSeq struct {
	//指令来源
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	//指令序号
	SeqId                string   `protobuf:"bytes,2,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SocolCmdSeq) Reset()         { *m = SocolCmdSeq{} }
func (m *SocolCmdSeq) String() string { return proto.CompactTextString(m) }
func (*SocolCmdSeq) ProtoMessage()    {}
func (*SocolCmdSeq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9038a572a6b9607, []int{5}
}
func (m *SocolCmdSeq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SocolCmdSeq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SocolCmdSeq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SocolCmdSeq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocolCmdSeq.Merge(m, src)
}
func (m *SocolCmdSeq) XXX_Size() int {
	return m.Size()
}
func (m *SocolCmdSeq) XXX_DiscardUnknown() {
	xxx_messageInfo_SocolCmdSeq.DiscardUnknown(m)
}

var xxx_messageInfo_SocolCmdSeq proto.InternalMessageInfo

type SocolUploadMessage struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SocolUploadMessage) Reset()         { *m = SocolUploadMessage{} }
func (m *SocolUploadMessage) String() string { return proto.CompactTextString(m) }
func (*SocolUploadMessage) ProtoMessage()    {}
func (*SocolUploadMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9038a572a6b9607, []int{6}
}
func (m *SocolUploadMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SocolUploadMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SocolUploadMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SocolUploadMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocolUploadMessage.Merge(m, src)
}
func (m *SocolUploadMessage) XXX_Size() int {
	return m.Size()
}
func (m *SocolUploadMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SocolUploadMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SocolUploadMessage proto.InternalMessageInfo

type OMSUploadImageReq struct {
	//设备号
	Imei string `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei,omitempty"`
	//指令序列号
	Seq string `protobuf:"bytes,2,opt,name=seq,proto3" json:"seq,omitempty"`
	//指令来源
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	//回传状态
	Result string `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	//版本号
	VersionCode string `protobuf:"bytes,5,opt,name=versionCode,proto3" json:"versionCode,omitempty"`
	//设备抽帧的任务类型
	BatchType int32 `protobuf:"varint,6,opt,name=batch_type,json=batchType,proto3" json:"batch_type,omitempty"`
	//抽帧图片数据
	Data *SocolUploadData `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	//失败信息
	Message              *SocolUploadMessage `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	Summary              *SocolUploadSummary `protobuf:"bytes,9,opt,name=summary,proto3" json:"summary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *OMSUploadImageReq) Reset()         { *m = OMSUploadImageReq{} }
func (m *OMSUploadImageReq) String() string { return proto.CompactTextString(m) }
func (*OMSUploadImageReq) ProtoMessage()    {}
func (*OMSUploadImageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9038a572a6b9607, []int{7}
}
func (m *OMSUploadImageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OMSUploadImageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OMSUploadImageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OMSUploadImageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OMSUploadImageReq.Merge(m, src)
}
func (m *OMSUploadImageReq) XXX_Size() int {
	return m.Size()
}
func (m *OMSUploadImageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OMSUploadImageReq.DiscardUnknown(m)
}

var xxx_messageInfo_OMSUploadImageReq proto.InternalMessageInfo

type OMSResultResp struct {
	//返回码，0-成功
	Error int32 `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	//返回信息
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OMSResultResp) Reset()         { *m = OMSResultResp{} }
func (m *OMSResultResp) String() string { return proto.CompactTextString(m) }
func (*OMSResultResp) ProtoMessage()    {}
func (*OMSResultResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9038a572a6b9607, []int{8}
}
func (m *OMSResultResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OMSResultResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OMSResultResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OMSResultResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OMSResultResp.Merge(m, src)
}
func (m *OMSResultResp) XXX_Size() int {
	return m.Size()
}
func (m *OMSResultResp) XXX_DiscardUnknown() {
	xxx_messageInfo_OMSResultResp.DiscardUnknown(m)
}

var xxx_messageInfo_OMSResultResp proto.InternalMessageInfo

type SocolWarnPos struct {
	//设备系统时间
	SystemTime int64 `protobuf:"varint,1,opt,name=system_time,json=systemTime,proto3" json:"system_time,omitempty"`
	//设备定位时间
	GpsTime int64 `protobuf:"varint,2,opt,name=gps_time,json=gpsTime,proto3" json:"gps_time,omitempty"`
	//预警经度
	Longtitude int32 `protobuf:"varint,3,opt,name=longtitude,proto3" json:"longtitude,omitempty"`
	//预警纬度
	Lantitude            int32    `protobuf:"varint,4,opt,name=lantitude,proto3" json:"lantitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SocolWarnPos) Reset()         { *m = SocolWarnPos{} }
func (m *SocolWarnPos) String() string { return proto.CompactTextString(m) }
func (*SocolWarnPos) ProtoMessage()    {}
func (*SocolWarnPos) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9038a572a6b9607, []int{9}
}
func (m *SocolWarnPos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SocolWarnPos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SocolWarnPos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SocolWarnPos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocolWarnPos.Merge(m, src)
}
func (m *SocolWarnPos) XXX_Size() int {
	return m.Size()
}
func (m *SocolWarnPos) XXX_DiscardUnknown() {
	xxx_messageInfo_SocolWarnPos.DiscardUnknown(m)
}

var xxx_messageInfo_SocolWarnPos proto.InternalMessageInfo

type SocolWarning struct {
	//预警设备号
	Imei string `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei,omitempty"`
	//预警类型
	WarnType uint32 `protobuf:"varint,2,opt,name=warn_type,json=warnType,proto3" json:"warn_type,omitempty"`
	//预警描述
	WarnDesc string `protobuf:"bytes,3,opt,name=warn_desc,json=warnDesc,proto3" json:"warn_desc,omitempty"`
	//抽帧渠道号
	Source uint32 `protobuf:"varint,4,opt,name=source,proto3" json:"source,omitempty"`
	//抽帧流水号
	SourceSeq string `protobuf:"bytes,5,opt,name=source_seq,json=sourceSeq,proto3" json:"source_seq,omitempty"`
	//设备预警定位点, 用于抽帧
	PosList              []*SocolWarnPos `protobuf:"bytes,6,rep,name=pos_list,json=posList,proto3" json:"pos_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SocolWarning) Reset()         { *m = SocolWarning{} }
func (m *SocolWarning) String() string { return proto.CompactTextString(m) }
func (*SocolWarning) ProtoMessage()    {}
func (*SocolWarning) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9038a572a6b9607, []int{10}
}
func (m *SocolWarning) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SocolWarning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SocolWarning.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SocolWarning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocolWarning.Merge(m, src)
}
func (m *SocolWarning) XXX_Size() int {
	return m.Size()
}
func (m *SocolWarning) XXX_DiscardUnknown() {
	xxx_messageInfo_SocolWarning.DiscardUnknown(m)
}

var xxx_messageInfo_SocolWarning proto.InternalMessageInfo

type SocolTrackRecord struct {
	//设备号
	DeviceImei string `protobuf:"bytes,1,opt,name=device_imei,json=deviceImei,proto3" json:"device_imei,omitempty"`
	//经度
	Longtitude int32 `protobuf:"varint,2,opt,name=longtitude,proto3" json:"longtitude,omitempty"`
	//纬度
	Latitude int32 `protobuf:"varint,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	//系统的时间戳
	LocTime int32 `protobuf:"varint,4,opt,name=loc_time,json=locTime,proto3" json:"loc_time,omitempty"`
	//坐标类型
	CoordType string `protobuf:"bytes,5,opt,name=coord_type,json=coordType,proto3" json:"coord_type,omitempty"`
	//速度
	Speed float64 `protobuf:"fixed64,6,opt,name=speed,proto3" json:"speed,omitempty"`
	//方向
	Direction uint32 `protobuf:"varint,7,opt,name=direction,proto3" json:"direction,omitempty"`
	//高度
	Height float64 `protobuf:"fixed64,8,opt,name=height,proto3" json:"height,omitempty"`
	//定位精度
	Radius float64 `protobuf:"fixed64,9,opt,name=radius,proto3" json:"radius,omitempty"`
	//GPS定位时间
	LocT uint64 `protobuf:"varint,10,opt,name=locT,proto3" json:"locT,omitempty"`
	//设备时间
	SysT uint64 `protobuf:"varint,11,opt,name=sysT,proto3" json:"sysT,omitempty"`
	//搜到的卫星总数
	SatelliteTotal uint32 `protobuf:"varint,12,opt,name=satellite_total,json=satelliteTotal,proto3" json:"satellite_total,omitempty"`
	//信噪比不为0的个数
	SatelliteSnr int32 `protobuf:"varint,13,opt,name=satellite_snr,json=satelliteSnr,proto3" json:"satellite_snr,omitempty"`
	//表示轨迹用到的卫星数目
	SatelliteUsed uint32 `protobuf:"varint,14,opt,name=satellite_used,json=satelliteUsed,proto3" json:"satellite_used,omitempty"`
	//单个轨迹上传数据包的大小，单位：byte
	Size_                uint32   `protobuf:"varint,15,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SocolTrackRecord) Reset()         { *m = SocolTrackRecord{} }
func (m *SocolTrackRecord) String() string { return proto.CompactTextString(m) }
func (*SocolTrackRecord) ProtoMessage()    {}
func (*SocolTrackRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9038a572a6b9607, []int{11}
}
func (m *SocolTrackRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SocolTrackRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SocolTrackRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SocolTrackRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocolTrackRecord.Merge(m, src)
}
func (m *SocolTrackRecord) XXX_Size() int {
	return m.Size()
}
func (m *SocolTrackRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SocolTrackRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SocolTrackRecord proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SocolActionData)(nil), "mapgoo.paas.socol.data.SocolActionData")
	proto.RegisterType((*SocolCmdStatus)(nil), "mapgoo.paas.socol.data.SocolCmdStatus")
	proto.RegisterType((*SocolUploadImage)(nil), "mapgoo.paas.socol.data.SocolUploadImage")
	proto.RegisterType((*SocolUploadData)(nil), "mapgoo.paas.socol.data.SocolUploadData")
	proto.RegisterType((*SocolUploadSummary)(nil), "mapgoo.paas.socol.data.SocolUploadSummary")
	proto.RegisterType((*SocolCmdSeq)(nil), "mapgoo.paas.socol.data.SocolCmdSeq")
	proto.RegisterType((*SocolUploadMessage)(nil), "mapgoo.paas.socol.data.SocolUploadMessage")
	proto.RegisterType((*OMSUploadImageReq)(nil), "mapgoo.paas.socol.data.OMSUploadImageReq")
	proto.RegisterType((*OMSResultResp)(nil), "mapgoo.paas.socol.data.OMSResultResp")
	proto.RegisterType((*SocolWarnPos)(nil), "mapgoo.paas.socol.data.SocolWarnPos")
	proto.RegisterType((*SocolWarning)(nil), "mapgoo.paas.socol.data.SocolWarning")
	proto.RegisterType((*SocolTrackRecord)(nil), "mapgoo.paas.socol.data.SocolTrackRecord")
}

func init() { proto.RegisterFile("mapgoo.paas.socol.data.proto", fileDescriptor_c9038a572a6b9607) }

var fileDescriptor_c9038a572a6b9607 = []byte{
	// 1086 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcd, 0x6e, 0x24, 0x35,
	0x10, 0xde, 0xde, 0x9e, 0xdf, 0x9a, 0xcc, 0x26, 0xb4, 0x20, 0xf4, 0x66, 0x93, 0x61, 0x68, 0x40,
	0x3b, 0x42, 0x62, 0x22, 0x2d, 0x47, 0x40, 0xc0, 0x26, 0x42, 0x8a, 0x44, 0xb4, 0x2b, 0x4f, 0x56,
	0x48, 0x5c, 0x5a, 0x4e, 0xb7, 0xd3, 0x63, 0xd1, 0x6d, 0x77, 0x6c, 0x77, 0xc8, 0x20, 0x71, 0xe7,
	0x11, 0x78, 0x0b, 0xde, 0x80, 0xf3, 0x4a, 0x5c, 0x38, 0xf0, 0x00, 0x10, 0x1e, 0x81, 0x17, 0x40,
	0x2e, 0x7b, 0x7e, 0x02, 0x0b, 0xca, 0xad, 0xea, 0x2b, 0xbb, 0xba, 0xfc, 0xd5, 0x57, 0x76, 0xc3,
	0x7e, 0x45, 0xeb, 0x42, 0xca, 0x69, 0x4d, 0xa9, 0x9e, 0x6a, 0x99, 0xc9, 0x72, 0x9a, 0x53, 0x43,
	0xa7, 0xb5, 0x92, 0x46, 0x46, 0xbb, 0xaf, 0x8e, 0xee, 0xdd, 0xc2, 0xcf, 0xa9, 0x66, 0x6e, 0xfd,
	0xde, 0x07, 0x05, 0x37, 0xf3, 0xe6, 0x7c, 0x9a, 0xc9, 0xea, 0xb0, 0x90, 0x85, 0x3c, 0x44, 0xf8,
	0xbc, 0xb9, 0x40, 0x0f, 0x1d, 0xb4, 0xfc, 0xf2, 0xfd, 0x42, 0xca, 0xa2, 0x64, 0x87, 0xb4, 0xe6,
	0x87, 0x54, 0x08, 0x69, 0xa8, 0xe1, 0x52, 0x68, 0x17, 0x4d, 0xbe, 0x87, 0xed, 0x99, 0xfd, 0xe4,
	0xe7, 0x99, 0x45, 0x8f, 0xa9, 0xa1, 0x51, 0x0c, 0xdd, 0x6c, 0x4e, 0x85, 0x60, 0x65, 0x1c, 0x8c,
	0x83, 0x49, 0x9b, 0x2c, 0xdd, 0xe8, 0x75, 0x68, 0x6b, 0xc3, 0x2b, 0x16, 0xdf, 0x1f, 0x87, 0x93,
	0x90, 0x38, 0x27, 0xda, 0x81, 0x50, 0x29, 0x13, 0x87, 0xe3, 0x60, 0x12, 0x12, 0x6b, 0x46, 0x13,
	0xd8, 0xa9, 0xb8, 0x48, 0x75, 0x93, 0x65, 0x2c, 0xcb, 0x52, 0x45, 0x0d, 0x8b, 0x5b, 0xe3, 0x60,
	0x32, 0x24, 0x0f, 0x2a, 0x2e, 0x66, 0x0e, 0x26, 0xd4, 0xb0, 0xe4, 0xa7, 0x00, 0x1e, 0xe0, 0xf7,
	0x8f, 0xaa, 0x7c, 0x66, 0xa8, 0x69, 0x74, 0xf4, 0x08, 0xfa, 0x9a, 0x89, 0x3c, 0xbd, 0x28, 0x69,
	0x81, 0x05, 0xf4, 0x48, 0xcf, 0x02, 0x5f, 0x94, 0xb4, 0x58, 0x05, 0x7d, 0x15, 0x36, 0x25, 0x06,
	0xcf, 0x6c, 0x21, 0x6f, 0xc1, 0x00, 0x83, 0x8a, 0xe9, 0xa6, 0x74, 0x05, 0xb5, 0x09, 0x58, 0x88,
	0x20, 0x12, 0xbd, 0x0d, 0x5b, 0x58, 0x93, 0xd6, 0x2e, 0x81, 0xab, 0x69, 0xe0, 0xb1, 0x65, 0x0e,
	0xc5, 0x8c, 0x5a, 0xe0, 0x02, 0x1d, 0xb7, 0x71, 0x05, 0x20, 0x64, 0xe3, 0x3a, 0xb9, 0x82, 0x1d,
	0x2c, 0xf8, 0x45, 0x5d, 0x4a, 0x9a, 0x9f, 0x54, 0xb4, 0x60, 0x96, 0x17, 0x2e, 0x72, 0x76, 0x8d,
	0xe5, 0x86, 0xc4, 0x39, 0x51, 0x04, 0xad, 0x55, 0x99, 0x21, 0x69, 0x2d, 0xb9, 0x6a, 0x54, 0x89,
	0xa5, 0xf5, 0x89, 0x35, 0xed, 0x2a, 0xcd, 0xbf, 0x5b, 0xd6, 0x82, 0xb6, 0xc5, 0x04, 0xad, 0x18,
	0x7e, 0xbd, 0x4f, 0xd0, 0x4e, 0x66, 0xbe, 0x51, 0xee, 0xbb, 0xd8, 0xa8, 0xcf, 0xa0, 0xc3, 0xed,
	0xf7, 0x75, 0x1c, 0x8c, 0xc3, 0xc9, 0xe0, 0xc9, 0x64, 0xfa, 0x1f, 0x3a, 0xfb, 0x67, 0xc1, 0xc4,
	0xef, 0x4b, 0x7e, 0x09, 0x20, 0xda, 0x08, 0xce, 0x9a, 0xaa, 0xa2, 0x6a, 0x11, 0x1d, 0x00, 0xb0,
	0xeb, 0x9a, 0x65, 0x26, 0xcd, 0x84, 0xc1, 0x43, 0x0d, 0x49, 0xdf, 0x21, 0x47, 0xc2, 0x20, 0xcf,
	0x9e, 0x46, 0x1b, 0x77, 0x6d, 0x00, 0x0f, 0xf9, 0x05, 0xec, 0xda, 0x28, 0xea, 0x13, 0x84, 0x6e,
	0x81, 0x87, 0xec, 0x82, 0x37, 0xa1, 0x6b, 0x39, 0xb6, 0x41, 0x77, 0xee, 0x8e, 0x51, 0x0b, 0xbf,
	0xf3, 0x82, 0x0b, 0xae, 0xe7, 0xae, 0x41, 0x96, 0x80, 0x16, 0x01, 0x07, 0x61, 0x7f, 0xf6, 0xa0,
	0x97, 0x37, 0x0a, 0x25, 0x1c, 0x77, 0x5c, 0xff, 0x97, 0x7e, 0xf2, 0x31, 0x0c, 0x56, 0x5a, 0x62,
	0x97, 0xd1, 0x2e, 0x74, 0xb4, 0x6c, 0x54, 0xc6, 0xf0, 0x04, 0x7d, 0xe2, 0xbd, 0xe8, 0x0d, 0xe8,
	0x68, 0x76, 0x99, 0xf2, 0x1c, 0x2b, 0xef, 0x93, 0xb6, 0x66, 0x97, 0x27, 0x79, 0xf2, 0xf4, 0x16,
	0x15, 0xa7, 0x4c, 0x6b, 0xdb, 0xda, 0x08, 0x5a, 0x99, 0xcc, 0x97, 0x29, 0xd0, 0xb6, 0x03, 0x52,
	0xb9, 0xb0, 0xcf, 0xb0, 0x74, 0x93, 0xbf, 0xee, 0xc3, 0x6b, 0xcf, 0x4e, 0x67, 0x9b, 0x54, 0xb3,
	0x4b, 0x9b, 0x83, 0x57, 0x8c, 0x2f, 0x73, 0x58, 0xdb, 0x0a, 0x41, 0xb3, 0x4b, 0xbf, 0xdf, 0x9a,
	0x1b, 0xe5, 0x86, 0xb7, 0xca, 0xdd, 0x85, 0x8e, 0x17, 0x74, 0xcb, 0xe1, 0xce, 0x8b, 0xc6, 0x30,
	0xb8, 0x62, 0x4a, 0x73, 0x29, 0x8e, 0x6c, 0x81, 0x4e, 0x2b, 0x9b, 0x90, 0x6d, 0xe3, 0x39, 0x35,
	0xd9, 0x3c, 0x35, 0x8b, 0x9a, 0x21, 0x5b, 0x6d, 0xd2, 0x47, 0xe4, 0x6c, 0x51, 0xb3, 0xe8, 0x23,
	0x68, 0x59, 0x75, 0xc4, 0xdd, 0x71, 0x30, 0x19, 0x3c, 0x79, 0x7c, 0x07, 0xf1, 0x58, 0xd5, 0x11,
	0xdc, 0x14, 0x1d, 0xaf, 0x39, 0xe8, 0xe1, 0xfe, 0xf7, 0xef, 0xb0, 0xdf, 0x93, 0xba, 0xe2, 0xcb,
	0x66, 0xd1, 0x4e, 0x73, 0x71, 0xff, 0xce, 0x59, 0xbc, 0x4a, 0xc9, 0x72, 0x6b, 0xf2, 0x09, 0x0c,
	0x9f, 0x9d, 0xce, 0xdc, 0x8c, 0x13, 0xa6, 0x6b, 0x3b, 0x8f, 0x4c, 0x29, 0xa9, 0xfc, 0xfd, 0xe5,
	0x1c, 0x47, 0x24, 0xd5, 0x52, 0x78, 0xd6, 0xbd, 0x97, 0xfc, 0x10, 0xc0, 0x16, 0xa6, 0xff, 0x8a,
	0x2a, 0xf1, 0x5c, 0x6a, 0xd4, 0xf7, 0x42, 0x1b, 0x56, 0x39, 0x11, 0xba, 0xa1, 0x06, 0x07, 0xa1,
	0x08, 0x1f, 0x42, 0xaf, 0xa8, 0x75, 0xba, 0x31, 0xdd, 0xdd, 0xa2, 0x76, 0xf7, 0xc7, 0x08, 0xa0,
	0x94, 0xa2, 0x30, 0xdc, 0x34, 0x39, 0x5b, 0x5e, 0x41, 0x6b, 0x24, 0xda, 0x87, 0x7e, 0x49, 0x85,
	0x0f, 0xb7, 0x5c, 0x4b, 0x56, 0x40, 0xf2, 0xdb, 0x66, 0x29, 0x5c, 0x14, 0xaf, 0x94, 0xce, 0x23,
	0xe8, 0x7f, 0x4b, 0x95, 0x70, 0x5d, 0xf5, 0x77, 0xa0, 0x05, 0xb0, 0xa9, 0xcb, 0x60, 0xce, 0x74,
	0xe6, 0x85, 0x84, 0xc1, 0x63, 0xa6, 0xb3, 0x0d, 0x89, 0xf9, 0xa9, 0xf3, 0x12, 0x3b, 0x00, 0x70,
	0x56, 0x6a, 0x35, 0xe9, 0x94, 0xd4, 0x77, 0x88, 0x1d, 0xa4, 0x4f, 0xa1, 0x57, 0x4b, 0x9d, 0x96,
	0x5c, 0x9b, 0xb8, 0x83, 0x37, 0xcd, 0xbb, 0xff, 0xdb, 0x26, 0xcf, 0x23, 0xe9, 0xd6, 0x52, 0x7f,
	0xc9, 0xb5, 0x49, 0x7e, 0x0e, 0xfd, 0xa5, 0x79, 0xa6, 0x68, 0xf6, 0x0d, 0x61, 0x99, 0x54, 0xb9,
	0x65, 0x39, 0x67, 0x57, 0x3c, 0x63, 0xe9, 0xc6, 0x09, 0xc1, 0x41, 0x27, 0xf6, 0x9c, 0xb7, 0xa9,
	0xbc, 0xff, 0x2f, 0x2a, 0xf7, 0xa0, 0x57, 0xd2, 0x5b, 0x44, 0xaf, 0x7c, 0xdb, 0xa1, 0x52, 0x66,
	0xeb, 0x5b, 0xbe, 0x4d, 0xba, 0xa5, 0xcc, 0xb0, 0x43, 0x07, 0x00, 0x99, 0x94, 0x2a, 0x77, 0xfc,
	0xf9, 0xc3, 0x22, 0x82, 0x04, 0xda, 0x37, 0xae, 0x66, 0x2c, 0xc7, 0x79, 0x09, 0x88, 0x73, 0x6c,
	0xdb, 0x72, 0xae, 0x18, 0x3e, 0x92, 0x38, 0x30, 0x43, 0xb2, 0x06, 0x2c, 0xaf, 0x73, 0xc6, 0x8b,
	0xb9, 0xc1, 0x59, 0x08, 0x88, 0xf7, 0x50, 0x71, 0x34, 0xe7, 0x8d, 0x46, 0x75, 0x07, 0xc4, 0x7b,
	0xb6, 0xab, 0xb6, 0x9a, 0x18, 0xf0, 0x7a, 0x43, 0x1b, 0xdf, 0x81, 0x85, 0x3e, 0x8b, 0x07, 0x0e,
	0xb3, 0x76, 0xf4, 0x18, 0xb6, 0x35, 0x35, 0xac, 0x2c, 0xb9, 0x61, 0xa9, 0x91, 0x86, 0x96, 0xf1,
	0x96, 0x7b, 0x46, 0x57, 0xf0, 0x99, 0x45, 0xa3, 0x77, 0x60, 0xb8, 0x5e, 0xa8, 0x85, 0x8a, 0x87,
	0x78, 0xe6, 0xad, 0x15, 0x38, 0x13, 0x2a, 0x7a, 0x0f, 0xd6, 0xdb, 0xd2, 0x46, 0xb3, 0x3c, 0x7e,
	0x80, 0xc9, 0xd6, 0x5b, 0x5f, 0x68, 0x96, 0xaf, 0x1e, 0xa4, 0xed, 0xf5, 0x83, 0xf4, 0xf4, 0xe1,
	0xcb, 0x3f, 0x46, 0xf7, 0x5e, 0xde, 0x8c, 0x82, 0x5f, 0x6f, 0x46, 0xc1, 0xef, 0x37, 0xa3, 0xe0,
	0xc7, 0x3f, 0x47, 0xf7, 0xbe, 0x0e, 0x69, 0xcd, 0x9f, 0xdf, 0x3b, 0xef, 0xe0, 0x9f, 0xc4, 0x87,
	0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xcf, 0x56, 0xd4, 0xe6, 0x08, 0x00, 0x00,
}

func (m *SocolActionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SocolActionData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SocolActionData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MinSucceccRate != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.MinSucceccRate))
		i--
		dAtA[i] = 0x20
	}
	if m.Rrt != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.Rrt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Stime) > 0 {
		dAtA2 := make([]byte, len(m.Stime)*10)
		var j1 int
		for _, num1 := range m.Stime {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.Channel))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SocolCmdStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SocolCmdStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SocolCmdStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetryTimes != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.RetryTimes))
		i--
		dAtA[i] = 0x28
	}
	if m.SuccessTime != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.SuccessTime))
		i--
		dAtA[i] = 0x20
	}
	if m.SendResult != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.SendResult))
		i--
		dAtA[i] = 0x18
	}
	if m.SendTime != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.SendTime))
		i--
		dAtA[i] = 0x10
	}
	if m.SendFlag {
		i--
		if m.SendFlag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SocolUploadImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SocolUploadImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SocolUploadImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Size_ != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Time != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SocolUploadData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SocolUploadData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SocolUploadData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SocolUploadSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SocolUploadSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SocolUploadSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Duration != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x30
	}
	if m.FinishTime != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.FinishTime))
		i--
		dAtA[i] = 0x28
	}
	if m.TryCnt != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.TryCnt))
		i--
		dAtA[i] = 0x20
	}
	if m.ExtractCnt != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.ExtractCnt))
		i--
		dAtA[i] = 0x18
	}
	if m.SuccessCnt != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.SuccessCnt))
		i--
		dAtA[i] = 0x10
	}
	if m.ExpectCnt != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.ExpectCnt))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SocolCmdSeq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SocolCmdSeq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SocolCmdSeq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SeqId) > 0 {
		i -= len(m.SeqId)
		copy(dAtA[i:], m.SeqId)
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(len(m.SeqId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SocolUploadMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SocolUploadMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SocolUploadMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OMSUploadImageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OMSUploadImageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OMSUploadImageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Summary != nil {
		{
			size, err := m.Summary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.BatchType != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.BatchType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.VersionCode) > 0 {
		i -= len(m.VersionCode)
		copy(dAtA[i:], m.VersionCode)
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(len(m.VersionCode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Seq) > 0 {
		i -= len(m.Seq)
		copy(dAtA[i:], m.Seq)
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(len(m.Seq)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Imei) > 0 {
		i -= len(m.Imei)
		copy(dAtA[i:], m.Imei)
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(len(m.Imei)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OMSResultResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OMSResultResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OMSResultResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.Error))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SocolWarnPos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SocolWarnPos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SocolWarnPos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Lantitude != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.Lantitude))
		i--
		dAtA[i] = 0x20
	}
	if m.Longtitude != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.Longtitude))
		i--
		dAtA[i] = 0x18
	}
	if m.GpsTime != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.GpsTime))
		i--
		dAtA[i] = 0x10
	}
	if m.SystemTime != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.SystemTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SocolWarning) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SocolWarning) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SocolWarning) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PosList) > 0 {
		for iNdEx := len(m.PosList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PosList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.SourceSeq) > 0 {
		i -= len(m.SourceSeq)
		copy(dAtA[i:], m.SourceSeq)
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(len(m.SourceSeq)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Source != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x20
	}
	if len(m.WarnDesc) > 0 {
		i -= len(m.WarnDesc)
		copy(dAtA[i:], m.WarnDesc)
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(len(m.WarnDesc)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WarnType != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.WarnType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Imei) > 0 {
		i -= len(m.Imei)
		copy(dAtA[i:], m.Imei)
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(len(m.Imei)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SocolTrackRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SocolTrackRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SocolTrackRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Size_ != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x78
	}
	if m.SatelliteUsed != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.SatelliteUsed))
		i--
		dAtA[i] = 0x70
	}
	if m.SatelliteSnr != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.SatelliteSnr))
		i--
		dAtA[i] = 0x68
	}
	if m.SatelliteTotal != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.SatelliteTotal))
		i--
		dAtA[i] = 0x60
	}
	if m.SysT != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.SysT))
		i--
		dAtA[i] = 0x58
	}
	if m.LocT != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.LocT))
		i--
		dAtA[i] = 0x50
	}
	if m.Radius != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Radius))))
		i--
		dAtA[i] = 0x49
	}
	if m.Height != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Height))))
		i--
		dAtA[i] = 0x41
	}
	if m.Direction != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x38
	}
	if m.Speed != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Speed))))
		i--
		dAtA[i] = 0x31
	}
	if len(m.CoordType) > 0 {
		i -= len(m.CoordType)
		copy(dAtA[i:], m.CoordType)
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(len(m.CoordType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LocTime != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.LocTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Latitude != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.Latitude))
		i--
		dAtA[i] = 0x18
	}
	if m.Longtitude != 0 {
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(m.Longtitude))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DeviceImei) > 0 {
		i -= len(m.DeviceImei)
		copy(dAtA[i:], m.DeviceImei)
		i = encodeVarintMapgooPaasSocolData(dAtA, i, uint64(len(m.DeviceImei)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMapgooPaasSocolData(dAtA []byte, offset int, v uint64) int {
	offset -= sovMapgooPaasSocolData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SocolActionData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.Channel))
	}
	if len(m.Stime) > 0 {
		l = 0
		for _, e := range m.Stime {
			l += sovMapgooPaasSocolData(uint64(e))
		}
		n += 1 + sovMapgooPaasSocolData(uint64(l)) + l
	}
	if m.Rrt != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.Rrt))
	}
	if m.MinSucceccRate != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.MinSucceccRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SocolCmdStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendFlag {
		n += 2
	}
	if m.SendTime != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.SendTime))
	}
	if m.SendResult != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.SendResult))
	}
	if m.SuccessTime != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.SuccessTime))
	}
	if m.RetryTimes != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.RetryTimes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SocolUploadImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.Index))
	}
	if m.Time != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.Time))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.Size_))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SocolUploadData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovMapgooPaasSocolData(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SocolUploadSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpectCnt != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.ExpectCnt))
	}
	if m.SuccessCnt != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.SuccessCnt))
	}
	if m.ExtractCnt != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.ExtractCnt))
	}
	if m.TryCnt != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.TryCnt))
	}
	if m.FinishTime != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.FinishTime))
	}
	if m.Duration != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.Duration))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SocolCmdSeq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	l = len(m.SeqId)
	if l > 0 {
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SocolUploadMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OMSUploadImageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Imei)
	if l > 0 {
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	l = len(m.Seq)
	if l > 0 {
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	l = len(m.VersionCode)
	if l > 0 {
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	if m.BatchType != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.BatchType))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	if m.Summary != nil {
		l = m.Summary.Size()
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OMSResultResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.Error))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SocolWarnPos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemTime != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.SystemTime))
	}
	if m.GpsTime != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.GpsTime))
	}
	if m.Longtitude != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.Longtitude))
	}
	if m.Lantitude != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.Lantitude))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SocolWarning) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Imei)
	if l > 0 {
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	if m.WarnType != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.WarnType))
	}
	l = len(m.WarnDesc)
	if l > 0 {
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	if m.Source != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.Source))
	}
	l = len(m.SourceSeq)
	if l > 0 {
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	if len(m.PosList) > 0 {
		for _, e := range m.PosList {
			l = e.Size()
			n += 1 + l + sovMapgooPaasSocolData(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SocolTrackRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceImei)
	if l > 0 {
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	if m.Longtitude != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.Longtitude))
	}
	if m.Latitude != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.Latitude))
	}
	if m.LocTime != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.LocTime))
	}
	l = len(m.CoordType)
	if l > 0 {
		n += 1 + l + sovMapgooPaasSocolData(uint64(l))
	}
	if m.Speed != 0 {
		n += 9
	}
	if m.Direction != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.Direction))
	}
	if m.Height != 0 {
		n += 9
	}
	if m.Radius != 0 {
		n += 9
	}
	if m.LocT != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.LocT))
	}
	if m.SysT != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.SysT))
	}
	if m.SatelliteTotal != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.SatelliteTotal))
	}
	if m.SatelliteSnr != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.SatelliteSnr))
	}
	if m.SatelliteUsed != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.SatelliteUsed))
	}
	if m.Size_ != 0 {
		n += 1 + sovMapgooPaasSocolData(uint64(m.Size_))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMapgooPaasSocolData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMapgooPaasSocolData(x uint64) (n int) {
	return sovMapgooPaasSocolData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SocolActionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasSocolData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SocolActionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SocolActionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapgooPaasSocolData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Stime = append(m.Stime, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapgooPaasSocolData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMapgooPaasSocolData
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMapgooPaasSocolData
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Stime) == 0 {
					m.Stime = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMapgooPaasSocolData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Stime = append(m.Stime, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rrt", wireType)
			}
			m.Rrt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rrt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSucceccRate", wireType)
			}
			m.MinSucceccRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSucceccRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasSocolData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SocolCmdStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasSocolData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SocolCmdStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SocolCmdStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendFlag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendFlag = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendResult", wireType)
			}
			m.SendResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendResult |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessTime", wireType)
			}
			m.SuccessTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccessTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryTimes", wireType)
			}
			m.RetryTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryTimes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasSocolData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SocolUploadImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasSocolData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SocolUploadImage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SocolUploadImage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasSocolData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SocolUploadData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasSocolData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SocolUploadData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SocolUploadData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &SocolUploadImage{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasSocolData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SocolUploadSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasSocolData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SocolUploadSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SocolUploadSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectCnt", wireType)
			}
			m.ExpectCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpectCnt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessCnt", wireType)
			}
			m.SuccessCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccessCnt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtractCnt", wireType)
			}
			m.ExtractCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtractCnt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TryCnt", wireType)
			}
			m.TryCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TryCnt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			m.FinishTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasSocolData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SocolCmdSeq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasSocolData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SocolCmdSeq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SocolCmdSeq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasSocolData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SocolUploadMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasSocolData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SocolUploadMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SocolUploadMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasSocolData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OMSUploadImageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasSocolData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OMSUploadImageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OMSUploadImageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchType", wireType)
			}
			m.BatchType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &SocolUploadData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &SocolUploadMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Summary == nil {
				m.Summary = &SocolUploadSummary{}
			}
			if err := m.Summary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasSocolData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OMSResultResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasSocolData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OMSResultResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OMSResultResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasSocolData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SocolWarnPos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasSocolData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SocolWarnPos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SocolWarnPos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemTime", wireType)
			}
			m.SystemTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SystemTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpsTime", wireType)
			}
			m.GpsTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GpsTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longtitude", wireType)
			}
			m.Longtitude = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Longtitude |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lantitude", wireType)
			}
			m.Lantitude = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lantitude |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasSocolData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SocolWarning) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasSocolData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SocolWarning: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SocolWarning: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarnType", wireType)
			}
			m.WarnType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WarnType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarnDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WarnDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceSeq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceSeq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PosList = append(m.PosList, &SocolWarnPos{})
			if err := m.PosList[len(m.PosList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasSocolData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SocolTrackRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasSocolData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SocolTrackRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SocolTrackRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceImei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceImei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longtitude", wireType)
			}
			m.Longtitude = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Longtitude |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			m.Latitude = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Latitude |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocTime", wireType)
			}
			m.LocTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoordType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Speed = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Height = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radius", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Radius = float64(math.Float64frombits(v))
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocT", wireType)
			}
			m.LocT = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocT |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysT", wireType)
			}
			m.SysT = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SysT |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SatelliteTotal", wireType)
			}
			m.SatelliteTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SatelliteTotal |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SatelliteSnr", wireType)
			}
			m.SatelliteSnr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SatelliteSnr |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SatelliteUsed", wireType)
			}
			m.SatelliteUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SatelliteUsed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasSocolData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasSocolData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMapgooPaasSocolData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMapgooPaasSocolData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapgooPaasSocolData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMapgooPaasSocolData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMapgooPaasSocolData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMapgooPaasSocolData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMapgooPaasSocolData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMapgooPaasSocolData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMapgooPaasSocolData = fmt.Errorf("proto: unexpected end of group")
)

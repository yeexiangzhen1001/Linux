// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mapgoo.paas.dap.hold.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//获取渠道对应分库信息
type GetHoldDataRouterReq struct {
	//用户ID
	HoldId uint32 `protobuf:"varint,1,opt,name=hold_id,json=holdId,proto3" json:"hold_id,omitempty"`
	//状态 1-拆分未迁移完成 2-拆分迁移完成 3-合并未迁移完成
	Status               uint32   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHoldDataRouterReq) Reset()         { *m = GetHoldDataRouterReq{} }
func (m *GetHoldDataRouterReq) String() string { return proto.CompactTextString(m) }
func (*GetHoldDataRouterReq) ProtoMessage()    {}
func (*GetHoldDataRouterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d614226bca3c95a2, []int{0}
}
func (m *GetHoldDataRouterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHoldDataRouterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHoldDataRouterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHoldDataRouterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHoldDataRouterReq.Merge(m, src)
}
func (m *GetHoldDataRouterReq) XXX_Size() int {
	return m.Size()
}
func (m *GetHoldDataRouterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHoldDataRouterReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetHoldDataRouterReq proto.InternalMessageInfo

func (m *GetHoldDataRouterReq) GetHoldId() uint32 {
	if m != nil {
		return m.HoldId
	}
	return 0
}

func (m *GetHoldDataRouterReq) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type GetHoldDataRouterResp struct {
	//返回信息
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	//渠道对应分库信息
	RouterList           []*HoldDataRouter `protobuf:"bytes,2,rep,name=router_list,json=routerList,proto3" json:"router_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetHoldDataRouterResp) Reset()         { *m = GetHoldDataRouterResp{} }
func (m *GetHoldDataRouterResp) String() string { return proto.CompactTextString(m) }
func (*GetHoldDataRouterResp) ProtoMessage()    {}
func (*GetHoldDataRouterResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d614226bca3c95a2, []int{1}
}
func (m *GetHoldDataRouterResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHoldDataRouterResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHoldDataRouterResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHoldDataRouterResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHoldDataRouterResp.Merge(m, src)
}
func (m *GetHoldDataRouterResp) XXX_Size() int {
	return m.Size()
}
func (m *GetHoldDataRouterResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHoldDataRouterResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetHoldDataRouterResp proto.InternalMessageInfo

func (m *GetHoldDataRouterResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetHoldDataRouterResp) GetRouterList() []*HoldDataRouter {
	if m != nil {
		return m.RouterList
	}
	return nil
}

//保存渠道对应分库信息
type SaveHoldDataRouterReq struct {
	//用户ID
	Router               *HoldDataRouter `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SaveHoldDataRouterReq) Reset()         { *m = SaveHoldDataRouterReq{} }
func (m *SaveHoldDataRouterReq) String() string { return proto.CompactTextString(m) }
func (*SaveHoldDataRouterReq) ProtoMessage()    {}
func (*SaveHoldDataRouterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d614226bca3c95a2, []int{2}
}
func (m *SaveHoldDataRouterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveHoldDataRouterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveHoldDataRouterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveHoldDataRouterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveHoldDataRouterReq.Merge(m, src)
}
func (m *SaveHoldDataRouterReq) XXX_Size() int {
	return m.Size()
}
func (m *SaveHoldDataRouterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveHoldDataRouterReq.DiscardUnknown(m)
}

var xxx_messageInfo_SaveHoldDataRouterReq proto.InternalMessageInfo

func (m *SaveHoldDataRouterReq) GetRouter() *HoldDataRouter {
	if m != nil {
		return m.Router
	}
	return nil
}

type SaveHoldDataRouterResp struct {
	//返回信息
	Base                 *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SaveHoldDataRouterResp) Reset()         { *m = SaveHoldDataRouterResp{} }
func (m *SaveHoldDataRouterResp) String() string { return proto.CompactTextString(m) }
func (*SaveHoldDataRouterResp) ProtoMessage()    {}
func (*SaveHoldDataRouterResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d614226bca3c95a2, []int{3}
}
func (m *SaveHoldDataRouterResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveHoldDataRouterResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveHoldDataRouterResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveHoldDataRouterResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveHoldDataRouterResp.Merge(m, src)
}
func (m *SaveHoldDataRouterResp) XXX_Size() int {
	return m.Size()
}
func (m *SaveHoldDataRouterResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveHoldDataRouterResp.DiscardUnknown(m)
}

var xxx_messageInfo_SaveHoldDataRouterResp proto.InternalMessageInfo

func (m *SaveHoldDataRouterResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

//更新渠道对应分库信息
type UpdateHoldDataRouterReq struct {
	//用户ID
	HoldId uint32 `protobuf:"varint,1,opt,name=hold_id,json=holdId,proto3" json:"hold_id,omitempty"`
	//是否删除 1-已删除'
	IsDeleted uint32 `protobuf:"varint,2,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	//状态 1-拆分未迁移完成 2-拆分迁移完成 3-合并未迁移完成
	Status               uint32   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateHoldDataRouterReq) Reset()         { *m = UpdateHoldDataRouterReq{} }
func (m *UpdateHoldDataRouterReq) String() string { return proto.CompactTextString(m) }
func (*UpdateHoldDataRouterReq) ProtoMessage()    {}
func (*UpdateHoldDataRouterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d614226bca3c95a2, []int{4}
}
func (m *UpdateHoldDataRouterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateHoldDataRouterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateHoldDataRouterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateHoldDataRouterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateHoldDataRouterReq.Merge(m, src)
}
func (m *UpdateHoldDataRouterReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateHoldDataRouterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateHoldDataRouterReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateHoldDataRouterReq proto.InternalMessageInfo

func (m *UpdateHoldDataRouterReq) GetHoldId() uint32 {
	if m != nil {
		return m.HoldId
	}
	return 0
}

func (m *UpdateHoldDataRouterReq) GetIsDeleted() uint32 {
	if m != nil {
		return m.IsDeleted
	}
	return 0
}

func (m *UpdateHoldDataRouterReq) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type UpdateHoldDataRouterResp struct {
	//返回信息
	Base                 *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UpdateHoldDataRouterResp) Reset()         { *m = UpdateHoldDataRouterResp{} }
func (m *UpdateHoldDataRouterResp) String() string { return proto.CompactTextString(m) }
func (*UpdateHoldDataRouterResp) ProtoMessage()    {}
func (*UpdateHoldDataRouterResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d614226bca3c95a2, []int{5}
}
func (m *UpdateHoldDataRouterResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateHoldDataRouterResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateHoldDataRouterResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateHoldDataRouterResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateHoldDataRouterResp.Merge(m, src)
}
func (m *UpdateHoldDataRouterResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateHoldDataRouterResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateHoldDataRouterResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateHoldDataRouterResp proto.InternalMessageInfo

func (m *UpdateHoldDataRouterResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func init() {
	proto.RegisterType((*GetHoldDataRouterReq)(nil), "mapgoo.paas.hold.dap.GetHoldDataRouterReq")
	proto.RegisterType((*GetHoldDataRouterResp)(nil), "mapgoo.paas.hold.dap.GetHoldDataRouterResp")
	proto.RegisterType((*SaveHoldDataRouterReq)(nil), "mapgoo.paas.hold.dap.SaveHoldDataRouterReq")
	proto.RegisterType((*SaveHoldDataRouterResp)(nil), "mapgoo.paas.hold.dap.SaveHoldDataRouterResp")
	proto.RegisterType((*UpdateHoldDataRouterReq)(nil), "mapgoo.paas.hold.dap.UpdateHoldDataRouterReq")
	proto.RegisterType((*UpdateHoldDataRouterResp)(nil), "mapgoo.paas.hold.dap.UpdateHoldDataRouterResp")
}

func init() { proto.RegisterFile("mapgoo.paas.dap.hold.proto", fileDescriptor_d614226bca3c95a2) }

var fileDescriptor_d614226bca3c95a2 = []byte{
	// 764 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xc7, 0xeb, 0xf6, 0x2a, 0x57, 0xf7, 0x54, 0xb7, 0xf7, 0x66, 0x48, 0xdb, 0x28, 0x6d, 0xad,
	0xca, 0x7c, 0xa8, 0xa2, 0xad, 0xdd, 0x86, 0x35, 0x0b, 0x4a, 0x44, 0xa9, 0x54, 0x50, 0x95, 0x02,
	0x0b, 0x36, 0xd5, 0x24, 0x9e, 0x3a, 0x23, 0x12, 0xcf, 0xd4, 0x33, 0x41, 0x20, 0x24, 0x16, 0xbc,
	0x01, 0xaa, 0x10, 0x6c, 0x78, 0x1f, 0x96, 0x48, 0xbc, 0x00, 0x2a, 0x88, 0xe7, 0x40, 0x9e, 0x49,
	0x1b, 0xd7, 0x1e, 0x07, 0xbb, 0xbb, 0x78, 0xe6, 0x77, 0xce, 0xff, 0x7c, 0xc5, 0x3e, 0xd0, 0x18,
	0x60, 0x1e, 0x30, 0xe6, 0x72, 0x8c, 0x85, 0xeb, 0x63, 0xee, 0xf6, 0x58, 0xdf, 0x77, 0x79, 0xc4,
	0x24, 0x43, 0xb5, 0xe4, 0x9d, 0x3a, 0xf7, 0x31, 0x6f, 0x2c, 0x24, 0x4f, 0x3b, 0x58, 0x10, 0x4d,
	0x37, 0x96, 0x0c, 0xb4, 0xc4, 0xa3, 0xcb, 0xcd, 0x80, 0xca, 0xde, 0xb0, 0xe3, 0x76, 0xd9, 0xc0,
	0x0b, 0x58, 0xc0, 0x3c, 0x75, 0xdc, 0x19, 0x1e, 0xab, 0x27, 0xf5, 0xa0, 0x7e, 0x8d, 0xf0, 0xe5,
	0x80, 0xb1, 0xa0, 0x4f, 0x3c, 0xcc, 0xa9, 0x87, 0xc3, 0x90, 0x49, 0x2c, 0x29, 0x0b, 0x85, 0xbe,
	0x75, 0x76, 0xa1, 0xb6, 0x4b, 0xe4, 0x43, 0xd6, 0xf7, 0x5b, 0x58, 0xe2, 0x36, 0x1b, 0x4a, 0x12,
	0xb5, 0xc9, 0x09, 0x5a, 0x84, 0xbf, 0x63, 0xdd, 0x23, 0xea, 0xd7, 0xad, 0x55, 0x6b, 0xed, 0xdf,
	0x76, 0x25, 0x7e, 0xdc, 0xf3, 0xd1, 0x02, 0x54, 0x84, 0xc4, 0x72, 0x28, 0xea, 0xd3, 0xfa, 0x5c,
	0x3f, 0x39, 0xa7, 0x16, 0xcc, 0x1b, 0x3c, 0x09, 0x8e, 0x9a, 0xf0, 0x57, 0x9c, 0x9a, 0xf2, 0x33,
	0xdb, 0xb4, 0xdd, 0x4c, 0xce, 0x3b, 0x58, 0x90, 0x98, 0xdc, 0x0b, 0x8f, 0x59, 0x5b, 0xb1, 0xe8,
	0x01, 0xcc, 0x46, 0xca, 0xc3, 0x51, 0x9f, 0x0a, 0x59, 0x9f, 0x5e, 0x9d, 0x59, 0x9b, 0x6d, 0xde,
	0x74, 0xcd, 0x65, 0x49, 0x69, 0x82, 0xb6, 0xdc, 0xa7, 0x42, 0x3a, 0xcf, 0x60, 0xfe, 0x10, 0xbf,
	0x24, 0xd9, 0xfc, 0xee, 0x42, 0x45, 0x63, 0xa3, 0xb0, 0x0a, 0xfa, 0x1e, 0x19, 0x39, 0xfb, 0xb0,
	0x60, 0xf2, 0x7b, 0xb5, 0x6c, 0x1d, 0x0a, 0x8b, 0x4f, 0xb9, 0x8f, 0x25, 0x29, 0xd1, 0x87, 0x15,
	0x00, 0x2a, 0x8e, 0x7c, 0xd2, 0x27, 0x92, 0xf8, 0xa3, 0x5e, 0xfc, 0x43, 0x45, 0x4b, 0x1f, 0x24,
	0xda, 0x34, 0x73, 0xa9, 0x4d, 0x8f, 0xa1, 0x6e, 0x96, 0xba, 0x5a, 0xe8, 0xcd, 0x5f, 0x55, 0x98,
	0x8b, 0x5d, 0x3d, 0xc2, 0x21, 0x0e, 0xc8, 0x80, 0x84, 0x12, 0xbd, 0x55, 0x83, 0x70, 0x8f, 0xbf,
	0xb8, 0xcf, 0xc2, 0x63, 0x1a, 0xec, 0x46, 0x6c, 0xa8, 0x2c, 0xd0, 0x76, 0x4e, 0x8d, 0x8d, 0x74,
	0x6b, 0xa7, 0x4d, 0x4e, 0x1a, 0xcd, 0xb2, 0x26, 0x82, 0x23, 0x06, 0xff, 0xeb, 0xeb, 0x3d, 0x49,
	0x06, 0x1a, 0x41, 0x1b, 0x13, 0xfd, 0x8c, 0x41, 0xad, 0xba, 0x59, 0x82, 0x16, 0x1c, 0x45, 0x50,
	0x8d, 0x87, 0xe1, 0x22, 0xa0, 0x78, 0xf2, 0x50, 0x9e, 0x8f, 0x0c, 0xa9, 0x25, 0xdd, 0x32, 0x78,
	0x32, 0xc9, 0x84, 0xe4, 0x46, 0x81, 0x62, 0x8d, 0x15, 0x37, 0x4b, 0xd0, 0x82, 0xa3, 0x57, 0x70,
	0xed, 0x90, 0xe0, 0xa8, 0xdb, 0xbb, 0xac, 0xe9, 0xe5, 0xc5, 0x9d, 0x65, 0xb5, 0xec, 0x56, 0x39,
	0x03, 0xc1, 0x51, 0x1f, 0xfe, 0xd3, 0x53, 0x7d, 0x71, 0x89, 0xd6, 0x73, 0x9c, 0xa4, 0x38, 0xad,
	0xb8, 0x51, 0x1c, 0x36, 0x34, 0xb3, 0x45, 0xbb, 0x05, 0x9b, 0x19, 0x93, 0x25, 0x9a, 0x79, 0x8e,
	0xeb, 0xda, 0xa6, 0x83, 0x89, 0x55, 0xbd, 0x82, 0x81, 0x5f, 0xe8, 0x6e, 0x95, 0x33, 0x30, 0x76,
	0x75, 0xa2, 0xb2, 0x81, 0x2d, 0xd5, 0xd5, 0x84, 0xf2, 0x10, 0xd0, 0xa5, 0x72, 0xa8, 0x7f, 0x31,
	0x2a, 0x54, 0x39, 0x85, 0x6a, 0x5d, 0xaf, 0x14, 0x2f, 0x38, 0x7a, 0x03, 0xb5, 0x54, 0x35, 0xb4,
	0x70, 0xc1, 0xd2, 0x25, 0xa4, 0xb7, 0x4b, 0x5a, 0x68, 0xf1, 0x54, 0x41, 0x26, 0x8b, 0x9b, 0xe0,
	0xc9, 0xe2, 0x79, 0x16, 0x82, 0xa3, 0x8f, 0x16, 0x54, 0x0f, 0x5f, 0x87, 0xdd, 0x71, 0x33, 0xb0,
	0xc4, 0xf9, 0x93, 0x9d, 0x26, 0xff, 0x30, 0xd9, 0x26, 0x5c, 0x70, 0xe7, 0xfa, 0xbb, 0x6f, 0x3f,
	0x4f, 0xa7, 0x57, 0xd0, 0x92, 0xe7, 0x63, 0xee, 0xc5, 0xbc, 0x97, 0x8d, 0x81, 0xc2, 0x9c, 0x8e,
	0x3b, 0xfe, 0x90, 0xa8, 0x2f, 0xc5, 0xed, 0x89, 0xe9, 0x9d, 0x63, 0x3a, 0xa4, 0xf5, 0xc2, 0xac,
	0x7e, 0x97, 0x8c, 0x96, 0x94, 0x27, 0x11, 0x21, 0x07, 0x58, 0xf6, 0x72, 0xdf, 0x25, 0x29, 0x6e,
	0xf2, 0xbb, 0xc4, 0x00, 0x0b, 0x8e, 0xde, 0x5b, 0x50, 0xcd, 0xec, 0x44, 0xe6, 0xe4, 0xb8, 0x6b,
	0x5a, 0xc3, 0xcc, 0xc9, 0x19, 0x59, 0x73, 0xb1, 0xb3, 0xea, 0x1f, 0x2c, 0xfd, 0xc7, 0x4b, 0x1d,
	0xe7, 0x08, 0x19, 0x97, 0x27, 0x73, 0x15, 0xcc, 0xb0, 0xe0, 0xce, 0x0d, 0x15, 0x96, 0x8d, 0x96,
	0x13, 0x33, 0x90, 0x0d, 0xe0, 0xb3, 0x05, 0x35, 0xd3, 0x66, 0x62, 0x9e, 0x50, 0xee, 0xe6, 0x2c,
	0x4c, 0xe6, 0x09, 0xcd, 0xc3, 0x05, 0x77, 0x6e, 0xa9, 0xe8, 0x56, 0x91, 0x3d, 0x8e, 0xce, 0xc4,
	0xee, 0xcc, 0x7f, 0x39, 0xb3, 0xad, 0xaf, 0x67, 0xb6, 0xf5, 0xfd, 0xcc, 0xb6, 0x3e, 0xfd, 0xb0,
	0xa7, 0x9e, 0xcf, 0x60, 0x4e, 0x0f, 0xa6, 0x0e, 0xac, 0x4e, 0x45, 0xad, 0xd2, 0x77, 0x7e, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x38, 0x2f, 0x04, 0x36, 0x00, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HoldManagementClient is the client API for HoldManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HoldManagementClient interface {
	//获取配置分组表
	GetApkConfigGroupInfo(ctx context.Context, in *GetApkConfigGroupInfoDBReq, opts ...grpc.CallOption) (*GetApkConfigGroupInfoDBResp, error)
	//获取配置字典表
	GetApkItemConfig(ctx context.Context, in *GetApkItemConfigDBReq, opts ...grpc.CallOption) (*GetApkItemConfigDBResp, error)
	//设置渠道配置列表
	SaveApkConfigList(ctx context.Context, in *SaveApkConfigListDBReq, opts ...grpc.CallOption) (*SaveApkConfigListDBResp, error)
	//获取渠道配置列表
	GetApkConfigList(ctx context.Context, in *GetApkConfigListDBReq, opts ...grpc.CallOption) (*GetApkConfigListDBResp, error)
	//查询渠道配置列表
	SearchApkConfigList(ctx context.Context, in *SearchApkConfigListDBReq, opts ...grpc.CallOption) (*SearchApkConfigListDBResp, error)
	//删除渠道配置
	DeleteApkConfig(ctx context.Context, in *DeleteApkConfigDBReq, opts ...grpc.CallOption) (*DeleteApkConfigDBResp, error)
	//保存渠道配置字典数据
	SaveApkConfigDict(ctx context.Context, in *SaveApkConfigDictDBReq, opts ...grpc.CallOption) (*SaveApkConfigDictDBResp, error)
	//删除渠道配置字典数据
	DeleteApkConfigDict(ctx context.Context, in *DeleteApkConfigDictDBReq, opts ...grpc.CallOption) (*DeleteApkConfigDictDBResp, error)
	//分页查询渠道配置字典信息
	SearchApkConfigDict(ctx context.Context, in *SearchApkConfigDictDBReq, opts ...grpc.CallOption) (*SearchApkConfigDictDBResp, error)
	//保存渠道配置分组信息
	SaveApkConfigGroup(ctx context.Context, in *SaveApkConfigGroupDBReq, opts ...grpc.CallOption) (*SaveApkConfigGroupDBResp, error)
	//删除渠道配置分组数据
	DeleteApkConfigGroup(ctx context.Context, in *DeleteApkConfigGroupDBReq, opts ...grpc.CallOption) (*DeleteApkConfigGroupDBResp, error)
	//分页查询渠道配置分组信息
	SearchApkConfigGroup(ctx context.Context, in *SearchApkConfigGroupDBReq, opts ...grpc.CallOption) (*SearchApkConfigGroupDBResp, error)
	//同步APK数据信息
	SyncApkConfigData(ctx context.Context, in *SyncApkConfigDataDBReq, opts ...grpc.CallOption) (*SyncApkConfigDataDBResp, error)
	//分页查询查询渠道信息列表
	SearchHoldInfo(ctx context.Context, in *SearchHoldInfoDBReq, opts ...grpc.CallOption) (*SearchHoldInfoDBResp, error)
	//获取渠道目录树
	GetHoldTreePath(ctx context.Context, in *GetHoldTreePathDBReq, opts ...grpc.CallOption) (*GetHoldTreePathDBResp, error)
	//获取渠道对应分库信息
	GetHoldDataRouter(ctx context.Context, in *GetHoldDataRouterReq, opts ...grpc.CallOption) (*GetHoldDataRouterResp, error)
	//保存渠道对应分库信息
	SaveHoldDataRouter(ctx context.Context, in *SaveHoldDataRouterReq, opts ...grpc.CallOption) (*SaveHoldDataRouterResp, error)
	//更新渠道对应分库信息
	UpdateHoldDataRouter(ctx context.Context, in *UpdateHoldDataRouterReq, opts ...grpc.CallOption) (*UpdateHoldDataRouterResp, error)
}

type holdManagementClient struct {
	cc *grpc.ClientConn
}

func NewHoldManagementClient(cc *grpc.ClientConn) HoldManagementClient {
	return &holdManagementClient{cc}
}

func (c *holdManagementClient) GetApkConfigGroupInfo(ctx context.Context, in *GetApkConfigGroupInfoDBReq, opts ...grpc.CallOption) (*GetApkConfigGroupInfoDBResp, error) {
	out := new(GetApkConfigGroupInfoDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/GetApkConfigGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdManagementClient) GetApkItemConfig(ctx context.Context, in *GetApkItemConfigDBReq, opts ...grpc.CallOption) (*GetApkItemConfigDBResp, error) {
	out := new(GetApkItemConfigDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/GetApkItemConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdManagementClient) SaveApkConfigList(ctx context.Context, in *SaveApkConfigListDBReq, opts ...grpc.CallOption) (*SaveApkConfigListDBResp, error) {
	out := new(SaveApkConfigListDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/SaveApkConfigList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdManagementClient) GetApkConfigList(ctx context.Context, in *GetApkConfigListDBReq, opts ...grpc.CallOption) (*GetApkConfigListDBResp, error) {
	out := new(GetApkConfigListDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/GetApkConfigList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdManagementClient) SearchApkConfigList(ctx context.Context, in *SearchApkConfigListDBReq, opts ...grpc.CallOption) (*SearchApkConfigListDBResp, error) {
	out := new(SearchApkConfigListDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/SearchApkConfigList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdManagementClient) DeleteApkConfig(ctx context.Context, in *DeleteApkConfigDBReq, opts ...grpc.CallOption) (*DeleteApkConfigDBResp, error) {
	out := new(DeleteApkConfigDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/DeleteApkConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdManagementClient) SaveApkConfigDict(ctx context.Context, in *SaveApkConfigDictDBReq, opts ...grpc.CallOption) (*SaveApkConfigDictDBResp, error) {
	out := new(SaveApkConfigDictDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/SaveApkConfigDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdManagementClient) DeleteApkConfigDict(ctx context.Context, in *DeleteApkConfigDictDBReq, opts ...grpc.CallOption) (*DeleteApkConfigDictDBResp, error) {
	out := new(DeleteApkConfigDictDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/DeleteApkConfigDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdManagementClient) SearchApkConfigDict(ctx context.Context, in *SearchApkConfigDictDBReq, opts ...grpc.CallOption) (*SearchApkConfigDictDBResp, error) {
	out := new(SearchApkConfigDictDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/SearchApkConfigDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdManagementClient) SaveApkConfigGroup(ctx context.Context, in *SaveApkConfigGroupDBReq, opts ...grpc.CallOption) (*SaveApkConfigGroupDBResp, error) {
	out := new(SaveApkConfigGroupDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/SaveApkConfigGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdManagementClient) DeleteApkConfigGroup(ctx context.Context, in *DeleteApkConfigGroupDBReq, opts ...grpc.CallOption) (*DeleteApkConfigGroupDBResp, error) {
	out := new(DeleteApkConfigGroupDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/DeleteApkConfigGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdManagementClient) SearchApkConfigGroup(ctx context.Context, in *SearchApkConfigGroupDBReq, opts ...grpc.CallOption) (*SearchApkConfigGroupDBResp, error) {
	out := new(SearchApkConfigGroupDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/SearchApkConfigGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdManagementClient) SyncApkConfigData(ctx context.Context, in *SyncApkConfigDataDBReq, opts ...grpc.CallOption) (*SyncApkConfigDataDBResp, error) {
	out := new(SyncApkConfigDataDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/SyncApkConfigData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdManagementClient) SearchHoldInfo(ctx context.Context, in *SearchHoldInfoDBReq, opts ...grpc.CallOption) (*SearchHoldInfoDBResp, error) {
	out := new(SearchHoldInfoDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/SearchHoldInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdManagementClient) GetHoldTreePath(ctx context.Context, in *GetHoldTreePathDBReq, opts ...grpc.CallOption) (*GetHoldTreePathDBResp, error) {
	out := new(GetHoldTreePathDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/GetHoldTreePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdManagementClient) GetHoldDataRouter(ctx context.Context, in *GetHoldDataRouterReq, opts ...grpc.CallOption) (*GetHoldDataRouterResp, error) {
	out := new(GetHoldDataRouterResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/GetHoldDataRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdManagementClient) SaveHoldDataRouter(ctx context.Context, in *SaveHoldDataRouterReq, opts ...grpc.CallOption) (*SaveHoldDataRouterResp, error) {
	out := new(SaveHoldDataRouterResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/SaveHoldDataRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdManagementClient) UpdateHoldDataRouter(ctx context.Context, in *UpdateHoldDataRouterReq, opts ...grpc.CallOption) (*UpdateHoldDataRouterResp, error) {
	out := new(UpdateHoldDataRouterResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.hold.dap.HoldManagement/UpdateHoldDataRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HoldManagementServer is the server API for HoldManagement service.
type HoldManagementServer interface {
	//获取配置分组表
	GetApkConfigGroupInfo(context.Context, *GetApkConfigGroupInfoDBReq) (*GetApkConfigGroupInfoDBResp, error)
	//获取配置字典表
	GetApkItemConfig(context.Context, *GetApkItemConfigDBReq) (*GetApkItemConfigDBResp, error)
	//设置渠道配置列表
	SaveApkConfigList(context.Context, *SaveApkConfigListDBReq) (*SaveApkConfigListDBResp, error)
	//获取渠道配置列表
	GetApkConfigList(context.Context, *GetApkConfigListDBReq) (*GetApkConfigListDBResp, error)
	//查询渠道配置列表
	SearchApkConfigList(context.Context, *SearchApkConfigListDBReq) (*SearchApkConfigListDBResp, error)
	//删除渠道配置
	DeleteApkConfig(context.Context, *DeleteApkConfigDBReq) (*DeleteApkConfigDBResp, error)
	//保存渠道配置字典数据
	SaveApkConfigDict(context.Context, *SaveApkConfigDictDBReq) (*SaveApkConfigDictDBResp, error)
	//删除渠道配置字典数据
	DeleteApkConfigDict(context.Context, *DeleteApkConfigDictDBReq) (*DeleteApkConfigDictDBResp, error)
	//分页查询渠道配置字典信息
	SearchApkConfigDict(context.Context, *SearchApkConfigDictDBReq) (*SearchApkConfigDictDBResp, error)
	//保存渠道配置分组信息
	SaveApkConfigGroup(context.Context, *SaveApkConfigGroupDBReq) (*SaveApkConfigGroupDBResp, error)
	//删除渠道配置分组数据
	DeleteApkConfigGroup(context.Context, *DeleteApkConfigGroupDBReq) (*DeleteApkConfigGroupDBResp, error)
	//分页查询渠道配置分组信息
	SearchApkConfigGroup(context.Context, *SearchApkConfigGroupDBReq) (*SearchApkConfigGroupDBResp, error)
	//同步APK数据信息
	SyncApkConfigData(context.Context, *SyncApkConfigDataDBReq) (*SyncApkConfigDataDBResp, error)
	//分页查询查询渠道信息列表
	SearchHoldInfo(context.Context, *SearchHoldInfoDBReq) (*SearchHoldInfoDBResp, error)
	//获取渠道目录树
	GetHoldTreePath(context.Context, *GetHoldTreePathDBReq) (*GetHoldTreePathDBResp, error)
	//获取渠道对应分库信息
	GetHoldDataRouter(context.Context, *GetHoldDataRouterReq) (*GetHoldDataRouterResp, error)
	//保存渠道对应分库信息
	SaveHoldDataRouter(context.Context, *SaveHoldDataRouterReq) (*SaveHoldDataRouterResp, error)
	//更新渠道对应分库信息
	UpdateHoldDataRouter(context.Context, *UpdateHoldDataRouterReq) (*UpdateHoldDataRouterResp, error)
}

// UnimplementedHoldManagementServer can be embedded to have forward compatible implementations.
type UnimplementedHoldManagementServer struct {
}

func (*UnimplementedHoldManagementServer) GetApkConfigGroupInfo(ctx context.Context, req *GetApkConfigGroupInfoDBReq) (*GetApkConfigGroupInfoDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApkConfigGroupInfo not implemented")
}
func (*UnimplementedHoldManagementServer) GetApkItemConfig(ctx context.Context, req *GetApkItemConfigDBReq) (*GetApkItemConfigDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApkItemConfig not implemented")
}
func (*UnimplementedHoldManagementServer) SaveApkConfigList(ctx context.Context, req *SaveApkConfigListDBReq) (*SaveApkConfigListDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveApkConfigList not implemented")
}
func (*UnimplementedHoldManagementServer) GetApkConfigList(ctx context.Context, req *GetApkConfigListDBReq) (*GetApkConfigListDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApkConfigList not implemented")
}
func (*UnimplementedHoldManagementServer) SearchApkConfigList(ctx context.Context, req *SearchApkConfigListDBReq) (*SearchApkConfigListDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchApkConfigList not implemented")
}
func (*UnimplementedHoldManagementServer) DeleteApkConfig(ctx context.Context, req *DeleteApkConfigDBReq) (*DeleteApkConfigDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApkConfig not implemented")
}
func (*UnimplementedHoldManagementServer) SaveApkConfigDict(ctx context.Context, req *SaveApkConfigDictDBReq) (*SaveApkConfigDictDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveApkConfigDict not implemented")
}
func (*UnimplementedHoldManagementServer) DeleteApkConfigDict(ctx context.Context, req *DeleteApkConfigDictDBReq) (*DeleteApkConfigDictDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApkConfigDict not implemented")
}
func (*UnimplementedHoldManagementServer) SearchApkConfigDict(ctx context.Context, req *SearchApkConfigDictDBReq) (*SearchApkConfigDictDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchApkConfigDict not implemented")
}
func (*UnimplementedHoldManagementServer) SaveApkConfigGroup(ctx context.Context, req *SaveApkConfigGroupDBReq) (*SaveApkConfigGroupDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveApkConfigGroup not implemented")
}
func (*UnimplementedHoldManagementServer) DeleteApkConfigGroup(ctx context.Context, req *DeleteApkConfigGroupDBReq) (*DeleteApkConfigGroupDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApkConfigGroup not implemented")
}
func (*UnimplementedHoldManagementServer) SearchApkConfigGroup(ctx context.Context, req *SearchApkConfigGroupDBReq) (*SearchApkConfigGroupDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchApkConfigGroup not implemented")
}
func (*UnimplementedHoldManagementServer) SyncApkConfigData(ctx context.Context, req *SyncApkConfigDataDBReq) (*SyncApkConfigDataDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncApkConfigData not implemented")
}
func (*UnimplementedHoldManagementServer) SearchHoldInfo(ctx context.Context, req *SearchHoldInfoDBReq) (*SearchHoldInfoDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchHoldInfo not implemented")
}
func (*UnimplementedHoldManagementServer) GetHoldTreePath(ctx context.Context, req *GetHoldTreePathDBReq) (*GetHoldTreePathDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHoldTreePath not implemented")
}
func (*UnimplementedHoldManagementServer) GetHoldDataRouter(ctx context.Context, req *GetHoldDataRouterReq) (*GetHoldDataRouterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHoldDataRouter not implemented")
}
func (*UnimplementedHoldManagementServer) SaveHoldDataRouter(ctx context.Context, req *SaveHoldDataRouterReq) (*SaveHoldDataRouterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveHoldDataRouter not implemented")
}
func (*UnimplementedHoldManagementServer) UpdateHoldDataRouter(ctx context.Context, req *UpdateHoldDataRouterReq) (*UpdateHoldDataRouterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHoldDataRouter not implemented")
}

func RegisterHoldManagementServer(s *grpc.Server, srv HoldManagementServer) {
	s.RegisterService(&_HoldManagement_serviceDesc, srv)
}

func _HoldManagement_GetApkConfigGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApkConfigGroupInfoDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).GetApkConfigGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/GetApkConfigGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).GetApkConfigGroupInfo(ctx, req.(*GetApkConfigGroupInfoDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldManagement_GetApkItemConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApkItemConfigDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).GetApkItemConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/GetApkItemConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).GetApkItemConfig(ctx, req.(*GetApkItemConfigDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldManagement_SaveApkConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveApkConfigListDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).SaveApkConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/SaveApkConfigList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).SaveApkConfigList(ctx, req.(*SaveApkConfigListDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldManagement_GetApkConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApkConfigListDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).GetApkConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/GetApkConfigList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).GetApkConfigList(ctx, req.(*GetApkConfigListDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldManagement_SearchApkConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchApkConfigListDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).SearchApkConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/SearchApkConfigList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).SearchApkConfigList(ctx, req.(*SearchApkConfigListDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldManagement_DeleteApkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApkConfigDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).DeleteApkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/DeleteApkConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).DeleteApkConfig(ctx, req.(*DeleteApkConfigDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldManagement_SaveApkConfigDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveApkConfigDictDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).SaveApkConfigDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/SaveApkConfigDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).SaveApkConfigDict(ctx, req.(*SaveApkConfigDictDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldManagement_DeleteApkConfigDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApkConfigDictDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).DeleteApkConfigDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/DeleteApkConfigDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).DeleteApkConfigDict(ctx, req.(*DeleteApkConfigDictDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldManagement_SearchApkConfigDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchApkConfigDictDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).SearchApkConfigDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/SearchApkConfigDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).SearchApkConfigDict(ctx, req.(*SearchApkConfigDictDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldManagement_SaveApkConfigGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveApkConfigGroupDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).SaveApkConfigGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/SaveApkConfigGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).SaveApkConfigGroup(ctx, req.(*SaveApkConfigGroupDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldManagement_DeleteApkConfigGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApkConfigGroupDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).DeleteApkConfigGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/DeleteApkConfigGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).DeleteApkConfigGroup(ctx, req.(*DeleteApkConfigGroupDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldManagement_SearchApkConfigGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchApkConfigGroupDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).SearchApkConfigGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/SearchApkConfigGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).SearchApkConfigGroup(ctx, req.(*SearchApkConfigGroupDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldManagement_SyncApkConfigData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncApkConfigDataDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).SyncApkConfigData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/SyncApkConfigData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).SyncApkConfigData(ctx, req.(*SyncApkConfigDataDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldManagement_SearchHoldInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchHoldInfoDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).SearchHoldInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/SearchHoldInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).SearchHoldInfo(ctx, req.(*SearchHoldInfoDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldManagement_GetHoldTreePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHoldTreePathDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).GetHoldTreePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/GetHoldTreePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).GetHoldTreePath(ctx, req.(*GetHoldTreePathDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldManagement_GetHoldDataRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHoldDataRouterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).GetHoldDataRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/GetHoldDataRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).GetHoldDataRouter(ctx, req.(*GetHoldDataRouterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldManagement_SaveHoldDataRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveHoldDataRouterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).SaveHoldDataRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/SaveHoldDataRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).SaveHoldDataRouter(ctx, req.(*SaveHoldDataRouterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldManagement_UpdateHoldDataRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHoldDataRouterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldManagementServer).UpdateHoldDataRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.hold.dap.HoldManagement/UpdateHoldDataRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldManagementServer).UpdateHoldDataRouter(ctx, req.(*UpdateHoldDataRouterReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HoldManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mapgoo.paas.hold.dap.HoldManagement",
	HandlerType: (*HoldManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApkConfigGroupInfo",
			Handler:    _HoldManagement_GetApkConfigGroupInfo_Handler,
		},
		{
			MethodName: "GetApkItemConfig",
			Handler:    _HoldManagement_GetApkItemConfig_Handler,
		},
		{
			MethodName: "SaveApkConfigList",
			Handler:    _HoldManagement_SaveApkConfigList_Handler,
		},
		{
			MethodName: "GetApkConfigList",
			Handler:    _HoldManagement_GetApkConfigList_Handler,
		},
		{
			MethodName: "SearchApkConfigList",
			Handler:    _HoldManagement_SearchApkConfigList_Handler,
		},
		{
			MethodName: "DeleteApkConfig",
			Handler:    _HoldManagement_DeleteApkConfig_Handler,
		},
		{
			MethodName: "SaveApkConfigDict",
			Handler:    _HoldManagement_SaveApkConfigDict_Handler,
		},
		{
			MethodName: "DeleteApkConfigDict",
			Handler:    _HoldManagement_DeleteApkConfigDict_Handler,
		},
		{
			MethodName: "SearchApkConfigDict",
			Handler:    _HoldManagement_SearchApkConfigDict_Handler,
		},
		{
			MethodName: "SaveApkConfigGroup",
			Handler:    _HoldManagement_SaveApkConfigGroup_Handler,
		},
		{
			MethodName: "DeleteApkConfigGroup",
			Handler:    _HoldManagement_DeleteApkConfigGroup_Handler,
		},
		{
			MethodName: "SearchApkConfigGroup",
			Handler:    _HoldManagement_SearchApkConfigGroup_Handler,
		},
		{
			MethodName: "SyncApkConfigData",
			Handler:    _HoldManagement_SyncApkConfigData_Handler,
		},
		{
			MethodName: "SearchHoldInfo",
			Handler:    _HoldManagement_SearchHoldInfo_Handler,
		},
		{
			MethodName: "GetHoldTreePath",
			Handler:    _HoldManagement_GetHoldTreePath_Handler,
		},
		{
			MethodName: "GetHoldDataRouter",
			Handler:    _HoldManagement_GetHoldDataRouter_Handler,
		},
		{
			MethodName: "SaveHoldDataRouter",
			Handler:    _HoldManagement_SaveHoldDataRouter_Handler,
		},
		{
			MethodName: "UpdateHoldDataRouter",
			Handler:    _HoldManagement_UpdateHoldDataRouter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapgoo.paas.dap.hold.proto",
}

func (m *GetHoldDataRouterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHoldDataRouterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHoldDataRouterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintMapgooPaasDapHold(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.HoldId != 0 {
		i = encodeVarintMapgooPaasDapHold(dAtA, i, uint64(m.HoldId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetHoldDataRouterResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHoldDataRouterResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHoldDataRouterResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RouterList) > 0 {
		for iNdEx := len(m.RouterList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RouterList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMapgooPaasDapHold(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapHold(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveHoldDataRouterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveHoldDataRouterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveHoldDataRouterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Router != nil {
		{
			size, err := m.Router.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapHold(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveHoldDataRouterResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveHoldDataRouterResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveHoldDataRouterResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapHold(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateHoldDataRouterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateHoldDataRouterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateHoldDataRouterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintMapgooPaasDapHold(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.IsDeleted != 0 {
		i = encodeVarintMapgooPaasDapHold(dAtA, i, uint64(m.IsDeleted))
		i--
		dAtA[i] = 0x10
	}
	if m.HoldId != 0 {
		i = encodeVarintMapgooPaasDapHold(dAtA, i, uint64(m.HoldId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateHoldDataRouterResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateHoldDataRouterResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateHoldDataRouterResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapHold(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMapgooPaasDapHold(dAtA []byte, offset int, v uint64) int {
	offset -= sovMapgooPaasDapHold(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetHoldDataRouterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HoldId != 0 {
		n += 1 + sovMapgooPaasDapHold(uint64(m.HoldId))
	}
	if m.Status != 0 {
		n += 1 + sovMapgooPaasDapHold(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetHoldDataRouterResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDapHold(uint64(l))
	}
	if len(m.RouterList) > 0 {
		for _, e := range m.RouterList {
			l = e.Size()
			n += 1 + l + sovMapgooPaasDapHold(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveHoldDataRouterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Router != nil {
		l = m.Router.Size()
		n += 1 + l + sovMapgooPaasDapHold(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveHoldDataRouterResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDapHold(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateHoldDataRouterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HoldId != 0 {
		n += 1 + sovMapgooPaasDapHold(uint64(m.HoldId))
	}
	if m.IsDeleted != 0 {
		n += 1 + sovMapgooPaasDapHold(uint64(m.IsDeleted))
	}
	if m.Status != 0 {
		n += 1 + sovMapgooPaasDapHold(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateHoldDataRouterResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDapHold(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMapgooPaasDapHold(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMapgooPaasDapHold(x uint64) (n int) {
	return sovMapgooPaasDapHold(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetHoldDataRouterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapHold
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHoldDataRouterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHoldDataRouterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldId", wireType)
			}
			m.HoldId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapHold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapHold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapHold(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHoldDataRouterResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapHold
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHoldDataRouterResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHoldDataRouterResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapHold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapHold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterList = append(m.RouterList, &HoldDataRouter{})
			if err := m.RouterList[len(m.RouterList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapHold(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveHoldDataRouterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapHold
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveHoldDataRouterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveHoldDataRouterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Router", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapHold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Router == nil {
				m.Router = &HoldDataRouter{}
			}
			if err := m.Router.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapHold(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveHoldDataRouterResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapHold
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveHoldDataRouterResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveHoldDataRouterResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapHold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapHold(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateHoldDataRouterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapHold
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateHoldDataRouterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateHoldDataRouterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldId", wireType)
			}
			m.HoldId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapHold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			m.IsDeleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapHold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDeleted |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapHold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapHold(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateHoldDataRouterResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapHold
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateHoldDataRouterResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateHoldDataRouterResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapHold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapHold(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapHold
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMapgooPaasDapHold(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMapgooPaasDapHold
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapgooPaasDapHold
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapgooPaasDapHold
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMapgooPaasDapHold
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMapgooPaasDapHold
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMapgooPaasDapHold
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMapgooPaasDapHold        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMapgooPaasDapHold          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMapgooPaasDapHold = fmt.Errorf("proto: unexpected end of group")
)

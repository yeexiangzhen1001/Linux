// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mapgoo.paas.travel.data.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//轨迹
type TrackInfoSimple struct {
	//里程
	Mileage uint64 `protobuf:"varint,1,opt,name=mileage,proto3" json:"mileage,omitempty"`
	//速度，仅GPS定位时有效，其它情况为0xFFFFFFFF	单位km/h
	Speed uint32 `protobuf:"varint,2,opt,name=speed,proto3" json:"speed,omitempty"`
	//方向，仅GPS定位时有效，其它情况为0xFFFFFFFF，单位：度
	Direction uint32 `protobuf:"varint,3,opt,name=direction,proto3" json:"direction,omitempty"`
	//纬度
	Lat int32 `protobuf:"varint,4,opt,name=lat,proto3" json:"lat,omitempty"`
	//经度
	Lng int32 `protobuf:"varint,5,opt,name=lng,proto3" json:"lng,omitempty"`
	//接收时间
	RecvTime uint64 `protobuf:"varint,6,opt,name=recv_time,json=recvTime,proto3" json:"recv_time,omitempty"`
	//定位时间
	GpsTime              uint64   `protobuf:"varint,7,opt,name=gps_time,json=gpsTime,proto3" json:"gps_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackInfoSimple) Reset()         { *m = TrackInfoSimple{} }
func (m *TrackInfoSimple) String() string { return proto.CompactTextString(m) }
func (*TrackInfoSimple) ProtoMessage()    {}
func (*TrackInfoSimple) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcf8523a103c6556, []int{0}
}
func (m *TrackInfoSimple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackInfoSimple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackInfoSimple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrackInfoSimple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackInfoSimple.Merge(m, src)
}
func (m *TrackInfoSimple) XXX_Size() int {
	return m.Size()
}
func (m *TrackInfoSimple) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackInfoSimple.DiscardUnknown(m)
}

var xxx_messageInfo_TrackInfoSimple proto.InternalMessageInfo

func (m *TrackInfoSimple) GetMileage() uint64 {
	if m != nil {
		return m.Mileage
	}
	return 0
}

func (m *TrackInfoSimple) GetSpeed() uint32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *TrackInfoSimple) GetDirection() uint32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *TrackInfoSimple) GetLat() int32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *TrackInfoSimple) GetLng() int32 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *TrackInfoSimple) GetRecvTime() uint64 {
	if m != nil {
		return m.RecvTime
	}
	return 0
}

func (m *TrackInfoSimple) GetGpsTime() uint64 {
	if m != nil {
		return m.GpsTime
	}
	return 0
}

//行程信息
type TravelInfo struct {
	//设备id
	ObjectId uint32 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	//行程id
	TravelId uint64 `protobuf:"varint,2,opt,name=travel_id,json=travelId,proto3" json:"travel_id,omitempty"`
	//行程标志 0：熄火 1：启动
	IsCompleted bool `protobuf:"varint,3,opt,name=is_completed,json=isCompleted,proto3" json:"is_completed,omitempty"`
	//行程里程
	TravelMileage uint64 `protobuf:"varint,4,opt,name=travel_mileage,json=travelMileage,proto3" json:"travel_mileage,omitempty"`
	//行程油耗
	TravelOil uint64 `protobuf:"varint,5,opt,name=travel_oil,json=travelOil,proto3" json:"travel_oil,omitempty"`
	//行程时长
	TravelPeriod uint32 `protobuf:"varint,6,opt,name=travel_period,json=travelPeriod,proto3" json:"travel_period,omitempty"`
	//驾驶时长
	DrivePeriod uint32 `protobuf:"varint,7,opt,name=drive_period,json=drivePeriod,proto3" json:"drive_period,omitempty"`
	//超速次数
	OverSpeedCount uint32 `protobuf:"varint,8,opt,name=over_speed_count,json=overSpeedCount,proto3" json:"over_speed_count,omitempty"`
	//急加速次数
	CelerateCount uint32 `protobuf:"varint,9,opt,name=celerate_count,json=celerateCount,proto3" json:"celerate_count,omitempty"`
	//急减速次数
	DecelerateCount uint32 `protobuf:"varint,10,opt,name=decelerate_count,json=decelerateCount,proto3" json:"decelerate_count,omitempty"`
	//停车未熄火次数
	StopAcconCount uint32 `protobuf:"varint,11,opt,name=stop_accon_count,json=stopAcconCount,proto3" json:"stop_accon_count,omitempty"`
	//
	StartPosDesc string `protobuf:"bytes,12,opt,name=start_pos_desc,json=startPosDesc,proto3" json:"start_pos_desc,omitempty"`
	//
	StopPosDesc string `protobuf:"bytes,13,opt,name=stop_pos_desc,json=stopPosDesc,proto3" json:"stop_pos_desc,omitempty"`
	//
	StartEventId uint64 `protobuf:"varint,14,opt,name=start_event_id,json=startEventId,proto3" json:"start_event_id,omitempty"`
	//
	StopEventId uint64 `protobuf:"varint,15,opt,name=stop_event_id,json=stopEventId,proto3" json:"stop_event_id,omitempty"`
	//
	StayId uint64 `protobuf:"varint,16,opt,name=stay_id,json=stayId,proto3" json:"stay_id,omitempty"`
	//备注
	Remark string `protobuf:"bytes,17,opt,name=remark,proto3" json:"remark,omitempty"`
	//平均速度
	AvgSpeed uint32 `protobuf:"varint,18,opt,name=avg_speed,json=avgSpeed,proto3" json:"avg_speed,omitempty"`
	//最大速度
	MaxSpeed uint32 `protobuf:"varint,19,opt,name=max_speed,json=maxSpeed,proto3" json:"max_speed,omitempty"`
	//
	PosCount uint32 `protobuf:"varint,20,opt,name=pos_count,json=posCount,proto3" json:"pos_count,omitempty"`
	//
	TotalSpeed uint32 `protobuf:"varint,21,opt,name=total_speed,json=totalSpeed,proto3" json:"total_speed,omitempty"`
	//故障个数
	BdCount uint32 `protobuf:"varint,22,opt,name=bd_count,json=bdCount,proto3" json:"bd_count,omitempty"`
	//故障码
	BdCode string `protobuf:"bytes,23,opt,name=bd_code,json=bdCode,proto3" json:"bd_code,omitempty"`
	//
	SeqFaultCode []string `protobuf:"bytes,24,rep,name=seq_fault_code,json=seqFaultCode,proto3" json:"seq_fault_code,omitempty"`
	//行程启动信息
	StartPos *TrackInfoSimple `protobuf:"bytes,25,opt,name=start_pos,json=startPos,proto3" json:"start_pos,omitempty"`
	//行程停止信息
	StopPos *TrackInfoSimple `protobuf:"bytes,26,opt,name=stop_pos,json=stopPos,proto3" json:"stop_pos,omitempty"`
	//驾驶分
	DriveScore           uint32   `protobuf:"varint,27,opt,name=drive_score,json=driveScore,proto3" json:"drive_score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TravelInfo) Reset()         { *m = TravelInfo{} }
func (m *TravelInfo) String() string { return proto.CompactTextString(m) }
func (*TravelInfo) ProtoMessage()    {}
func (*TravelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcf8523a103c6556, []int{1}
}
func (m *TravelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TravelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TravelInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TravelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TravelInfo.Merge(m, src)
}
func (m *TravelInfo) XXX_Size() int {
	return m.Size()
}
func (m *TravelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TravelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TravelInfo proto.InternalMessageInfo

func (m *TravelInfo) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *TravelInfo) GetTravelId() uint64 {
	if m != nil {
		return m.TravelId
	}
	return 0
}

func (m *TravelInfo) GetIsCompleted() bool {
	if m != nil {
		return m.IsCompleted
	}
	return false
}

func (m *TravelInfo) GetTravelMileage() uint64 {
	if m != nil {
		return m.TravelMileage
	}
	return 0
}

func (m *TravelInfo) GetTravelOil() uint64 {
	if m != nil {
		return m.TravelOil
	}
	return 0
}

func (m *TravelInfo) GetTravelPeriod() uint32 {
	if m != nil {
		return m.TravelPeriod
	}
	return 0
}

func (m *TravelInfo) GetDrivePeriod() uint32 {
	if m != nil {
		return m.DrivePeriod
	}
	return 0
}

func (m *TravelInfo) GetOverSpeedCount() uint32 {
	if m != nil {
		return m.OverSpeedCount
	}
	return 0
}

func (m *TravelInfo) GetCelerateCount() uint32 {
	if m != nil {
		return m.CelerateCount
	}
	return 0
}

func (m *TravelInfo) GetDecelerateCount() uint32 {
	if m != nil {
		return m.DecelerateCount
	}
	return 0
}

func (m *TravelInfo) GetStopAcconCount() uint32 {
	if m != nil {
		return m.StopAcconCount
	}
	return 0
}

func (m *TravelInfo) GetStartPosDesc() string {
	if m != nil {
		return m.StartPosDesc
	}
	return ""
}

func (m *TravelInfo) GetStopPosDesc() string {
	if m != nil {
		return m.StopPosDesc
	}
	return ""
}

func (m *TravelInfo) GetStartEventId() uint64 {
	if m != nil {
		return m.StartEventId
	}
	return 0
}

func (m *TravelInfo) GetStopEventId() uint64 {
	if m != nil {
		return m.StopEventId
	}
	return 0
}

func (m *TravelInfo) GetStayId() uint64 {
	if m != nil {
		return m.StayId
	}
	return 0
}

func (m *TravelInfo) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *TravelInfo) GetAvgSpeed() uint32 {
	if m != nil {
		return m.AvgSpeed
	}
	return 0
}

func (m *TravelInfo) GetMaxSpeed() uint32 {
	if m != nil {
		return m.MaxSpeed
	}
	return 0
}

func (m *TravelInfo) GetPosCount() uint32 {
	if m != nil {
		return m.PosCount
	}
	return 0
}

func (m *TravelInfo) GetTotalSpeed() uint32 {
	if m != nil {
		return m.TotalSpeed
	}
	return 0
}

func (m *TravelInfo) GetBdCount() uint32 {
	if m != nil {
		return m.BdCount
	}
	return 0
}

func (m *TravelInfo) GetBdCode() string {
	if m != nil {
		return m.BdCode
	}
	return ""
}

func (m *TravelInfo) GetSeqFaultCode() []string {
	if m != nil {
		return m.SeqFaultCode
	}
	return nil
}

func (m *TravelInfo) GetStartPos() *TrackInfoSimple {
	if m != nil {
		return m.StartPos
	}
	return nil
}

func (m *TravelInfo) GetStopPos() *TrackInfoSimple {
	if m != nil {
		return m.StopPos
	}
	return nil
}

func (m *TravelInfo) GetDriveScore() uint32 {
	if m != nil {
		return m.DriveScore
	}
	return 0
}

//获取历史行程
type GetHisTravelReq struct {
	//设备id和imei
	DeviceId *DeviceId `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	//开始时间
	StartTime string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	//结束时间
	EndTime string `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	//行数限制
	Limit                uint32        `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	PageInfo             *PageBaseInfo `protobuf:"bytes,5,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetHisTravelReq) Reset()         { *m = GetHisTravelReq{} }
func (m *GetHisTravelReq) String() string { return proto.CompactTextString(m) }
func (*GetHisTravelReq) ProtoMessage()    {}
func (*GetHisTravelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcf8523a103c6556, []int{2}
}
func (m *GetHisTravelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHisTravelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHisTravelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHisTravelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHisTravelReq.Merge(m, src)
}
func (m *GetHisTravelReq) XXX_Size() int {
	return m.Size()
}
func (m *GetHisTravelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHisTravelReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetHisTravelReq proto.InternalMessageInfo

func (m *GetHisTravelReq) GetDeviceId() *DeviceId {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *GetHisTravelReq) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *GetHisTravelReq) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *GetHisTravelReq) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetHisTravelReq) GetPageInfo() *PageBaseInfo {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

type GetHisTravelResp struct {
	//返回信息
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	//行程信息
	TravelList           []*TravelInfo `protobuf:"bytes,2,rep,name=travel_list,json=travelList,proto3" json:"travel_list,omitempty"`
	PageInfo             *PageBaseInfo `protobuf:"bytes,3,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetHisTravelResp) Reset()         { *m = GetHisTravelResp{} }
func (m *GetHisTravelResp) String() string { return proto.CompactTextString(m) }
func (*GetHisTravelResp) ProtoMessage()    {}
func (*GetHisTravelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcf8523a103c6556, []int{3}
}
func (m *GetHisTravelResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHisTravelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHisTravelResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHisTravelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHisTravelResp.Merge(m, src)
}
func (m *GetHisTravelResp) XXX_Size() int {
	return m.Size()
}
func (m *GetHisTravelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHisTravelResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetHisTravelResp proto.InternalMessageInfo

func (m *GetHisTravelResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetHisTravelResp) GetTravelList() []*TravelInfo {
	if m != nil {
		return m.TravelList
	}
	return nil
}

func (m *GetHisTravelResp) GetPageInfo() *PageBaseInfo {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

//获取行程统计信息
type GetStatisticsTravelReq struct {
	//设备id和imei
	DeviceId *DeviceId `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	//开始时间
	BeginTime string `protobuf:"bytes,2,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	//结束时间
	EndTime string `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	//其它sql条件
	SqlCondition         []string `protobuf:"bytes,4,rep,name=sql_condition,json=sqlCondition,proto3" json:"sql_condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStatisticsTravelReq) Reset()         { *m = GetStatisticsTravelReq{} }
func (m *GetStatisticsTravelReq) String() string { return proto.CompactTextString(m) }
func (*GetStatisticsTravelReq) ProtoMessage()    {}
func (*GetStatisticsTravelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcf8523a103c6556, []int{4}
}
func (m *GetStatisticsTravelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatisticsTravelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatisticsTravelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatisticsTravelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatisticsTravelReq.Merge(m, src)
}
func (m *GetStatisticsTravelReq) XXX_Size() int {
	return m.Size()
}
func (m *GetStatisticsTravelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatisticsTravelReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatisticsTravelReq proto.InternalMessageInfo

func (m *GetStatisticsTravelReq) GetDeviceId() *DeviceId {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *GetStatisticsTravelReq) GetBeginTime() string {
	if m != nil {
		return m.BeginTime
	}
	return ""
}

func (m *GetStatisticsTravelReq) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *GetStatisticsTravelReq) GetSqlCondition() []string {
	if m != nil {
		return m.SqlCondition
	}
	return nil
}

type GetStatisticsTravelResp struct {
	//返回信息
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	//总油耗
	SumTravelOil uint64 `protobuf:"varint,2,opt,name=sum_travel_oil,json=sumTravelOil,proto3" json:"sum_travel_oil,omitempty"`
	//总里程
	SumTravelMileage uint64 `protobuf:"varint,3,opt,name=sum_travel_mileage,json=sumTravelMileage,proto3" json:"sum_travel_mileage,omitempty"`
	//
	SumScore uint32 `protobuf:"varint,4,opt,name=sum_score,json=sumScore,proto3" json:"sum_score,omitempty"`
	//总数量
	Count                uint32   `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStatisticsTravelResp) Reset()         { *m = GetStatisticsTravelResp{} }
func (m *GetStatisticsTravelResp) String() string { return proto.CompactTextString(m) }
func (*GetStatisticsTravelResp) ProtoMessage()    {}
func (*GetStatisticsTravelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcf8523a103c6556, []int{5}
}
func (m *GetStatisticsTravelResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatisticsTravelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatisticsTravelResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatisticsTravelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatisticsTravelResp.Merge(m, src)
}
func (m *GetStatisticsTravelResp) XXX_Size() int {
	return m.Size()
}
func (m *GetStatisticsTravelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatisticsTravelResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatisticsTravelResp proto.InternalMessageInfo

func (m *GetStatisticsTravelResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetStatisticsTravelResp) GetSumTravelOil() uint64 {
	if m != nil {
		return m.SumTravelOil
	}
	return 0
}

func (m *GetStatisticsTravelResp) GetSumTravelMileage() uint64 {
	if m != nil {
		return m.SumTravelMileage
	}
	return 0
}

func (m *GetStatisticsTravelResp) GetSumScore() uint32 {
	if m != nil {
		return m.SumScore
	}
	return 0
}

func (m *GetStatisticsTravelResp) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

//行程信息
type TravelDbInfo struct {
	//行程id，雪花算法生成
	RecId uint64 `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3" json:"rec_id,omitempty"`
	//设备id
	ObjectId uint32 `protobuf:"varint,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	//行程开始时间(gps定位时间）
	StartTime uint64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	//行程开始经度
	StartLon int32 `protobuf:"zigzag32,4,opt,name=start_lon,json=startLon,proto3" json:"start_lon,omitempty"`
	//行程开始纬度
	StartLat int32 `protobuf:"zigzag32,5,opt,name=start_lat,json=startLat,proto3" json:"start_lat,omitempty"`
	//行程开始位置地址描述
	StartPos string `protobuf:"bytes,6,opt,name=start_pos,json=startPos,proto3" json:"start_pos,omitempty"`
	//行程结束时间（gps定位时间）
	StopTime uint64 `protobuf:"varint,7,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
	//行程结束经度
	StopLon int32 `protobuf:"zigzag32,8,opt,name=stop_lon,json=stopLon,proto3" json:"stop_lon,omitempty"`
	//行程结束纬度
	StopLat int32 `protobuf:"zigzag32,9,opt,name=stop_lat,json=stopLat,proto3" json:"stop_lat,omitempty"`
	//行程结束位置地址描述
	StopPos string `protobuf:"bytes,10,opt,name=stop_pos,json=stopPos,proto3" json:"stop_pos,omitempty"`
	//obd故障码个数
	BdCount uint32 `protobuf:"varint,11,opt,name=bd_count,json=bdCount,proto3" json:"bd_count,omitempty"`
	//obd故障码（多个故障码以逗号隔开）
	BdCode string `protobuf:"bytes,12,opt,name=bd_code,json=bdCode,proto3" json:"bd_code,omitempty"`
	//行程里程
	TravelMileage uint32 `protobuf:"varint,13,opt,name=travel_mileage,json=travelMileage,proto3" json:"travel_mileage,omitempty"`
	//行程百公里油耗
	TravelOil uint32 `protobuf:"varint,14,opt,name=travel_oil,json=travelOil,proto3" json:"travel_oil,omitempty"`
	//超速次数
	OverSpeedCount uint32 `protobuf:"varint,15,opt,name=over_speed_count,json=overSpeedCount,proto3" json:"over_speed_count,omitempty"`
	//急加速次数
	CelerateCount uint32 `protobuf:"varint,16,opt,name=celerate_count,json=celerateCount,proto3" json:"celerate_count,omitempty"`
	//急减速次数
	DecelerateCount uint32 `protobuf:"varint,17,opt,name=decelerate_count,json=decelerateCount,proto3" json:"decelerate_count,omitempty"`
	//行程时长
	TravelPeriod uint32 `protobuf:"varint,18,opt,name=travel_period,json=travelPeriod,proto3" json:"travel_period,omitempty"`
	//驾驶时长
	DrivePeriod uint32 `protobuf:"varint,19,opt,name=drive_period,json=drivePeriod,proto3" json:"drive_period,omitempty"`
	//停车未熄火次数
	StopAccOnCount uint32 `protobuf:"varint,20,opt,name=stop_acc_on_count,json=stopAccOnCount,proto3" json:"stop_acc_on_count,omitempty"`
	//备注（行程启动类型->行程熄火类型）
	Remark string `protobuf:"bytes,21,opt,name=remark,proto3" json:"remark,omitempty"`
	//是否有效，0-有效，1-无效
	Enabled uint32 `protobuf:"varint,22,opt,name=enabled,proto3" json:"enabled,omitempty"`
	//地址是否解析，-1未解析，0-已解析
	LocationFlag uint32 `protobuf:"varint,23,opt,name=location_flag,json=locationFlag,proto3" json:"location_flag,omitempty"`
	//行程开始时总里程
	StartMileage uint32 `protobuf:"varint,24,opt,name=start_mileage,json=startMileage,proto3" json:"start_mileage,omitempty"`
	//行程启动事件id
	StartEventId uint64 `protobuf:"varint,25,opt,name=start_event_id,json=startEventId,proto3" json:"start_event_id,omitempty"`
	//行程熄火事件id
	StopEventId uint64 `protobuf:"varint,26,opt,name=stop_event_id,json=stopEventId,proto3" json:"stop_event_id,omitempty"`
	//停留记录id
	StayId uint64 `protobuf:"varint,27,opt,name=stay_id,json=stayId,proto3" json:"stay_id,omitempty"`
	//记录掺入时间
	TheDay uint64 `protobuf:"varint,28,opt,name=the_day,json=theDay,proto3" json:"the_day,omitempty"`
	//行程评分
	Score uint32 `protobuf:"varint,29,opt,name=score,proto3" json:"score,omitempty"`
	//行程平均速度
	AvgSpeed uint32 `protobuf:"varint,30,opt,name=avg_speed,json=avgSpeed,proto3" json:"avg_speed,omitempty"`
	//行程最大速度
	MaxSpeed uint32 `protobuf:"varint,31,opt,name=max_speed,json=maxSpeed,proto3" json:"max_speed,omitempty"`
	//行程位置点个数
	PosCount uint32 `protobuf:"varint,32,opt,name=pos_count,json=posCount,proto3" json:"pos_count,omitempty"`
	//急转弯次数
	SharpTurnCount uint32 `protobuf:"varint,33,opt,name=sharp_turn_count,json=sharpTurnCount,proto3" json:"sharp_turn_count,omitempty"`
	//是否隐藏
	IsHide               uint32   `protobuf:"varint,34,opt,name=is_hide,json=isHide,proto3" json:"is_hide,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TravelDbInfo) Reset()         { *m = TravelDbInfo{} }
func (m *TravelDbInfo) String() string { return proto.CompactTextString(m) }
func (*TravelDbInfo) ProtoMessage()    {}
func (*TravelDbInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcf8523a103c6556, []int{6}
}
func (m *TravelDbInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TravelDbInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TravelDbInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TravelDbInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TravelDbInfo.Merge(m, src)
}
func (m *TravelDbInfo) XXX_Size() int {
	return m.Size()
}
func (m *TravelDbInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TravelDbInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TravelDbInfo proto.InternalMessageInfo

func (m *TravelDbInfo) GetRecId() uint64 {
	if m != nil {
		return m.RecId
	}
	return 0
}

func (m *TravelDbInfo) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *TravelDbInfo) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *TravelDbInfo) GetStartLon() int32 {
	if m != nil {
		return m.StartLon
	}
	return 0
}

func (m *TravelDbInfo) GetStartLat() int32 {
	if m != nil {
		return m.StartLat
	}
	return 0
}

func (m *TravelDbInfo) GetStartPos() string {
	if m != nil {
		return m.StartPos
	}
	return ""
}

func (m *TravelDbInfo) GetStopTime() uint64 {
	if m != nil {
		return m.StopTime
	}
	return 0
}

func (m *TravelDbInfo) GetStopLon() int32 {
	if m != nil {
		return m.StopLon
	}
	return 0
}

func (m *TravelDbInfo) GetStopLat() int32 {
	if m != nil {
		return m.StopLat
	}
	return 0
}

func (m *TravelDbInfo) GetStopPos() string {
	if m != nil {
		return m.StopPos
	}
	return ""
}

func (m *TravelDbInfo) GetBdCount() uint32 {
	if m != nil {
		return m.BdCount
	}
	return 0
}

func (m *TravelDbInfo) GetBdCode() string {
	if m != nil {
		return m.BdCode
	}
	return ""
}

func (m *TravelDbInfo) GetTravelMileage() uint32 {
	if m != nil {
		return m.TravelMileage
	}
	return 0
}

func (m *TravelDbInfo) GetTravelOil() uint32 {
	if m != nil {
		return m.TravelOil
	}
	return 0
}

func (m *TravelDbInfo) GetOverSpeedCount() uint32 {
	if m != nil {
		return m.OverSpeedCount
	}
	return 0
}

func (m *TravelDbInfo) GetCelerateCount() uint32 {
	if m != nil {
		return m.CelerateCount
	}
	return 0
}

func (m *TravelDbInfo) GetDecelerateCount() uint32 {
	if m != nil {
		return m.DecelerateCount
	}
	return 0
}

func (m *TravelDbInfo) GetTravelPeriod() uint32 {
	if m != nil {
		return m.TravelPeriod
	}
	return 0
}

func (m *TravelDbInfo) GetDrivePeriod() uint32 {
	if m != nil {
		return m.DrivePeriod
	}
	return 0
}

func (m *TravelDbInfo) GetStopAccOnCount() uint32 {
	if m != nil {
		return m.StopAccOnCount
	}
	return 0
}

func (m *TravelDbInfo) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *TravelDbInfo) GetEnabled() uint32 {
	if m != nil {
		return m.Enabled
	}
	return 0
}

func (m *TravelDbInfo) GetLocationFlag() uint32 {
	if m != nil {
		return m.LocationFlag
	}
	return 0
}

func (m *TravelDbInfo) GetStartMileage() uint32 {
	if m != nil {
		return m.StartMileage
	}
	return 0
}

func (m *TravelDbInfo) GetStartEventId() uint64 {
	if m != nil {
		return m.StartEventId
	}
	return 0
}

func (m *TravelDbInfo) GetStopEventId() uint64 {
	if m != nil {
		return m.StopEventId
	}
	return 0
}

func (m *TravelDbInfo) GetStayId() uint64 {
	if m != nil {
		return m.StayId
	}
	return 0
}

func (m *TravelDbInfo) GetTheDay() uint64 {
	if m != nil {
		return m.TheDay
	}
	return 0
}

func (m *TravelDbInfo) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *TravelDbInfo) GetAvgSpeed() uint32 {
	if m != nil {
		return m.AvgSpeed
	}
	return 0
}

func (m *TravelDbInfo) GetMaxSpeed() uint32 {
	if m != nil {
		return m.MaxSpeed
	}
	return 0
}

func (m *TravelDbInfo) GetPosCount() uint32 {
	if m != nil {
		return m.PosCount
	}
	return 0
}

func (m *TravelDbInfo) GetSharpTurnCount() uint32 {
	if m != nil {
		return m.SharpTurnCount
	}
	return 0
}

func (m *TravelDbInfo) GetIsHide() uint32 {
	if m != nil {
		return m.IsHide
	}
	return 0
}

//行程事件信息
type TravelEventDbInfo struct {
	//行程事件id，雪花算法生成，递增唯一
	RecId uint64 `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3" json:"rec_id,omitempty"`
	//设备id
	ObjectId uint32 `protobuf:"varint,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	//事件类型id，1-acc启动 2-obd启动 3-gps启动 4-acc熄火 5-obd熄火 6-超时熄火 7-gps熄火 9-待命熄火 10-速度熄火 11-离线熄火
	EventTypeId uint64 `protobuf:"varint,3,opt,name=event_type_id,json=eventTypeId,proto3" json:"event_type_id,omitempty"`
	//事件描述
	EventDesc string `protobuf:"bytes,4,opt,name=event_desc,json=eventDesc,proto3" json:"event_desc,omitempty"`
	//事件发生时的定时数据接收时间
	RcvTime uint64 `protobuf:"varint,5,opt,name=rcv_time,json=rcvTime,proto3" json:"rcv_time,omitempty"`
	//事件发生时的经度
	Lon int32 `protobuf:"zigzag32,6,opt,name=lon,proto3" json:"lon,omitempty"`
	//事件发生时的纬度
	Lat int32 `protobuf:"zigzag32,7,opt,name=lat,proto3" json:"lat,omitempty"`
	//事件发生时的速度
	Speed uint32 `protobuf:"varint,8,opt,name=speed,proto3" json:"speed,omitempty"`
	//事件发生时的方向
	Direct uint32 `protobuf:"varint,9,opt,name=direct,proto3" json:"direct,omitempty"`
	//事件发生是的里程
	Mileage uint32 `protobuf:"varint,10,opt,name=mileage,proto3" json:"mileage,omitempty"`
	//事件发生时的油耗
	OilNum uint32 `protobuf:"varint,11,opt,name=oil_num,json=oilNum,proto3" json:"oil_num,omitempty"`
	//事件发生时的gps时间
	GpsTime uint64 `protobuf:"varint,12,opt,name=gps_time,json=gpsTime,proto3" json:"gps_time,omitempty"`
	//事件发生时的定位方式
	GpsFlag uint32 `protobuf:"varint,13,opt,name=gps_flag,json=gpsFlag,proto3" json:"gps_flag,omitempty"`
	//事件发生时的位置地址描述
	CurLocation string `protobuf:"bytes,14,opt,name=cur_location,json=curLocation,proto3" json:"cur_location,omitempty"`
	//
	Ascii string `protobuf:"bytes,15,opt,name=ascii,proto3" json:"ascii,omitempty"`
	//
	Hex string `protobuf:"bytes,16,opt,name=hex,proto3" json:"hex,omitempty"`
	//行程开始时间
	BeginTime uint64 `protobuf:"varint,17,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	//行程开始的经度
	BeginLon int32 `protobuf:"zigzag32,18,opt,name=begin_lon,json=beginLon,proto3" json:"begin_lon,omitempty"`
	//行程开始的纬度
	BeginLat int32 `protobuf:"zigzag32,19,opt,name=begin_lat,json=beginLat,proto3" json:"begin_lat,omitempty"`
	//行程时长
	TravelPeriod uint32 `protobuf:"varint,20,opt,name=travel_period,json=travelPeriod,proto3" json:"travel_period,omitempty"`
	//驾驶时长
	DrivePeriod uint32 `protobuf:"varint,21,opt,name=drive_period,json=drivePeriod,proto3" json:"drive_period,omitempty"`
	//超速次数
	OverSpeedCount uint32 `protobuf:"varint,22,opt,name=over_speed_count,json=overSpeedCount,proto3" json:"over_speed_count,omitempty"`
	//急加速次数
	CelerateCount uint32 `protobuf:"varint,23,opt,name=celerate_count,json=celerateCount,proto3" json:"celerate_count,omitempty"`
	//急减速次数
	DecelerateCount uint32 `protobuf:"varint,24,opt,name=decelerate_count,json=decelerateCount,proto3" json:"decelerate_count,omitempty"`
	//停车未熄火次数
	StopAccOnCount uint32 `protobuf:"varint,25,opt,name=stop_acc_on_count,json=stopAccOnCount,proto3" json:"stop_acc_on_count,omitempty"`
	//行程里程
	TravelMileage uint32 `protobuf:"varint,26,opt,name=travel_mileage,json=travelMileage,proto3" json:"travel_mileage,omitempty"`
	//行程油耗
	TravelOil uint32 `protobuf:"varint,27,opt,name=travel_oil,json=travelOil,proto3" json:"travel_oil,omitempty"`
	//地址解析标记，-1未解析 0-已解析
	ParseFlag uint32 `protobuf:"varint,28,opt,name=parse_flag,json=parseFlag,proto3" json:"parse_flag,omitempty"`
	//推送标记
	PushFlag uint32 `protobuf:"varint,29,opt,name=push_flag,json=pushFlag,proto3" json:"push_flag,omitempty"`
	//入库时间
	TheDay               uint64   `protobuf:"varint,30,opt,name=the_day,json=theDay,proto3" json:"the_day,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TravelEventDbInfo) Reset()         { *m = TravelEventDbInfo{} }
func (m *TravelEventDbInfo) String() string { return proto.CompactTextString(m) }
func (*TravelEventDbInfo) ProtoMessage()    {}
func (*TravelEventDbInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcf8523a103c6556, []int{7}
}
func (m *TravelEventDbInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TravelEventDbInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TravelEventDbInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TravelEventDbInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TravelEventDbInfo.Merge(m, src)
}
func (m *TravelEventDbInfo) XXX_Size() int {
	return m.Size()
}
func (m *TravelEventDbInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TravelEventDbInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TravelEventDbInfo proto.InternalMessageInfo

func (m *TravelEventDbInfo) GetRecId() uint64 {
	if m != nil {
		return m.RecId
	}
	return 0
}

func (m *TravelEventDbInfo) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *TravelEventDbInfo) GetEventTypeId() uint64 {
	if m != nil {
		return m.EventTypeId
	}
	return 0
}

func (m *TravelEventDbInfo) GetEventDesc() string {
	if m != nil {
		return m.EventDesc
	}
	return ""
}

func (m *TravelEventDbInfo) GetRcvTime() uint64 {
	if m != nil {
		return m.RcvTime
	}
	return 0
}

func (m *TravelEventDbInfo) GetLon() int32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func (m *TravelEventDbInfo) GetLat() int32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *TravelEventDbInfo) GetSpeed() uint32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *TravelEventDbInfo) GetDirect() uint32 {
	if m != nil {
		return m.Direct
	}
	return 0
}

func (m *TravelEventDbInfo) GetMileage() uint32 {
	if m != nil {
		return m.Mileage
	}
	return 0
}

func (m *TravelEventDbInfo) GetOilNum() uint32 {
	if m != nil {
		return m.OilNum
	}
	return 0
}

func (m *TravelEventDbInfo) GetGpsTime() uint64 {
	if m != nil {
		return m.GpsTime
	}
	return 0
}

func (m *TravelEventDbInfo) GetGpsFlag() uint32 {
	if m != nil {
		return m.GpsFlag
	}
	return 0
}

func (m *TravelEventDbInfo) GetCurLocation() string {
	if m != nil {
		return m.CurLocation
	}
	return ""
}

func (m *TravelEventDbInfo) GetAscii() string {
	if m != nil {
		return m.Ascii
	}
	return ""
}

func (m *TravelEventDbInfo) GetHex() string {
	if m != nil {
		return m.Hex
	}
	return ""
}

func (m *TravelEventDbInfo) GetBeginTime() uint64 {
	if m != nil {
		return m.BeginTime
	}
	return 0
}

func (m *TravelEventDbInfo) GetBeginLon() int32 {
	if m != nil {
		return m.BeginLon
	}
	return 0
}

func (m *TravelEventDbInfo) GetBeginLat() int32 {
	if m != nil {
		return m.BeginLat
	}
	return 0
}

func (m *TravelEventDbInfo) GetTravelPeriod() uint32 {
	if m != nil {
		return m.TravelPeriod
	}
	return 0
}

func (m *TravelEventDbInfo) GetDrivePeriod() uint32 {
	if m != nil {
		return m.DrivePeriod
	}
	return 0
}

func (m *TravelEventDbInfo) GetOverSpeedCount() uint32 {
	if m != nil {
		return m.OverSpeedCount
	}
	return 0
}

func (m *TravelEventDbInfo) GetCelerateCount() uint32 {
	if m != nil {
		return m.CelerateCount
	}
	return 0
}

func (m *TravelEventDbInfo) GetDecelerateCount() uint32 {
	if m != nil {
		return m.DecelerateCount
	}
	return 0
}

func (m *TravelEventDbInfo) GetStopAccOnCount() uint32 {
	if m != nil {
		return m.StopAccOnCount
	}
	return 0
}

func (m *TravelEventDbInfo) GetTravelMileage() uint32 {
	if m != nil {
		return m.TravelMileage
	}
	return 0
}

func (m *TravelEventDbInfo) GetTravelOil() uint32 {
	if m != nil {
		return m.TravelOil
	}
	return 0
}

func (m *TravelEventDbInfo) GetParseFlag() uint32 {
	if m != nil {
		return m.ParseFlag
	}
	return 0
}

func (m *TravelEventDbInfo) GetPushFlag() uint32 {
	if m != nil {
		return m.PushFlag
	}
	return 0
}

func (m *TravelEventDbInfo) GetTheDay() uint64 {
	if m != nil {
		return m.TheDay
	}
	return 0
}

//停留信息
type StopDetailDbInfo struct {
	//主键，记录id
	RecId uint64 `protobuf:"varint,1,opt,name=rec_id,json=recId,proto3" json:"rec_id,omitempty"`
	//设备id
	ObjectId uint32 `protobuf:"varint,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	//停留开始时间（上一笔行程结束的gps时间）
	StartTime uint64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	//停留结束时间（下一笔行程开始的gps时间）
	StopTime uint64 `protobuf:"varint,4,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
	//停留开始的经度（上一笔行程结束的经度）
	StartLon int32 `protobuf:"zigzag32,5,opt,name=start_lon,json=startLon,proto3" json:"start_lon,omitempty"`
	//停留开始的纬度（上一笔行程结束的纬度）
	StartLat int32 `protobuf:"zigzag32,6,opt,name=start_lat,json=startLat,proto3" json:"start_lat,omitempty"`
	//停留开始的定位方式
	StartGpsFlag uint32 `protobuf:"varint,7,opt,name=start_gps_flag,json=startGpsFlag,proto3" json:"start_gps_flag,omitempty"`
	//停留时长
	MinuteSpan uint32 `protobuf:"varint,8,opt,name=minute_span,json=minuteSpan,proto3" json:"minute_span,omitempty"`
	//
	OrigUpId uint32 `protobuf:"varint,10,opt,name=orig_up_id,json=origUpId,proto3" json:"orig_up_id,omitempty"`
	//当前行程里程
	CurrentMileage uint32 `protobuf:"varint,11,opt,name=current_mileage,json=currentMileage,proto3" json:"current_mileage,omitempty"`
	//之前的行驶里程
	PreRunMileage uint32 `protobuf:"varint,12,opt,name=pre_run_mileage,json=preRunMileage,proto3" json:"pre_run_mileage,omitempty"`
	//地址解析标记，0-未解析，1-已解析
	ParseFlag uint32 `protobuf:"varint,13,opt,name=parse_flag,json=parseFlag,proto3" json:"parse_flag,omitempty"`
	//地址描述
	CurLocation string `protobuf:"bytes,14,opt,name=cur_location,json=curLocation,proto3" json:"cur_location,omitempty"`
	//记录插入时间
	TheDay uint64 `protobuf:"varint,15,opt,name=the_day,json=theDay,proto3" json:"the_day,omitempty"`
	//geohash字符串
	GeoCode              string   `protobuf:"bytes,16,opt,name=geo_code,json=geoCode,proto3" json:"geo_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopDetailDbInfo) Reset()         { *m = StopDetailDbInfo{} }
func (m *StopDetailDbInfo) String() string { return proto.CompactTextString(m) }
func (*StopDetailDbInfo) ProtoMessage()    {}
func (*StopDetailDbInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcf8523a103c6556, []int{8}
}
func (m *StopDetailDbInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopDetailDbInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopDetailDbInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopDetailDbInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopDetailDbInfo.Merge(m, src)
}
func (m *StopDetailDbInfo) XXX_Size() int {
	return m.Size()
}
func (m *StopDetailDbInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StopDetailDbInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StopDetailDbInfo proto.InternalMessageInfo

func (m *StopDetailDbInfo) GetRecId() uint64 {
	if m != nil {
		return m.RecId
	}
	return 0
}

func (m *StopDetailDbInfo) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *StopDetailDbInfo) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *StopDetailDbInfo) GetStopTime() uint64 {
	if m != nil {
		return m.StopTime
	}
	return 0
}

func (m *StopDetailDbInfo) GetStartLon() int32 {
	if m != nil {
		return m.StartLon
	}
	return 0
}

func (m *StopDetailDbInfo) GetStartLat() int32 {
	if m != nil {
		return m.StartLat
	}
	return 0
}

func (m *StopDetailDbInfo) GetStartGpsFlag() uint32 {
	if m != nil {
		return m.StartGpsFlag
	}
	return 0
}

func (m *StopDetailDbInfo) GetMinuteSpan() uint32 {
	if m != nil {
		return m.MinuteSpan
	}
	return 0
}

func (m *StopDetailDbInfo) GetOrigUpId() uint32 {
	if m != nil {
		return m.OrigUpId
	}
	return 0
}

func (m *StopDetailDbInfo) GetCurrentMileage() uint32 {
	if m != nil {
		return m.CurrentMileage
	}
	return 0
}

func (m *StopDetailDbInfo) GetPreRunMileage() uint32 {
	if m != nil {
		return m.PreRunMileage
	}
	return 0
}

func (m *StopDetailDbInfo) GetParseFlag() uint32 {
	if m != nil {
		return m.ParseFlag
	}
	return 0
}

func (m *StopDetailDbInfo) GetCurLocation() string {
	if m != nil {
		return m.CurLocation
	}
	return ""
}

func (m *StopDetailDbInfo) GetTheDay() uint64 {
	if m != nil {
		return m.TheDay
	}
	return 0
}

func (m *StopDetailDbInfo) GetGeoCode() string {
	if m != nil {
		return m.GeoCode
	}
	return ""
}

//里程信息
type MileAgeDetailDbInfo struct {
	//记录id
	DetailId uint64 `protobuf:"varint,1,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`
	//设备id
	ObjectId uint32 `protobuf:"varint,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	//渠道id
	HoldId uint32 `protobuf:"varint,3,opt,name=hold_id,json=holdId,proto3" json:"hold_id,omitempty"`
	//
	DriverId1 uint32 `protobuf:"varint,4,opt,name=driver_id1,json=driverId1,proto3" json:"driver_id1,omitempty"`
	//
	DriverId2 uint32 `protobuf:"varint,5,opt,name=driver_id2,json=driverId2,proto3" json:"driver_id2,omitempty"`
	//
	TotalId uint32 `protobuf:"varint,6,opt,name=total_id,json=totalId,proto3" json:"total_id,omitempty"`
	//被统计日期
	TotalDate uint64 `protobuf:"varint,7,opt,name=total_date,json=totalDate,proto3" json:"total_date,omitempty"`
	//
	TotalType uint32 `protobuf:"varint,8,opt,name=total_type,json=totalType,proto3" json:"total_type,omitempty"`
	//统计开始时间
	StartTime uint64 `protobuf:"varint,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	//统计结束时间
	EndTime uint64 `protobuf:"varint,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	//总时间（以分钟为单位）
	Minutes uint32 `protobuf:"varint,11,opt,name=minutes,proto3" json:"minutes,omitempty"`
	//当日统计里程值
	TotalValue uint32 `protobuf:"varint,12,opt,name=total_value,json=totalValue,proto3" json:"total_value,omitempty"`
	//记录写入时间
	TheDay               uint64   `protobuf:"varint,13,opt,name=the_day,json=theDay,proto3" json:"the_day,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MileAgeDetailDbInfo) Reset()         { *m = MileAgeDetailDbInfo{} }
func (m *MileAgeDetailDbInfo) String() string { return proto.CompactTextString(m) }
func (*MileAgeDetailDbInfo) ProtoMessage()    {}
func (*MileAgeDetailDbInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcf8523a103c6556, []int{9}
}
func (m *MileAgeDetailDbInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MileAgeDetailDbInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MileAgeDetailDbInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MileAgeDetailDbInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MileAgeDetailDbInfo.Merge(m, src)
}
func (m *MileAgeDetailDbInfo) XXX_Size() int {
	return m.Size()
}
func (m *MileAgeDetailDbInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MileAgeDetailDbInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MileAgeDetailDbInfo proto.InternalMessageInfo

func (m *MileAgeDetailDbInfo) GetDetailId() uint64 {
	if m != nil {
		return m.DetailId
	}
	return 0
}

func (m *MileAgeDetailDbInfo) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *MileAgeDetailDbInfo) GetHoldId() uint32 {
	if m != nil {
		return m.HoldId
	}
	return 0
}

func (m *MileAgeDetailDbInfo) GetDriverId1() uint32 {
	if m != nil {
		return m.DriverId1
	}
	return 0
}

func (m *MileAgeDetailDbInfo) GetDriverId2() uint32 {
	if m != nil {
		return m.DriverId2
	}
	return 0
}

func (m *MileAgeDetailDbInfo) GetTotalId() uint32 {
	if m != nil {
		return m.TotalId
	}
	return 0
}

func (m *MileAgeDetailDbInfo) GetTotalDate() uint64 {
	if m != nil {
		return m.TotalDate
	}
	return 0
}

func (m *MileAgeDetailDbInfo) GetTotalType() uint32 {
	if m != nil {
		return m.TotalType
	}
	return 0
}

func (m *MileAgeDetailDbInfo) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *MileAgeDetailDbInfo) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *MileAgeDetailDbInfo) GetMinutes() uint32 {
	if m != nil {
		return m.Minutes
	}
	return 0
}

func (m *MileAgeDetailDbInfo) GetTotalValue() uint32 {
	if m != nil {
		return m.TotalValue
	}
	return 0
}

func (m *MileAgeDetailDbInfo) GetTheDay() uint64 {
	if m != nil {
		return m.TheDay
	}
	return 0
}

//获取设备实时行程
type GetRealtimeTravelReq struct {
	//设备ID列表
	DeviceList []string `protobuf:"bytes,1,rep,name=device_list,json=deviceList,proto3" json:"device_list,omitempty"`
	//设备记录ID列表
	ObjectList           []uint32 `protobuf:"varint,2,rep,packed,name=object_list,json=objectList,proto3" json:"object_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRealtimeTravelReq) Reset()         { *m = GetRealtimeTravelReq{} }
func (m *GetRealtimeTravelReq) String() string { return proto.CompactTextString(m) }
func (*GetRealtimeTravelReq) ProtoMessage()    {}
func (*GetRealtimeTravelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcf8523a103c6556, []int{10}
}
func (m *GetRealtimeTravelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRealtimeTravelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRealtimeTravelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRealtimeTravelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRealtimeTravelReq.Merge(m, src)
}
func (m *GetRealtimeTravelReq) XXX_Size() int {
	return m.Size()
}
func (m *GetRealtimeTravelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRealtimeTravelReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRealtimeTravelReq proto.InternalMessageInfo

func (m *GetRealtimeTravelReq) GetDeviceList() []string {
	if m != nil {
		return m.DeviceList
	}
	return nil
}

func (m *GetRealtimeTravelReq) GetObjectList() []uint32 {
	if m != nil {
		return m.ObjectList
	}
	return nil
}

type GetRealtimeTravelResp struct {
	//返回信息
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	//行程信息
	TravelList           []*TravelInfo `protobuf:"bytes,2,rep,name=travel_list,json=travelList,proto3" json:"travel_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetRealtimeTravelResp) Reset()         { *m = GetRealtimeTravelResp{} }
func (m *GetRealtimeTravelResp) String() string { return proto.CompactTextString(m) }
func (*GetRealtimeTravelResp) ProtoMessage()    {}
func (*GetRealtimeTravelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_dcf8523a103c6556, []int{11}
}
func (m *GetRealtimeTravelResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRealtimeTravelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRealtimeTravelResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRealtimeTravelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRealtimeTravelResp.Merge(m, src)
}
func (m *GetRealtimeTravelResp) XXX_Size() int {
	return m.Size()
}
func (m *GetRealtimeTravelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRealtimeTravelResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRealtimeTravelResp proto.InternalMessageInfo

func (m *GetRealtimeTravelResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetRealtimeTravelResp) GetTravelList() []*TravelInfo {
	if m != nil {
		return m.TravelList
	}
	return nil
}

func init() {
	proto.RegisterType((*TrackInfoSimple)(nil), "mapgoo.paas.travel.data.TrackInfoSimple")
	proto.RegisterType((*TravelInfo)(nil), "mapgoo.paas.travel.data.TravelInfo")
	proto.RegisterType((*GetHisTravelReq)(nil), "mapgoo.paas.travel.data.GetHisTravelReq")
	proto.RegisterType((*GetHisTravelResp)(nil), "mapgoo.paas.travel.data.GetHisTravelResp")
	proto.RegisterType((*GetStatisticsTravelReq)(nil), "mapgoo.paas.travel.data.GetStatisticsTravelReq")
	proto.RegisterType((*GetStatisticsTravelResp)(nil), "mapgoo.paas.travel.data.GetStatisticsTravelResp")
	proto.RegisterType((*TravelDbInfo)(nil), "mapgoo.paas.travel.data.TravelDbInfo")
	proto.RegisterType((*TravelEventDbInfo)(nil), "mapgoo.paas.travel.data.TravelEventDbInfo")
	proto.RegisterType((*StopDetailDbInfo)(nil), "mapgoo.paas.travel.data.StopDetailDbInfo")
	proto.RegisterType((*MileAgeDetailDbInfo)(nil), "mapgoo.paas.travel.data.MileAgeDetailDbInfo")
	proto.RegisterType((*GetRealtimeTravelReq)(nil), "mapgoo.paas.travel.data.GetRealtimeTravelReq")
	proto.RegisterType((*GetRealtimeTravelResp)(nil), "mapgoo.paas.travel.data.GetRealtimeTravelResp")
}

func init() { proto.RegisterFile("mapgoo.paas.travel.data.proto", fileDescriptor_dcf8523a103c6556) }

var fileDescriptor_dcf8523a103c6556 = []byte{
	// 1850 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcd, 0x6e, 0xe3, 0xc8,
	0x11, 0x5e, 0x59, 0xb2, 0x28, 0x95, 0xa4, 0xb1, 0xcc, 0xb1, 0x2d, 0xda, 0x1e, 0x7b, 0x3c, 0x9a,
	0xfc, 0x68, 0x81, 0xc0, 0xc0, 0x3a, 0x87, 0x1c, 0x72, 0xda, 0x1d, 0xef, 0xce, 0x1a, 0x98, 0x64,
	0x07, 0xb4, 0x13, 0x04, 0xb9, 0x10, 0x6d, 0xb2, 0x47, 0xee, 0x2c, 0x45, 0xd2, 0x64, 0x53, 0x18,
	0x3f, 0x44, 0x02, 0xe4, 0x96, 0xc7, 0xc8, 0x2d, 0x87, 0xbc, 0x40, 0x72, 0xcb, 0x21, 0x40, 0xae,
	0xc9, 0xe4, 0x92, 0xc7, 0x08, 0xaa, 0xaa, 0x9b, 0xfa, 0xb1, 0xc6, 0xa3, 0xcd, 0x0f, 0xf6, 0xa6,
	0xfe, 0xbe, 0x62, 0xff, 0x55, 0xd7, 0x57, 0x55, 0x82, 0xa3, 0x89, 0xc8, 0xc6, 0x69, 0x7a, 0x9a,
	0x09, 0x51, 0x9c, 0xea, 0x5c, 0x4c, 0x65, 0x7c, 0x1a, 0x09, 0x2d, 0x4e, 0xb3, 0x3c, 0xd5, 0xa9,
	0x3b, 0x78, 0x0f, 0x7d, 0xb0, 0x37, 0x4f, 0x5c, 0x8b, 0x42, 0xf2, 0x07, 0xc3, 0x3f, 0xd6, 0x60,
	0xeb, 0x2a, 0x17, 0xe1, 0xd7, 0x17, 0xc9, 0x9b, 0xf4, 0x52, 0x4d, 0xb2, 0x58, 0xba, 0x1e, 0x38,
	0x13, 0x15, 0x4b, 0x31, 0x96, 0x5e, 0xed, 0xa4, 0x36, 0x6a, 0xf8, 0x76, 0xe8, 0xee, 0xc0, 0x66,
	0x91, 0x49, 0x19, 0x79, 0x1b, 0x27, 0xb5, 0x51, 0xcf, 0xe7, 0x81, 0xfb, 0x04, 0xda, 0x91, 0xca,
	0x65, 0xa8, 0x55, 0x9a, 0x78, 0x75, 0x62, 0x66, 0x80, 0xdb, 0x87, 0x7a, 0x2c, 0xb4, 0xd7, 0x38,
	0xa9, 0x8d, 0x36, 0x7d, 0xfc, 0x49, 0x48, 0x32, 0xf6, 0x36, 0x0d, 0x92, 0x8c, 0xdd, 0x43, 0x68,
	0xe7, 0x32, 0x9c, 0x06, 0x5a, 0x4d, 0xa4, 0xd7, 0xa4, 0x35, 0x5b, 0x08, 0x5c, 0xa9, 0x89, 0x74,
	0xf7, 0xa1, 0x35, 0xce, 0x0a, 0xe6, 0x1c, 0xde, 0xcf, 0x38, 0x2b, 0x90, 0x1a, 0xfe, 0xc3, 0x01,
	0xb8, 0xa2, 0x53, 0xe2, 0xf6, 0x71, 0x9a, 0xf4, 0xfa, 0x57, 0x32, 0xd4, 0x81, 0x8a, 0x68, 0xeb,
	0x3d, 0xbf, 0xc5, 0xc0, 0x45, 0x84, 0x24, 0x5f, 0x08, 0x92, 0x1b, 0xbc, 0x06, 0x03, 0x17, 0x91,
	0xfb, 0x0c, 0xba, 0xaa, 0x08, 0xc2, 0x14, 0xcf, 0xaf, 0x65, 0x44, 0xa7, 0x68, 0xf9, 0x1d, 0x55,
	0xbc, 0xb0, 0x90, 0xfb, 0x5d, 0x78, 0x64, 0xbe, 0xb7, 0x97, 0xd3, 0xa0, 0x49, 0x7a, 0x8c, 0xfe,
	0xc4, 0x5c, 0xd1, 0x11, 0x80, 0x31, 0x4b, 0x55, 0x4c, 0x67, 0x6c, 0xf8, 0x66, 0xe1, 0xaf, 0x54,
	0xec, 0x3e, 0x07, 0x63, 0x1f, 0x64, 0x32, 0x57, 0x69, 0x44, 0xa7, 0xed, 0xf9, 0x5d, 0x06, 0x5f,
	0x13, 0x86, 0xbb, 0x89, 0x72, 0x35, 0x95, 0xd6, 0xc6, 0x21, 0x9b, 0x0e, 0x61, 0xc6, 0x64, 0x04,
	0xfd, 0x74, 0x2a, 0xf3, 0x80, 0x3c, 0x10, 0x84, 0x69, 0x99, 0x68, 0xaf, 0x45, 0x66, 0x8f, 0x10,
	0xbf, 0x44, 0xf8, 0x05, 0xa2, 0xb8, 0xef, 0x50, 0xc6, 0x32, 0x17, 0x5a, 0x1a, 0xbb, 0x36, 0xd9,
	0xf5, 0x2c, 0xca, 0x66, 0x1f, 0x43, 0x3f, 0x92, 0x4b, 0x86, 0x40, 0x86, 0x5b, 0x33, 0x9c, 0x4d,
	0x47, 0xd0, 0x2f, 0x74, 0x9a, 0x05, 0x22, 0x0c, 0xd3, 0xc4, 0x98, 0x76, 0x78, 0x6d, 0xc4, 0x3f,
	0x45, 0x98, 0x2d, 0xbf, 0x03, 0x8f, 0x0a, 0x2d, 0x72, 0x1d, 0x64, 0x69, 0x11, 0x44, 0xb2, 0x08,
	0xbd, 0xee, 0x49, 0x6d, 0xd4, 0xf6, 0xbb, 0x84, 0xbe, 0x4e, 0x8b, 0x73, 0x59, 0x84, 0xee, 0x10,
	0x7a, 0x34, 0x5f, 0x65, 0xd4, 0x23, 0xa3, 0x0e, 0x82, 0xd6, 0xa6, 0x9a, 0x49, 0x4e, 0x65, 0x42,
	0xfe, 0x7d, 0x44, 0x57, 0xcb, 0x33, 0x7d, 0x8e, 0xe0, 0x45, 0x54, 0xcd, 0x54, 0x19, 0x6d, 0x91,
	0x11, 0xcd, 0x64, 0x6d, 0x06, 0xe0, 0x14, 0x5a, 0xdc, 0x21, 0xdb, 0x27, 0xb6, 0x89, 0xc3, 0x8b,
	0xc8, 0xdd, 0x83, 0x66, 0x2e, 0x27, 0x22, 0xff, 0xda, 0xdb, 0xa6, 0xf5, 0xcd, 0x08, 0x1f, 0x8e,
	0x98, 0x8e, 0xf9, 0xa6, 0x3d, 0x97, 0x5f, 0x95, 0x98, 0x8e, 0xe9, 0x8a, 0x91, 0x9c, 0x88, 0xb7,
	0x86, 0x7c, 0xcc, 0xe4, 0x44, 0xbc, 0xad, 0x48, 0x3c, 0x13, 0xdf, 0xd0, 0x0e, 0x93, 0x59, 0x5a,
	0xf0, 0xdd, 0x3c, 0x85, 0x8e, 0x4e, 0xb5, 0x88, 0xcd, 0xb7, 0xbb, 0x44, 0x03, 0x41, 0xfc, 0xf5,
	0x3e, 0xb4, 0xae, 0xad, 0x6b, 0xf7, 0x88, 0x75, 0xae, 0x8d, 0x4f, 0x07, 0xe0, 0x10, 0x15, 0x49,
	0x6f, 0xc0, 0x7b, 0x45, 0x26, 0x92, 0x74, 0x4d, 0xf2, 0x36, 0x78, 0x23, 0xca, 0x58, 0x33, 0xef,
	0x9d, 0xd4, 0xe9, 0xc2, 0xe5, 0xed, 0x17, 0x08, 0x92, 0xd5, 0xe7, 0xd0, 0xae, 0xdc, 0xe2, 0xed,
	0x9f, 0xd4, 0x46, 0x9d, 0xb3, 0xd1, 0xe9, 0xfb, 0x84, 0x65, 0x49, 0x1d, 0xfc, 0x96, 0xf5, 0x9d,
	0xfb, 0x02, 0x5a, 0xd6, 0x6f, 0xde, 0xc1, 0x37, 0x9c, 0xc5, 0x31, 0xce, 0xc5, 0x6b, 0xe0, 0xb7,
	0x5e, 0x84, 0x69, 0x2e, 0xbd, 0x43, 0xbe, 0x06, 0x82, 0x2e, 0x11, 0x19, 0xfe, 0xad, 0x06, 0x5b,
	0x2f, 0xa5, 0xfe, 0x52, 0x15, 0x1c, 0xe9, 0xbe, 0xbc, 0x75, 0x7f, 0x04, 0xed, 0x48, 0x4e, 0x55,
	0x28, 0x6d, 0xa0, 0x77, 0xce, 0x0e, 0x4e, 0xef, 0x29, 0xdc, 0x39, 0x99, 0x5c, 0x44, 0x7e, 0x2b,
	0x32, 0xbf, 0x30, 0x3a, 0xf9, 0xe4, 0xa4, 0x26, 0x1b, 0x74, 0x77, 0x7c, 0x17, 0x56, 0x6a, 0x64,
	0x12, 0x31, 0x59, 0x27, 0xd2, 0x91, 0x49, 0x44, 0xd4, 0x0e, 0x6c, 0xc6, 0x6a, 0xa2, 0x58, 0xc8,
	0x7a, 0x3e, 0x0f, 0xdc, 0x1f, 0x43, 0x3b, 0x13, 0x63, 0x19, 0xa8, 0xe4, 0x4d, 0x4a, 0xc1, 0xde,
	0x39, 0x3b, 0xbe, 0xbf, 0x91, 0xd7, 0x62, 0x2c, 0x3f, 0x13, 0x85, 0xc4, 0xf3, 0xfb, 0x2d, 0xfc,
	0x00, 0x7f, 0x0d, 0xff, 0x5c, 0x83, 0xfe, 0xe2, 0xc9, 0x8a, 0xcc, 0x3d, 0x83, 0x06, 0x7e, 0x63,
	0x4e, 0xb5, 0x62, 0x32, 0x9c, 0x08, 0x2d, 0x69, 0x32, 0xb2, 0x75, 0xcf, 0xa1, 0x63, 0x44, 0x25,
	0x56, 0x85, 0xf6, 0x36, 0x4e, 0xea, 0xa3, 0xce, 0xd9, 0xf3, 0x87, 0x7c, 0x61, 0x14, 0xd3, 0x37,
	0x5a, 0xf5, 0x4a, 0x15, 0x4b, 0x67, 0xa9, 0x7f, 0xc3, 0xb3, 0xfc, 0xbe, 0x06, 0x7b, 0x2f, 0xa5,
	0xbe, 0xd4, 0x42, 0xab, 0x42, 0xab, 0xf0, 0x7f, 0xe4, 0xac, 0x6b, 0x39, 0x56, 0xc9, 0x82, 0xb3,
	0x08, 0xf9, 0x90, 0xb3, 0x9e, 0x43, 0xaf, 0xb8, 0x8d, 0x83, 0x30, 0x4d, 0x22, 0x45, 0x59, 0xa9,
	0x61, 0xa2, 0xe0, 0x36, 0x7e, 0x61, 0xb1, 0xe1, 0x5f, 0x6b, 0x30, 0x58, 0xb9, 0xe5, 0xff, 0xd0,
	0x0b, 0x18, 0x7b, 0xe5, 0x24, 0x98, 0x53, 0xff, 0x0d, 0x23, 0x51, 0xe5, 0xe4, 0xaa, 0x4a, 0x00,
	0x3f, 0x00, 0x77, 0xce, 0xca, 0xa6, 0x92, 0x3a, 0x59, 0xf6, 0x2b, 0x4b, 0x9b, 0x4d, 0x0e, 0xa1,
	0x8d, 0xd6, 0x1c, 0x1b, 0xfc, 0xf2, 0x5a, 0x45, 0x39, 0xa1, 0xc8, 0xc0, 0x27, 0xc9, 0xea, 0xb0,
	0xc9, 0x4f, 0x92, 0x06, 0xc3, 0x3f, 0xb4, 0xa0, 0xcb, 0x93, 0x9c, 0x5f, 0x53, 0x56, 0xdc, 0x45,
	0x5d, 0x0b, 0xed, 0xe5, 0x37, 0xfc, 0xcd, 0x5c, 0x86, 0x9c, 0x0f, 0x67, 0xc9, 0x72, 0x63, 0x29,
	0x59, 0x2e, 0xc6, 0x09, 0xef, 0x6e, 0x2e, 0x4e, 0x0e, 0xad, 0x80, 0xc4, 0x74, 0xb7, 0xb5, 0xd1,
	0xb6, 0x91, 0x85, 0x57, 0x69, 0x32, 0x47, 0x0a, 0xde, 0x5a, 0x45, 0x0a, 0x3d, 0x23, 0x51, 0x34,
	0x9a, 0xe4, 0xb5, 0x99, 0xa0, 0x10, 0x99, 0x66, 0xf3, 0xa9, 0x9e, 0x14, 0xc6, 0xba, 0x9b, 0x48,
	0x5c, 0xb2, 0x45, 0xb3, 0x92, 0x86, 0xe0, 0x8a, 0x15, 0x25, 0x38, 0xb9, 0x59, 0x4a, 0xe8, 0x8a,
	0xc2, 0xe5, 0x80, 0x1f, 0x89, 0x55, 0x9e, 0x79, 0x7d, 0xed, 0xbc, 0x57, 0x5f, 0xbb, 0x0b, 0xfa,
	0x7a, 0xbf, 0x08, 0xe8, 0x71, 0x32, 0x7d, 0xa8, 0x08, 0x78, 0xc4, 0x25, 0xd1, 0xac, 0x08, 0x58,
	0x95, 0xbc, 0xb7, 0xd6, 0x4c, 0xde, 0xfd, 0x75, 0x93, 0xf7, 0xf6, 0xea, 0xe4, 0x7d, 0xaf, 0x00,
	0x71, 0xd7, 0x28, 0x40, 0x1e, 0xdf, 0x2f, 0x40, 0x3e, 0x86, 0x6d, 0x5b, 0x04, 0x04, 0x55, 0x15,
	0xb0, 0xb3, 0x50, 0x05, 0x7c, 0x65, 0xaa, 0x80, 0x59, 0x62, 0xdd, 0x5d, 0x48, 0xac, 0x1e, 0x38,
	0x32, 0x11, 0xd7, 0xb1, 0x8c, 0x6c, 0x7e, 0x33, 0x43, 0xdc, 0x64, 0x9c, 0x86, 0x02, 0xc3, 0x34,
	0x78, 0x13, 0x8b, 0x31, 0x65, 0xb9, 0x9e, 0xdf, 0xb5, 0xe0, 0x17, 0xb1, 0x18, 0x53, 0x90, 0xd3,
	0x53, 0xb2, 0xae, 0xf0, 0xd8, 0x88, 0x40, 0xeb, 0x89, 0xfb, 0x75, 0xc3, 0xfe, 0x3a, 0x75, 0xc3,
	0xc1, 0x83, 0x75, 0xc3, 0xe1, 0x42, 0xdd, 0x30, 0x00, 0x47, 0xdf, 0xc8, 0x20, 0x12, 0x77, 0xde,
	0x13, 0x26, 0xf4, 0x8d, 0x3c, 0x17, 0x77, 0x54, 0x2d, 0x53, 0xe0, 0x1e, 0x99, 0x6a, 0x99, 0xa2,
	0x76, 0xa1, 0x9c, 0x38, 0x7e, 0xa8, 0x9c, 0x78, 0xfa, 0x50, 0x39, 0x71, 0xb2, 0x54, 0x4e, 0x60,
	0x51, 0x76, 0x23, 0xf2, 0x2c, 0xd0, 0x65, 0x6e, 0xdd, 0xf1, 0xcc, 0xb8, 0x03, 0xf1, 0xab, 0x32,
	0x4f, 0xaa, 0xc7, 0xad, 0x8a, 0xe0, 0x46, 0x45, 0xd2, 0x1b, 0x92, 0x41, 0x53, 0x15, 0x5f, 0xaa,
	0x48, 0x0e, 0x7f, 0xe3, 0xc0, 0x36, 0x2b, 0x07, 0x9d, 0xf9, 0xbf, 0x90, 0x8f, 0x21, 0xf4, 0xf8,
	0x2a, 0xf5, 0x5d, 0x46, 0xb2, 0xcf, 0x0a, 0xd2, 0x21, 0xf0, 0xea, 0x2e, 0x33, 0xea, 0xce, 0x36,
	0x54, 0xf2, 0x35, 0x58, 0xdd, 0x09, 0xa1, 0x82, 0x6f, 0x1f, 0x5a, 0xb9, 0xed, 0x08, 0xb8, 0x8a,
	0x76, 0x72, 0xd3, 0x10, 0x60, 0xff, 0x90, 0x26, 0xa4, 0x1e, 0xdb, 0x3e, 0xfe, 0xb4, 0x3d, 0x86,
	0x63, 0x10, 0xa1, 0x67, 0x9d, 0x4a, 0x6b, 0xbe, 0x53, 0xd9, 0x83, 0x26, 0x37, 0x26, 0xa6, 0x06,
	0x36, 0xa3, 0xf9, 0x8e, 0x87, 0x6b, 0xde, 0xaa, 0xe3, 0x19, 0x80, 0x93, 0xaa, 0x38, 0x48, 0xca,
	0x89, 0xd1, 0x88, 0x66, 0xaa, 0xe2, 0x9f, 0x96, 0x93, 0x85, 0xae, 0xa4, 0xbb, 0xd0, 0x95, 0x58,
	0x8a, 0x1e, 0x2e, 0xcb, 0x03, 0x52, 0xf4, 0x66, 0x9f, 0x41, 0x37, 0x2c, 0xf3, 0xc0, 0xbe, 0x63,
	0x92, 0x86, 0xb6, 0xdf, 0x09, 0xcb, 0xfc, 0x95, 0x81, 0x70, 0xe7, 0xa2, 0x08, 0x95, 0x22, 0x45,
	0x68, 0xfb, 0x3c, 0xc0, 0x13, 0xde, 0xc8, 0xb7, 0x14, 0xfd, 0x6d, 0x1f, 0x7f, 0x2e, 0x65, 0xc7,
	0x6d, 0x96, 0xe8, 0x59, 0x76, 0x3c, 0x04, 0x1e, 0x90, 0x5e, 0xba, 0xac, 0xc2, 0x04, 0x18, 0x89,
	0x36, 0xa4, 0xd0, 0x14, 0xdc, 0x15, 0x29, 0x56, 0x28, 0xc4, 0xce, 0x1a, 0x0a, 0xb1, 0xbb, 0x5e,
	0x8b, 0xb2, 0xb7, 0xa6, 0xca, 0x0d, 0xd6, 0x55, 0x39, 0x6f, 0xb5, 0xca, 0xad, 0x54, 0xa7, 0xfd,
	0x95, 0xea, 0x74, 0x5f, 0xd2, 0x0f, 0x3e, 0x2c, 0xe9, 0x87, 0xcb, 0x92, 0x7e, 0x04, 0x90, 0x89,
	0xbc, 0x90, 0xec, 0xf5, 0x27, 0x4c, 0x13, 0x42, 0x7e, 0xc7, 0xd0, 0x2d, 0x8b, 0x1b, 0x66, 0x8f,
	0x4c, 0xe8, 0x96, 0xc5, 0x0d, 0x91, 0x73, 0x02, 0x72, 0x3c, 0x2f, 0x20, 0xc3, 0x7f, 0xd5, 0xa1,
	0x7f, 0xa9, 0xd3, 0xec, 0x5c, 0x6a, 0xa1, 0xfe, 0xdf, 0xe9, 0xdc, 0xe6, 0xdd, 0xc6, 0x52, 0xde,
	0x5d, 0xc8, 0xf5, 0x9b, 0x0f, 0xe5, 0xfa, 0xe6, 0x52, 0xae, 0xaf, 0xb4, 0xb7, 0x8a, 0x06, 0x67,
	0x4e, 0xa1, 0x5f, 0x9a, 0x90, 0x78, 0x0a, 0x9d, 0x89, 0x4a, 0x4a, 0x2d, 0x83, 0x22, 0x13, 0x89,
	0x89, 0x57, 0x60, 0xe8, 0x32, 0x13, 0x89, 0xfb, 0x04, 0x20, 0xcd, 0xd5, 0x38, 0x28, 0x33, 0x3c,
	0x1a, 0x98, 0xa3, 0xe5, 0x6a, 0xfc, 0xb3, 0xec, 0x22, 0x72, 0xbf, 0x0f, 0x5b, 0x61, 0x99, 0xe7,
	0x28, 0x24, 0xd6, 0x7f, 0xa6, 0x17, 0x35, 0xb0, 0x75, 0xe0, 0xf7, 0x60, 0x2b, 0xcb, 0x65, 0x90,
	0x97, 0x49, 0x65, 0xd8, 0x65, 0x47, 0x67, 0xb9, 0xf4, 0xcb, 0x64, 0xce, 0xd1, 0x73, 0x9e, 0xec,
	0x2d, 0x7b, 0x72, 0x8d, 0x08, 0x9e, 0xf3, 0xe7, 0xd6, 0x42, 0x42, 0x40, 0x61, 0x90, 0x29, 0xd7,
	0x15, 0x1c, 0xc9, 0xce, 0x58, 0xa6, 0x58, 0x58, 0x0c, 0x7f, 0x5d, 0x87, 0xc7, 0xb8, 0x83, 0x4f,
	0xc7, 0x72, 0xc1, 0xdb, 0x87, 0x58, 0x3c, 0xe3, 0x78, 0xe6, 0xf0, 0x16, 0x03, 0x1f, 0xf2, 0xf9,
	0x00, 0x9c, 0x9b, 0x34, 0x8e, 0xac, 0xfa, 0xf6, 0xfc, 0x26, 0x0e, 0xf9, 0x31, 0x50, 0x98, 0xe6,
	0x81, 0x8a, 0x3e, 0x31, 0x45, 0x65, 0x9b, 0x91, 0x8b, 0xe8, 0x93, 0x05, 0xfa, 0xcc, 0x94, 0x96,
	0x15, 0x7d, 0x86, 0x67, 0xe0, 0xb6, 0x55, 0xd9, 0xff, 0x2e, 0x1c, 0x1a, 0xf3, 0xc4, 0x4c, 0x45,
	0x42, 0xdb, 0xfa, 0xad, 0x4d, 0xc8, 0xb9, 0xd0, 0x72, 0x46, 0x63, 0x52, 0x30, 0x7e, 0x66, 0x1a,
	0x33, 0xc2, 0xd2, 0x1b, 0x6d, 0x2f, 0xbf, 0xd1, 0xf9, 0x6a, 0x1f, 0x58, 0x6f, 0x6d, 0xb5, 0x4f,
	0xea, 0x8d, 0xcf, 0xa5, 0xb0, 0x75, 0x9c, 0x19, 0xce, 0x7a, 0xec, 0xa9, 0x88, 0x4b, 0xeb, 0x6f,
	0xde, 0xc5, 0xcf, 0x11, 0x99, 0x77, 0x55, 0x6f, 0x21, 0xf4, 0x7e, 0x01, 0x3b, 0x2f, 0xa5, 0xf6,
	0xa5, 0x88, 0x71, 0xc5, 0x59, 0x33, 0x83, 0xed, 0x2a, 0x37, 0x33, 0xd4, 0x6a, 0xd5, 0xa8, 0xaf,
	0x00, 0x86, 0xa8, 0x8b, 0x7a, 0x0a, 0x1d, 0xe3, 0x93, 0xaa, 0x17, 0xeb, 0xf9, 0xc0, 0x10, 0x1a,
	0x0c, 0x7f, 0x5b, 0x83, 0xdd, 0x15, 0x53, 0x7f, 0x9b, 0xad, 0xdf, 0x67, 0xbb, 0x7f, 0x7a, 0x77,
	0x5c, 0xfb, 0xcb, 0xbb, 0xe3, 0xda, 0xdf, 0xdf, 0x1d, 0xd7, 0x7e, 0xf7, 0xcf, 0xe3, 0x8f, 0x7e,
	0x59, 0x17, 0x99, 0x7a, 0xfd, 0xd1, 0x75, 0x93, 0xfe, 0x25, 0xfc, 0xe1, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xf8, 0x91, 0x69, 0x39, 0x77, 0x14, 0x00, 0x00,
}

func (m *TrackInfoSimple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackInfoSimple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackInfoSimple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GpsTime != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.GpsTime))
		i--
		dAtA[i] = 0x38
	}
	if m.RecvTime != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.RecvTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Lng != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.Lng))
		i--
		dAtA[i] = 0x28
	}
	if m.Lat != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.Lat))
		i--
		dAtA[i] = 0x20
	}
	if m.Direction != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x18
	}
	if m.Speed != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.Speed))
		i--
		dAtA[i] = 0x10
	}
	if m.Mileage != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.Mileage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TravelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TravelInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TravelInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DriveScore != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.DriveScore))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.StopPos != nil {
		{
			size, err := m.StopPos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.StartPos != nil {
		{
			size, err := m.StartPos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.SeqFaultCode) > 0 {
		for iNdEx := len(m.SeqFaultCode) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SeqFaultCode[iNdEx])
			copy(dAtA[i:], m.SeqFaultCode[iNdEx])
			i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.SeqFaultCode[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.BdCode) > 0 {
		i -= len(m.BdCode)
		copy(dAtA[i:], m.BdCode)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.BdCode)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.BdCount != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.BdCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.TotalSpeed != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TotalSpeed))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.PosCount != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.PosCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.MaxSpeed != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.MaxSpeed))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.AvgSpeed != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.AvgSpeed))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.StayId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.StayId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.StopEventId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.StopEventId))
		i--
		dAtA[i] = 0x78
	}
	if m.StartEventId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.StartEventId))
		i--
		dAtA[i] = 0x70
	}
	if len(m.StopPosDesc) > 0 {
		i -= len(m.StopPosDesc)
		copy(dAtA[i:], m.StopPosDesc)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.StopPosDesc)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.StartPosDesc) > 0 {
		i -= len(m.StartPosDesc)
		copy(dAtA[i:], m.StartPosDesc)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.StartPosDesc)))
		i--
		dAtA[i] = 0x62
	}
	if m.StopAcconCount != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.StopAcconCount))
		i--
		dAtA[i] = 0x58
	}
	if m.DecelerateCount != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.DecelerateCount))
		i--
		dAtA[i] = 0x50
	}
	if m.CelerateCount != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.CelerateCount))
		i--
		dAtA[i] = 0x48
	}
	if m.OverSpeedCount != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.OverSpeedCount))
		i--
		dAtA[i] = 0x40
	}
	if m.DrivePeriod != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.DrivePeriod))
		i--
		dAtA[i] = 0x38
	}
	if m.TravelPeriod != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TravelPeriod))
		i--
		dAtA[i] = 0x30
	}
	if m.TravelOil != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TravelOil))
		i--
		dAtA[i] = 0x28
	}
	if m.TravelMileage != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TravelMileage))
		i--
		dAtA[i] = 0x20
	}
	if m.IsCompleted {
		i--
		if m.IsCompleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.TravelId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TravelId))
		i--
		dAtA[i] = 0x10
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetHisTravelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHisTravelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHisTravelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageInfo != nil {
		{
			size, err := m.PageInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Limit != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x12
	}
	if m.DeviceId != nil {
		{
			size, err := m.DeviceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetHisTravelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHisTravelResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHisTravelResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageInfo != nil {
		{
			size, err := m.PageInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TravelList) > 0 {
		for iNdEx := len(m.TravelList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TravelList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStatisticsTravelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatisticsTravelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStatisticsTravelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SqlCondition) > 0 {
		for iNdEx := len(m.SqlCondition) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SqlCondition[iNdEx])
			copy(dAtA[i:], m.SqlCondition[iNdEx])
			i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.SqlCondition[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BeginTime) > 0 {
		i -= len(m.BeginTime)
		copy(dAtA[i:], m.BeginTime)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.BeginTime)))
		i--
		dAtA[i] = 0x12
	}
	if m.DeviceId != nil {
		{
			size, err := m.DeviceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStatisticsTravelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatisticsTravelResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStatisticsTravelResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x28
	}
	if m.SumScore != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.SumScore))
		i--
		dAtA[i] = 0x20
	}
	if m.SumTravelMileage != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.SumTravelMileage))
		i--
		dAtA[i] = 0x18
	}
	if m.SumTravelOil != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.SumTravelOil))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TravelDbInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TravelDbInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TravelDbInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsHide != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.IsHide))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.SharpTurnCount != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.SharpTurnCount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.PosCount != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.PosCount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.MaxSpeed != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.MaxSpeed))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.AvgSpeed != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.AvgSpeed))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.Score != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.TheDay != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TheDay))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.StayId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.StayId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.StopEventId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.StopEventId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.StartEventId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.StartEventId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.StartMileage != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.StartMileage))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.LocationFlag != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.LocationFlag))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.Enabled != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.Enabled))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.StopAccOnCount != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.StopAccOnCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.DrivePeriod != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.DrivePeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.TravelPeriod != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TravelPeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.DecelerateCount != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.DecelerateCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CelerateCount != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.CelerateCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.OverSpeedCount != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.OverSpeedCount))
		i--
		dAtA[i] = 0x78
	}
	if m.TravelOil != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TravelOil))
		i--
		dAtA[i] = 0x70
	}
	if m.TravelMileage != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TravelMileage))
		i--
		dAtA[i] = 0x68
	}
	if len(m.BdCode) > 0 {
		i -= len(m.BdCode)
		copy(dAtA[i:], m.BdCode)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.BdCode)))
		i--
		dAtA[i] = 0x62
	}
	if m.BdCount != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.BdCount))
		i--
		dAtA[i] = 0x58
	}
	if len(m.StopPos) > 0 {
		i -= len(m.StopPos)
		copy(dAtA[i:], m.StopPos)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.StopPos)))
		i--
		dAtA[i] = 0x52
	}
	if m.StopLat != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64((uint32(m.StopLat)<<1)^uint32((m.StopLat>>31))))
		i--
		dAtA[i] = 0x48
	}
	if m.StopLon != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64((uint32(m.StopLon)<<1)^uint32((m.StopLon>>31))))
		i--
		dAtA[i] = 0x40
	}
	if m.StopTime != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.StopTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.StartPos) > 0 {
		i -= len(m.StartPos)
		copy(dAtA[i:], m.StartPos)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.StartPos)))
		i--
		dAtA[i] = 0x32
	}
	if m.StartLat != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64((uint32(m.StartLat)<<1)^uint32((m.StartLat>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.StartLon != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64((uint32(m.StartLon)<<1)^uint32((m.StartLon>>31))))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x10
	}
	if m.RecId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.RecId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TravelEventDbInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TravelEventDbInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TravelEventDbInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TheDay != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TheDay))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.PushFlag != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.PushFlag))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.ParseFlag != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.ParseFlag))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.TravelOil != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TravelOil))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.TravelMileage != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TravelMileage))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.StopAccOnCount != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.StopAccOnCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.DecelerateCount != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.DecelerateCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.CelerateCount != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.CelerateCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.OverSpeedCount != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.OverSpeedCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.DrivePeriod != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.DrivePeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.TravelPeriod != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TravelPeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.BeginLat != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64((uint32(m.BeginLat)<<1)^uint32((m.BeginLat>>31))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.BeginLon != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64((uint32(m.BeginLon)<<1)^uint32((m.BeginLon>>31))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.BeginTime != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.BeginTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Hex) > 0 {
		i -= len(m.Hex)
		copy(dAtA[i:], m.Hex)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.Hex)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Ascii) > 0 {
		i -= len(m.Ascii)
		copy(dAtA[i:], m.Ascii)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.Ascii)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.CurLocation) > 0 {
		i -= len(m.CurLocation)
		copy(dAtA[i:], m.CurLocation)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.CurLocation)))
		i--
		dAtA[i] = 0x72
	}
	if m.GpsFlag != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.GpsFlag))
		i--
		dAtA[i] = 0x68
	}
	if m.GpsTime != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.GpsTime))
		i--
		dAtA[i] = 0x60
	}
	if m.OilNum != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.OilNum))
		i--
		dAtA[i] = 0x58
	}
	if m.Mileage != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.Mileage))
		i--
		dAtA[i] = 0x50
	}
	if m.Direct != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.Direct))
		i--
		dAtA[i] = 0x48
	}
	if m.Speed != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.Speed))
		i--
		dAtA[i] = 0x40
	}
	if m.Lat != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64((uint32(m.Lat)<<1)^uint32((m.Lat>>31))))
		i--
		dAtA[i] = 0x38
	}
	if m.Lon != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64((uint32(m.Lon)<<1)^uint32((m.Lon>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.RcvTime != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.RcvTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.EventDesc) > 0 {
		i -= len(m.EventDesc)
		copy(dAtA[i:], m.EventDesc)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.EventDesc)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventTypeId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.EventTypeId))
		i--
		dAtA[i] = 0x18
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x10
	}
	if m.RecId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.RecId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StopDetailDbInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopDetailDbInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopDetailDbInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GeoCode) > 0 {
		i -= len(m.GeoCode)
		copy(dAtA[i:], m.GeoCode)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.GeoCode)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.TheDay != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TheDay))
		i--
		dAtA[i] = 0x78
	}
	if len(m.CurLocation) > 0 {
		i -= len(m.CurLocation)
		copy(dAtA[i:], m.CurLocation)
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.CurLocation)))
		i--
		dAtA[i] = 0x72
	}
	if m.ParseFlag != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.ParseFlag))
		i--
		dAtA[i] = 0x68
	}
	if m.PreRunMileage != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.PreRunMileage))
		i--
		dAtA[i] = 0x60
	}
	if m.CurrentMileage != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.CurrentMileage))
		i--
		dAtA[i] = 0x58
	}
	if m.OrigUpId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.OrigUpId))
		i--
		dAtA[i] = 0x50
	}
	if m.MinuteSpan != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.MinuteSpan))
		i--
		dAtA[i] = 0x40
	}
	if m.StartGpsFlag != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.StartGpsFlag))
		i--
		dAtA[i] = 0x38
	}
	if m.StartLat != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64((uint32(m.StartLat)<<1)^uint32((m.StartLat>>31))))
		i--
		dAtA[i] = 0x30
	}
	if m.StartLon != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64((uint32(m.StartLon)<<1)^uint32((m.StartLon>>31))))
		i--
		dAtA[i] = 0x28
	}
	if m.StopTime != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.StopTime))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x10
	}
	if m.RecId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.RecId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MileAgeDetailDbInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MileAgeDetailDbInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MileAgeDetailDbInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TheDay != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TheDay))
		i--
		dAtA[i] = 0x68
	}
	if m.TotalValue != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TotalValue))
		i--
		dAtA[i] = 0x60
	}
	if m.Minutes != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.Minutes))
		i--
		dAtA[i] = 0x58
	}
	if m.EndTime != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x50
	}
	if m.StartTime != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x48
	}
	if m.TotalType != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TotalType))
		i--
		dAtA[i] = 0x40
	}
	if m.TotalDate != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TotalDate))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.TotalId))
		i--
		dAtA[i] = 0x30
	}
	if m.DriverId2 != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.DriverId2))
		i--
		dAtA[i] = 0x28
	}
	if m.DriverId1 != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.DriverId1))
		i--
		dAtA[i] = 0x20
	}
	if m.HoldId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.HoldId))
		i--
		dAtA[i] = 0x18
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x10
	}
	if m.DetailId != 0 {
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(m.DetailId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRealtimeTravelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRealtimeTravelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRealtimeTravelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ObjectList) > 0 {
		dAtA10 := make([]byte, len(m.ObjectList)*10)
		var j9 int
		for _, num := range m.ObjectList {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceList) > 0 {
		for iNdEx := len(m.DeviceList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeviceList[iNdEx])
			copy(dAtA[i:], m.DeviceList[iNdEx])
			i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(len(m.DeviceList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetRealtimeTravelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRealtimeTravelResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRealtimeTravelResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TravelList) > 0 {
		for iNdEx := len(m.TravelList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TravelList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasTravelData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMapgooPaasTravelData(dAtA []byte, offset int, v uint64) int {
	offset -= sovMapgooPaasTravelData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TrackInfoSimple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mileage != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.Mileage))
	}
	if m.Speed != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.Speed))
	}
	if m.Direction != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.Direction))
	}
	if m.Lat != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.Lat))
	}
	if m.Lng != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.Lng))
	}
	if m.RecvTime != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.RecvTime))
	}
	if m.GpsTime != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.GpsTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TravelInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.ObjectId))
	}
	if m.TravelId != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.TravelId))
	}
	if m.IsCompleted {
		n += 2
	}
	if m.TravelMileage != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.TravelMileage))
	}
	if m.TravelOil != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.TravelOil))
	}
	if m.TravelPeriod != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.TravelPeriod))
	}
	if m.DrivePeriod != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.DrivePeriod))
	}
	if m.OverSpeedCount != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.OverSpeedCount))
	}
	if m.CelerateCount != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.CelerateCount))
	}
	if m.DecelerateCount != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.DecelerateCount))
	}
	if m.StopAcconCount != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.StopAcconCount))
	}
	l = len(m.StartPosDesc)
	if l > 0 {
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	l = len(m.StopPosDesc)
	if l > 0 {
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if m.StartEventId != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.StartEventId))
	}
	if m.StopEventId != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.StopEventId))
	}
	if m.StayId != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.StayId))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 2 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if m.AvgSpeed != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.AvgSpeed))
	}
	if m.MaxSpeed != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.MaxSpeed))
	}
	if m.PosCount != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.PosCount))
	}
	if m.TotalSpeed != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.TotalSpeed))
	}
	if m.BdCount != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.BdCount))
	}
	l = len(m.BdCode)
	if l > 0 {
		n += 2 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if len(m.SeqFaultCode) > 0 {
		for _, s := range m.SeqFaultCode {
			l = len(s)
			n += 2 + l + sovMapgooPaasTravelData(uint64(l))
		}
	}
	if m.StartPos != nil {
		l = m.StartPos.Size()
		n += 2 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if m.StopPos != nil {
		l = m.StopPos.Size()
		n += 2 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if m.DriveScore != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.DriveScore))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetHisTravelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceId != nil {
		l = m.DeviceId.Size()
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.Limit))
	}
	if m.PageInfo != nil {
		l = m.PageInfo.Size()
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetHisTravelResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if len(m.TravelList) > 0 {
		for _, e := range m.TravelList {
			l = e.Size()
			n += 1 + l + sovMapgooPaasTravelData(uint64(l))
		}
	}
	if m.PageInfo != nil {
		l = m.PageInfo.Size()
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStatisticsTravelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceId != nil {
		l = m.DeviceId.Size()
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	l = len(m.BeginTime)
	if l > 0 {
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if len(m.SqlCondition) > 0 {
		for _, s := range m.SqlCondition {
			l = len(s)
			n += 1 + l + sovMapgooPaasTravelData(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStatisticsTravelResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if m.SumTravelOil != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.SumTravelOil))
	}
	if m.SumTravelMileage != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.SumTravelMileage))
	}
	if m.SumScore != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.SumScore))
	}
	if m.Count != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TravelDbInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecId != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.RecId))
	}
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.ObjectId))
	}
	if m.StartTime != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.StartTime))
	}
	if m.StartLon != 0 {
		n += 1 + sozMapgooPaasTravelData(uint64(m.StartLon))
	}
	if m.StartLat != 0 {
		n += 1 + sozMapgooPaasTravelData(uint64(m.StartLat))
	}
	l = len(m.StartPos)
	if l > 0 {
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if m.StopTime != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.StopTime))
	}
	if m.StopLon != 0 {
		n += 1 + sozMapgooPaasTravelData(uint64(m.StopLon))
	}
	if m.StopLat != 0 {
		n += 1 + sozMapgooPaasTravelData(uint64(m.StopLat))
	}
	l = len(m.StopPos)
	if l > 0 {
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if m.BdCount != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.BdCount))
	}
	l = len(m.BdCode)
	if l > 0 {
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if m.TravelMileage != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.TravelMileage))
	}
	if m.TravelOil != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.TravelOil))
	}
	if m.OverSpeedCount != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.OverSpeedCount))
	}
	if m.CelerateCount != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.CelerateCount))
	}
	if m.DecelerateCount != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.DecelerateCount))
	}
	if m.TravelPeriod != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.TravelPeriod))
	}
	if m.DrivePeriod != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.DrivePeriod))
	}
	if m.StopAccOnCount != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.StopAccOnCount))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 2 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if m.Enabled != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.Enabled))
	}
	if m.LocationFlag != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.LocationFlag))
	}
	if m.StartMileage != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.StartMileage))
	}
	if m.StartEventId != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.StartEventId))
	}
	if m.StopEventId != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.StopEventId))
	}
	if m.StayId != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.StayId))
	}
	if m.TheDay != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.TheDay))
	}
	if m.Score != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.Score))
	}
	if m.AvgSpeed != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.AvgSpeed))
	}
	if m.MaxSpeed != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.MaxSpeed))
	}
	if m.PosCount != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.PosCount))
	}
	if m.SharpTurnCount != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.SharpTurnCount))
	}
	if m.IsHide != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.IsHide))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TravelEventDbInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecId != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.RecId))
	}
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.ObjectId))
	}
	if m.EventTypeId != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.EventTypeId))
	}
	l = len(m.EventDesc)
	if l > 0 {
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if m.RcvTime != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.RcvTime))
	}
	if m.Lon != 0 {
		n += 1 + sozMapgooPaasTravelData(uint64(m.Lon))
	}
	if m.Lat != 0 {
		n += 1 + sozMapgooPaasTravelData(uint64(m.Lat))
	}
	if m.Speed != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.Speed))
	}
	if m.Direct != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.Direct))
	}
	if m.Mileage != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.Mileage))
	}
	if m.OilNum != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.OilNum))
	}
	if m.GpsTime != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.GpsTime))
	}
	if m.GpsFlag != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.GpsFlag))
	}
	l = len(m.CurLocation)
	if l > 0 {
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	l = len(m.Ascii)
	if l > 0 {
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	l = len(m.Hex)
	if l > 0 {
		n += 2 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if m.BeginTime != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.BeginTime))
	}
	if m.BeginLon != 0 {
		n += 2 + sozMapgooPaasTravelData(uint64(m.BeginLon))
	}
	if m.BeginLat != 0 {
		n += 2 + sozMapgooPaasTravelData(uint64(m.BeginLat))
	}
	if m.TravelPeriod != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.TravelPeriod))
	}
	if m.DrivePeriod != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.DrivePeriod))
	}
	if m.OverSpeedCount != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.OverSpeedCount))
	}
	if m.CelerateCount != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.CelerateCount))
	}
	if m.DecelerateCount != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.DecelerateCount))
	}
	if m.StopAccOnCount != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.StopAccOnCount))
	}
	if m.TravelMileage != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.TravelMileage))
	}
	if m.TravelOil != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.TravelOil))
	}
	if m.ParseFlag != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.ParseFlag))
	}
	if m.PushFlag != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.PushFlag))
	}
	if m.TheDay != 0 {
		n += 2 + sovMapgooPaasTravelData(uint64(m.TheDay))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StopDetailDbInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecId != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.RecId))
	}
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.ObjectId))
	}
	if m.StartTime != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.StartTime))
	}
	if m.StopTime != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.StopTime))
	}
	if m.StartLon != 0 {
		n += 1 + sozMapgooPaasTravelData(uint64(m.StartLon))
	}
	if m.StartLat != 0 {
		n += 1 + sozMapgooPaasTravelData(uint64(m.StartLat))
	}
	if m.StartGpsFlag != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.StartGpsFlag))
	}
	if m.MinuteSpan != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.MinuteSpan))
	}
	if m.OrigUpId != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.OrigUpId))
	}
	if m.CurrentMileage != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.CurrentMileage))
	}
	if m.PreRunMileage != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.PreRunMileage))
	}
	if m.ParseFlag != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.ParseFlag))
	}
	l = len(m.CurLocation)
	if l > 0 {
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if m.TheDay != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.TheDay))
	}
	l = len(m.GeoCode)
	if l > 0 {
		n += 2 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MileAgeDetailDbInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetailId != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.DetailId))
	}
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.ObjectId))
	}
	if m.HoldId != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.HoldId))
	}
	if m.DriverId1 != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.DriverId1))
	}
	if m.DriverId2 != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.DriverId2))
	}
	if m.TotalId != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.TotalId))
	}
	if m.TotalDate != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.TotalDate))
	}
	if m.TotalType != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.TotalType))
	}
	if m.StartTime != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.EndTime))
	}
	if m.Minutes != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.Minutes))
	}
	if m.TotalValue != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.TotalValue))
	}
	if m.TheDay != 0 {
		n += 1 + sovMapgooPaasTravelData(uint64(m.TheDay))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRealtimeTravelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeviceList) > 0 {
		for _, s := range m.DeviceList {
			l = len(s)
			n += 1 + l + sovMapgooPaasTravelData(uint64(l))
		}
	}
	if len(m.ObjectList) > 0 {
		l = 0
		for _, e := range m.ObjectList {
			l += sovMapgooPaasTravelData(uint64(e))
		}
		n += 1 + sovMapgooPaasTravelData(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRealtimeTravelResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasTravelData(uint64(l))
	}
	if len(m.TravelList) > 0 {
		for _, e := range m.TravelList {
			l = e.Size()
			n += 1 + l + sovMapgooPaasTravelData(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMapgooPaasTravelData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMapgooPaasTravelData(x uint64) (n int) {
	return sovMapgooPaasTravelData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TrackInfoSimple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasTravelData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackInfoSimple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackInfoSimple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mileage", wireType)
			}
			m.Mileage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mileage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			m.Speed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Speed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			m.Lat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			m.Lng = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lng |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvTime", wireType)
			}
			m.RecvTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecvTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpsTime", wireType)
			}
			m.GpsTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GpsTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasTravelData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TravelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasTravelData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TravelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TravelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TravelId", wireType)
			}
			m.TravelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TravelId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCompleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCompleted = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TravelMileage", wireType)
			}
			m.TravelMileage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TravelMileage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TravelOil", wireType)
			}
			m.TravelOil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TravelOil |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TravelPeriod", wireType)
			}
			m.TravelPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TravelPeriod |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrivePeriod", wireType)
			}
			m.DrivePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrivePeriod |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverSpeedCount", wireType)
			}
			m.OverSpeedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverSpeedCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CelerateCount", wireType)
			}
			m.CelerateCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CelerateCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecelerateCount", wireType)
			}
			m.DecelerateCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecelerateCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopAcconCount", wireType)
			}
			m.StopAcconCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StopAcconCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPosDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartPosDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopPosDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StopPosDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartEventId", wireType)
			}
			m.StartEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartEventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopEventId", wireType)
			}
			m.StopEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StopEventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StayId", wireType)
			}
			m.StayId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StayId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgSpeed", wireType)
			}
			m.AvgSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvgSpeed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSpeed", wireType)
			}
			m.MaxSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSpeed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosCount", wireType)
			}
			m.PosCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSpeed", wireType)
			}
			m.TotalSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSpeed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BdCount", wireType)
			}
			m.BdCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BdCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BdCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BdCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqFaultCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeqFaultCode = append(m.SeqFaultCode, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartPos == nil {
				m.StartPos = &TrackInfoSimple{}
			}
			if err := m.StartPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StopPos == nil {
				m.StopPos = &TrackInfoSimple{}
			}
			if err := m.StopPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriveScore", wireType)
			}
			m.DriveScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DriveScore |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasTravelData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHisTravelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasTravelData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHisTravelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHisTravelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceId == nil {
				m.DeviceId = &DeviceId{}
			}
			if err := m.DeviceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageInfo == nil {
				m.PageInfo = &PageBaseInfo{}
			}
			if err := m.PageInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasTravelData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHisTravelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasTravelData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHisTravelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHisTravelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TravelList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TravelList = append(m.TravelList, &TravelInfo{})
			if err := m.TravelList[len(m.TravelList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageInfo == nil {
				m.PageInfo = &PageBaseInfo{}
			}
			if err := m.PageInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasTravelData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatisticsTravelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasTravelData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStatisticsTravelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStatisticsTravelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceId == nil {
				m.DeviceId = &DeviceId{}
			}
			if err := m.DeviceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SqlCondition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SqlCondition = append(m.SqlCondition, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasTravelData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatisticsTravelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasTravelData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStatisticsTravelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStatisticsTravelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumTravelOil", wireType)
			}
			m.SumTravelOil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SumTravelOil |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumTravelMileage", wireType)
			}
			m.SumTravelMileage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SumTravelMileage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumScore", wireType)
			}
			m.SumScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SumScore |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasTravelData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TravelDbInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasTravelData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TravelDbInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TravelDbInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecId", wireType)
			}
			m.RecId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartLon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.StartLon = v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartLat", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.StartLat = v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartPos = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopTime", wireType)
			}
			m.StopTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StopTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopLon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.StopLon = v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopLat", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.StopLat = v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopPos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StopPos = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BdCount", wireType)
			}
			m.BdCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BdCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BdCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BdCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TravelMileage", wireType)
			}
			m.TravelMileage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TravelMileage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TravelOil", wireType)
			}
			m.TravelOil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TravelOil |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverSpeedCount", wireType)
			}
			m.OverSpeedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverSpeedCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CelerateCount", wireType)
			}
			m.CelerateCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CelerateCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecelerateCount", wireType)
			}
			m.DecelerateCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecelerateCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TravelPeriod", wireType)
			}
			m.TravelPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TravelPeriod |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrivePeriod", wireType)
			}
			m.DrivePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrivePeriod |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopAccOnCount", wireType)
			}
			m.StopAccOnCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StopAccOnCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			m.Enabled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enabled |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationFlag", wireType)
			}
			m.LocationFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocationFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartMileage", wireType)
			}
			m.StartMileage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartMileage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartEventId", wireType)
			}
			m.StartEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartEventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopEventId", wireType)
			}
			m.StopEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StopEventId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StayId", wireType)
			}
			m.StayId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StayId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheDay", wireType)
			}
			m.TheDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TheDay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgSpeed", wireType)
			}
			m.AvgSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvgSpeed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSpeed", wireType)
			}
			m.MaxSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSpeed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosCount", wireType)
			}
			m.PosCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharpTurnCount", wireType)
			}
			m.SharpTurnCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SharpTurnCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHide", wireType)
			}
			m.IsHide = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsHide |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasTravelData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TravelEventDbInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasTravelData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TravelEventDbInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TravelEventDbInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecId", wireType)
			}
			m.RecId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTypeId", wireType)
			}
			m.EventTypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventTypeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvTime", wireType)
			}
			m.RcvTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcvTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Lon = v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Lat = v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			m.Speed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Speed |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direct", wireType)
			}
			m.Direct = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direct |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mileage", wireType)
			}
			m.Mileage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mileage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OilNum", wireType)
			}
			m.OilNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OilNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpsTime", wireType)
			}
			m.GpsTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GpsTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpsFlag", wireType)
			}
			m.GpsFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GpsFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ascii", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ascii = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			m.BeginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginLon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BeginLon = v
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginLat", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.BeginLat = v
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TravelPeriod", wireType)
			}
			m.TravelPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TravelPeriod |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrivePeriod", wireType)
			}
			m.DrivePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrivePeriod |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverSpeedCount", wireType)
			}
			m.OverSpeedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverSpeedCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CelerateCount", wireType)
			}
			m.CelerateCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CelerateCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecelerateCount", wireType)
			}
			m.DecelerateCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecelerateCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopAccOnCount", wireType)
			}
			m.StopAccOnCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StopAccOnCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TravelMileage", wireType)
			}
			m.TravelMileage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TravelMileage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TravelOil", wireType)
			}
			m.TravelOil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TravelOil |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParseFlag", wireType)
			}
			m.ParseFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParseFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushFlag", wireType)
			}
			m.PushFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheDay", wireType)
			}
			m.TheDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TheDay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasTravelData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopDetailDbInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasTravelData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopDetailDbInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopDetailDbInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecId", wireType)
			}
			m.RecId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopTime", wireType)
			}
			m.StopTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StopTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartLon", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.StartLon = v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartLat", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.StartLat = v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartGpsFlag", wireType)
			}
			m.StartGpsFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartGpsFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinuteSpan", wireType)
			}
			m.MinuteSpan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinuteSpan |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigUpId", wireType)
			}
			m.OrigUpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrigUpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentMileage", wireType)
			}
			m.CurrentMileage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentMileage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreRunMileage", wireType)
			}
			m.PreRunMileage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreRunMileage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParseFlag", wireType)
			}
			m.ParseFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParseFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheDay", wireType)
			}
			m.TheDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TheDay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GeoCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasTravelData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MileAgeDetailDbInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasTravelData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MileAgeDetailDbInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MileAgeDetailDbInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailId", wireType)
			}
			m.DetailId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DetailId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldId", wireType)
			}
			m.HoldId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId1", wireType)
			}
			m.DriverId1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DriverId1 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverId2", wireType)
			}
			m.DriverId2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DriverId2 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalId", wireType)
			}
			m.TotalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDate", wireType)
			}
			m.TotalDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalType", wireType)
			}
			m.TotalType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minutes", wireType)
			}
			m.Minutes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minutes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalValue", wireType)
			}
			m.TotalValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalValue |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheDay", wireType)
			}
			m.TheDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TheDay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasTravelData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRealtimeTravelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasTravelData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRealtimeTravelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRealtimeTravelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceList = append(m.DeviceList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapgooPaasTravelData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ObjectList = append(m.ObjectList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapgooPaasTravelData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMapgooPaasTravelData
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMapgooPaasTravelData
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ObjectList) == 0 {
					m.ObjectList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMapgooPaasTravelData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ObjectList = append(m.ObjectList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasTravelData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRealtimeTravelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasTravelData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRealtimeTravelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRealtimeTravelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TravelList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TravelList = append(m.TravelList, &TravelInfo{})
			if err := m.TravelList[len(m.TravelList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasTravelData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasTravelData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMapgooPaasTravelData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMapgooPaasTravelData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapgooPaasTravelData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMapgooPaasTravelData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMapgooPaasTravelData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMapgooPaasTravelData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMapgooPaasTravelData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMapgooPaasTravelData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMapgooPaasTravelData = fmt.Errorf("proto: unexpected end of group")
)

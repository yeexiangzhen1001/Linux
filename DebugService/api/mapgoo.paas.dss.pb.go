// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mapgoo.paas.dss.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("mapgoo.paas.dss.proto", fileDescriptor_eb82cd417030e0d7) }

var fileDescriptor_eb82cd417030e0d7 = []byte{
	// 1163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x98, 0x5d, 0x6f, 0x5b, 0x35,
	0x18, 0xc7, 0xf1, 0xca, 0x9b, 0xdc, 0x6d, 0x69, 0x4f, 0x9b, 0xbe, 0xa4, 0x5d, 0x60, 0x5e, 0x07,
	0x5b, 0x47, 0x13, 0x36, 0xbe, 0x41, 0x9b, 0x2a, 0x4c, 0xe2, 0x22, 0xea, 0xe9, 0xb8, 0xe0, 0xce,
	0xcb, 0xf1, 0xc2, 0x81, 0xe4, 0xd8, 0xd8, 0xce, 0x11, 0xbd, 0x99, 0xd0, 0x24, 0x26, 0x84, 0xd0,
	0x2e, 0x06, 0x42, 0x68, 0x17, 0x48, 0xdc, 0xf0, 0x59, 0xb8, 0x44, 0xe2, 0x0b, 0xa0, 0xc2, 0x07,
	0x99, 0xec, 0x9c, 0x93, 0xd8, 0xc7, 0xc7, 0x27, 0xc9, 0x65, 0xed, 0xdf, 0xf1, 0xff, 0xef, 0xc7,
	0x7e, 0x9e, 0x3c, 0x2e, 0xac, 0x8f, 0x30, 0x1b, 0x50, 0xda, 0x62, 0x18, 0x8b, 0x56, 0x24, 0x44,
	0x8b, 0x71, 0x2a, 0x69, 0x50, 0x2b, 0x0c, 0x37, 0xf6, 0x07, 0x94, 0x0e, 0x86, 0xa4, 0x8d, 0x59,
	0xdc, 0xc6, 0x49, 0x42, 0x25, 0x96, 0x31, 0x4d, 0x32, 0xbc, 0xb1, 0x65, 0xe2, 0x8f, 0xb1, 0x20,
	0xd9, 0xf8, 0x0d, 0x73, 0x5c, 0x72, 0x9c, 0x92, 0x61, 0x2b, 0xc2, 0x12, 0x97, 0x4d, 0x0b, 0x89,
	0xe5, 0x58, 0x98, 0xd3, 0x7b, 0xe6, 0xf4, 0x30, 0x4e, 0x89, 0x39, 0xb9, 0x6f, 0x4e, 0xa6, 0x71,
	0x44, 0xa8, 0x31, 0xfb, 0xe0, 0xf9, 0x01, 0x5c, 0xe9, 0x84, 0x61, 0xf0, 0x14, 0x5e, 0x1d, 0x10,
	0xf9, 0x69, 0x2c, 0xce, 0xb5, 0x78, 0x70, 0xa7, 0xe5, 0x73, 0xd4, 0x35, 0xb0, 0x33, 0xf2, 0x4d,
	0xe3, 0xee, 0x82, 0xa4, 0x60, 0x68, 0xf7, 0xd9, 0x3f, 0xff, 0xff, 0x7c, 0x65, 0x03, 0xad, 0xb7,
	0x23, 0x21, 0xda, 0x96, 0xde, 0x2b, 0x00, 0x37, 0x06, 0x44, 0x86, 0x2a, 0x5c, 0x42, 0xc6, 0xfd,
	0x7c, 0xbc, 0x5d, 0xb5, 0x7a, 0x91, 0x56, 0x76, 0x3e, 0x5e, 0xee, 0x03, 0xc1, 0xd0, 0xfb, 0xda,
	0x55, 0x03, 0xed, 0xe4, 0xae, 0x1c, 0x13, 0x3f, 0x02, 0x58, 0x1b, 0x10, 0xd9, 0xe1, 0x71, 0x1a,
	0x27, 0x83, 0xb0, 0x4f, 0x39, 0x09, 0xee, 0xb5, 0x7c, 0x67, 0xd2, 0xb5, 0x49, 0x65, 0xea, 0xa3,
	0xc5, 0x61, 0xc1, 0xd0, 0xbe, 0x36, 0xb4, 0x85, 0x36, 0x73, 0x43, 0x96, 0xf0, 0xaf, 0x00, 0x06,
	0x63, 0x16, 0x61, 0x49, 0x3a, 0x24, 0x8d, 0xfb, 0x24, 0xd4, 0xab, 0x05, 0x2d, 0xaf, 0xc4, 0x23,
	0x07, 0x56, 0x96, 0xda, 0x4b, 0xf1, 0x82, 0xa1, 0xf7, 0xb4, 0xab, 0x5d, 0xb4, 0xad, 0x5d, 0x95,
	0x38, 0x78, 0x01, 0xe0, 0x7a, 0x66, 0x96, 0x9c, 0xa6, 0x24, 0x91, 0x0f, 0x93, 0x27, 0xb4, 0x10,
	0xa7, 0xd9, 0xe5, 0xec, 0x16, 0x49, 0x37, 0x4e, 0x95, 0xb0, 0x60, 0xa8, 0xa9, 0x1d, 0xed, 0xa0,
	0x2d, 0x33, 0x4e, 0x86, 0xf4, 0x4b, 0x00, 0x03, 0x81, 0x53, 0x52, 0x18, 0xf6, 0x89, 0x84, 0x0e,
	0xaa, 0x2c, 0x1d, 0x2d, 0x41, 0x3b, 0x51, 0x2a, 0x51, 0x7f, 0x06, 0xe0, 0x75, 0x65, 0x55, 0x47,
	0x4e, 0x0f, 0x17, 0x72, 0xcd, 0xde, 0xf5, 0x0c, 0x73, 0x73, 0xcd, 0x4f, 0x0a, 0x86, 0xf6, 0xb4,
	0x91, 0x3a, 0xda, 0x98, 0x06, 0xc7, 0x50, 0x7c, 0x0e, 0x60, 0x4d, 0x7b, 0x33, 0xc6, 0xee, 0x56,
	0x6d, 0xd4, 0xb6, 0x71, 0xb8, 0x28, 0xea, 0x5c, 0xe6, 0xa2, 0xe8, 0x13, 0xf8, 0x4e, 0x98, 0x60,
	0x76, 0x32, 0x8a, 0x82, 0x9b, 0xbe, 0x45, 0x27, 0xf3, 0x4a, 0x17, 0xcd, 0x43, 0x04, 0x43, 0x9b,
	0x5a, 0xef, 0x3a, 0xba, 0x3a, 0xd1, 0xcb, 0x16, 0x57, 0x57, 0xe1, 0x8c, 0x30, 0xca, 0xe5, 0x31,
	0x8e, 0x3e, 0x57, 0x45, 0xb0, 0xf2, 0x2a, 0xb8, 0x68, 0xd5, 0x55, 0x28, 0xa3, 0x9d, 0xab, 0xc0,
	0x5d, 0xf5, 0x14, 0xae, 0x76, 0x89, 0x3c, 0x8f, 0x47, 0xe4, 0xb3, 0x38, 0x21, 0xc1, 0x6d, 0xff,
	0xe1, 0xe6, 0x8c, 0x72, 0xf1, 0xc1, 0x22, 0x98, 0x60, 0x68, 0x47, 0xcb, 0x07, 0x68, 0x2d, 0xbf,
	0x00, 0x53, 0xa1, 0xaf, 0xe0, 0xbb, 0x5d, 0x22, 0x1f, 0x26, 0x11, 0xf9, 0x36, 0x40, 0xfe, 0xd5,
	0x34, 0xa0, 0x14, 0x6f, 0xcd, 0x65, 0x04, 0x43, 0x75, 0x2d, 0x57, 0x43, 0xd7, 0x72, 0xb9, 0xc9,
	0xfa, 0x29, 0x5c, 0x7d, 0xc4, 0x86, 0x14, 0x47, 0x93, 0x3f, 0x7d, 0x7b, 0x34, 0x98, 0xaa, 0x3d,
	0x5a, 0x98, 0xb3, 0xc7, 0xb1, 0x21, 0xf4, 0x3b, 0x80, 0xf5, 0x2e, 0x91, 0x67, 0xa4, 0x4f, 0x79,
	0x44, 0x78, 0x07, 0x5f, 0x84, 0xe3, 0xd1, 0x08, 0xf3, 0x8b, 0xc2, 0x2f, 0x8a, 0xb5, 0x1b, 0x97,
	0x76, 0x7f, 0x51, 0xe6, 0x7e, 0x20, 0x18, 0x42, 0xda, 0xd6, 0x3e, 0x6a, 0xe4, 0xb1, 0x28, 0xb1,
	0xa1, 0x0c, 0xaa, 0x7c, 0x39, 0x19, 0xd2, 0x71, 0x14, 0x4a, 0xca, 0xf1, 0x80, 0x4c, 0xac, 0xb7,
	0x2b, 0xb2, 0xcb, 0xa1, 0xab, 0x0c, 0x7a, 0x3e, 0x70, 0x0c, 0x8a, 0x52, 0x1b, 0xaf, 0x00, 0xdc,
	0xec, 0x12, 0xe9, 0x4e, 0xb4, 0xfc, 0xf1, 0x28, 0xb5, 0xd7, 0x5e, 0x8a, 0x17, 0x0c, 0xdd, 0xd4,
	0xee, 0xf6, 0xd0, 0x6e, 0x1e, 0x3e, 0xd7, 0x03, 0x87, 0xf0, 0x8c, 0x8c, 0xa8, 0x24, 0xbd, 0x21,
	0xbe, 0x08, 0x0e, 0xbc, 0x89, 0x99, 0x23, 0xca, 0xc7, 0xed, 0x05, 0x28, 0xc1, 0xd0, 0xb6, 0x56,
	0x5f, 0x47, 0xb5, 0x2c, 0x6d, 0xa7, 0x2a, 0xaa, 0x72, 0x87, 0x92, 0x32, 0x43, 0xd8, 0x57, 0xb9,
	0x6d, 0xac, 0xaa, 0x72, 0x17, 0x49, 0xa7, 0x72, 0x0b, 0x5b, 0xf1, 0x4f, 0x00, 0xb7, 0x3b, 0x64,
	0x48, 0x64, 0xc9, 0x89, 0xdd, 0xf7, 0x68, 0x78, 0x78, 0x65, 0xeb, 0xc1, 0xb2, 0x9f, 0x08, 0x86,
	0x0e, 0xb4, 0xbf, 0x26, 0xda, 0xd7, 0xfe, 0x22, 0x8f, 0x99, 0xa7, 0xf0, 0x9a, 0xba, 0x7f, 0xa1,
	0x48, 0xe3, 0x48, 0x57, 0xbb, 0x0f, 0x2b, 0x6e, 0xe9, 0x94, 0x52, 0x9e, 0xee, 0x2c, 0x06, 0x0a,
	0x86, 0x1a, 0xda, 0xc9, 0x26, 0x0a, 0xb4, 0x13, 0x5b, 0xee, 0x05, 0x80, 0x6b, 0x3a, 0x43, 0xf1,
	0x50, 0xc6, 0x23, 0x72, 0xce, 0x71, 0xff, 0xeb, 0xa0, 0xb2, 0x0f, 0xb3, 0x50, 0xb7, 0xde, 0x57,
	0xd3, 0x82, 0xa1, 0x1b, 0xda, 0xcd, 0x36, 0xaa, 0x6b, 0x37, 0x8e, 0xf6, 0x4b, 0x00, 0xd7, 0xed,
	0x41, 0xd5, 0x5a, 0x1e, 0x55, 0xb5, 0xab, 0x36, 0xab, 0x2c, 0xb5, 0x96, 0xc1, 0x9d, 0x16, 0xc9,
	0x95, 0x57, 0xcd, 0xa4, 0x1e, 0x1d, 0xc4, 0x34, 0x51, 0x71, 0x3b, 0xbe, 0xe8, 0x12, 0x5a, 0xd1,
	0x4c, 0xba, 0x70, 0x75, 0x33, 0x59, 0xc6, 0x3b, 0xbf, 0x8d, 0x25, 0x0e, 0x38, 0x5c, 0x0d, 0x49,
	0x12, 0x9d, 0xd0, 0xd1, 0x08, 0x27, 0x51, 0x70, 0xcb, 0x2b, 0x90, 0x11, 0xca, 0xc5, 0xc1, 0x7c,
	0xc8, 0xf9, 0xcd, 0x30, 0x45, 0x54, 0x9b, 0x3f, 0x79, 0xb3, 0x48, 0xca, 0x2f, 0x26, 0xa7, 0x56,
	0xd9, 0xe6, 0x9b, 0xe4, 0xdc, 0x36, 0xdf, 0x86, 0x9d, 0xce, 0xa8, 0x28, 0xfc, 0x1d, 0x98, 0x24,
	0xd0, 0xac, 0x5d, 0xb0, 0xf3, 0xc2, 0x78, 0xc9, 0x59, 0x98, 0x5b, 0x6c, 0xfc, 0x64, 0x69, 0x0a,
	0xcd, 0x04, 0x7f, 0x00, 0xb0, 0x16, 0x12, 0xcc, 0xfb, 0x5f, 0xce, 0xc6, 0x0e, 0xbd, 0x4b, 0xdb,
	0xa0, 0xb2, 0x71, 0x6f, 0x61, 0xd6, 0x89, 0x46, 0x51, 0xf6, 0x27, 0x00, 0xd7, 0xa6, 0xe6, 0x4e,
	0x39, 0x3f, 0xa1, 0x51, 0xf1, 0x09, 0x56, 0xb6, 0xcd, 0x8c, 0x74, 0xcf, 0xa6, 0x12, 0x76, 0x72,
	0xd9, 0x51, 0x56, 0x87, 0xd3, 0x21, 0xc3, 0xcc, 0x9f, 0x2a, 0x77, 0xde, 0xc3, 0xb1, 0xb0, 0xca,
	0xc3, 0x29, 0x90, 0xce, 0xe1, 0xd8, 0x82, 0xbf, 0x00, 0x18, 0x18, 0x51, 0x3a, 0xe5, 0x5c, 0x07,
	0xea, 0x68, 0x81, 0x98, 0x67, 0xac, 0x5b, 0x4f, 0xe6, 0xe0, 0x4e, 0xde, 0x96, 0xe8, 0xe7, 0x4f,
	0x65, 0xdd, 0xe3, 0x9f, 0xd1, 0xb1, 0x24, 0x7c, 0xce, 0x53, 0xd9, 0x20, 0xe7, 0x3f, 0x95, 0x2d,
	0x78, 0x76, 0x6b, 0x82, 0x4d, 0xfb, 0x95, 0x93, 0x09, 0xff, 0x01, 0xe0, 0x96, 0x3a, 0xbb, 0x92,
	0xf6, 0xab, 0xaa, 0x67, 0x2a, 0x6f, 0x03, 0xef, 0x2f, 0xf9, 0x85, 0xd9, 0x66, 0xe5, 0x97, 0xa8,
	0xc4, 0xc8, 0xf7, 0x93, 0xa2, 0x63, 0xbd, 0xa4, 0xe7, 0x3e, 0xf3, 0x66, 0xcf, 0xf8, 0xc3, 0x45,
	0x51, 0xb3, 0xb1, 0xc8, 0xea, 0x8d, 0x09, 0x1c, 0xd7, 0xff, 0xba, 0x6c, 0x82, 0xbf, 0x2f, 0x9b,
	0xe0, 0xdf, 0xcb, 0x26, 0xf8, 0xed, 0xbf, 0xe6, 0x1b, 0x5f, 0xac, 0x60, 0x16, 0xf7, 0x40, 0xef,
	0x4a, 0x6f, 0xa5, 0xf7, 0x66, 0xef, 0xad, 0xc7, 0x6f, 0xeb, 0x7f, 0x18, 0x7d, 0xf2, 0x3a, 0x00,
	0x00, 0xff, 0xff, 0x49, 0x12, 0x78, 0xcf, 0x09, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DSSClient is the client API for DSS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DSSClient interface {
	//获取历史行程
	GetHisTravel(ctx context.Context, in *GetHisTravelReq, opts ...grpc.CallOption) (*GetHisTravelResp, error)
	//获取行程统计信息
	GetStatisticsTravel(ctx context.Context, in *GetStatisticsTravelReq, opts ...grpc.CallOption) (*GetStatisticsTravelResp, error)
	//获取驾驶评分
	GetDrivingScore(ctx context.Context, in *GetDrivingScoreReq, opts ...grpc.CallOption) (*GetDrivingScoreResp, error)
	//更新定位表信息
	UpdateDeviceStatus(ctx context.Context, in *UpdateDeviceStatusReq, opts ...grpc.CallOption) (*UpdateDeviceStatusResp, error)
	//查询事件标签
	GetDriveEventInfo(ctx context.Context, in *GetDriveEventInfoReq, opts ...grpc.CallOption) (*GetDriveEventInfoResp, error)
	//保存事件标签
	SaveDriveEventInfo(ctx context.Context, in *SaveDriveEventInfoReq, opts ...grpc.CallOption) (*SaveDriveEventInfoResp, error)
	//设备事件信息
	GetDeviceEvent(ctx context.Context, in *GetDeviceEventReq, opts ...grpc.CallOption) (*GetDeviceEventResp, error)
	//保存事件信息
	SaveDeviceEvent(ctx context.Context, in *SaveDeviceEventReq, opts ...grpc.CallOption) (*SaveDeviceEventResp, error)
	//统计查询图片/视频抓拍
	SnapCmd(ctx context.Context, in *SnapCmdReq, opts ...grpc.CallOption) (*SnapCmdResp, error)
	//上报视频异常信息
	ReportBadVideoInfo(ctx context.Context, in *ReportBadVideoInfoReq, opts ...grpc.CallOption) (*ReportBadVideoInfoResp, error)
	//分页查询APP拉取时间戳
	GetTimeLine(ctx context.Context, in *GetTimeLineReq, opts ...grpc.CallOption) (*GetTimeLineResp, error)
	// APP拉取文件列表
	GetIndex(ctx context.Context, in *GetIndexReq, opts ...grpc.CallOption) (*GetIndexResp, error)
	//设备端视频文件上传
	UploadIndex(ctx context.Context, in *UploadIndexReq, opts ...grpc.CallOption) (*UploadIndexResp, error)
	//分页查询获取云记录仪视频日历
	GetRecorderDaySummary(ctx context.Context, in *GetRecorderDaySummaryReq, opts ...grpc.CallOption) (*GetRecorderDaySummaryResp, error)
	//保存目录树
	SaveCloudStorageIndex(ctx context.Context, in *SaveCloudStorageIndexReq, opts ...grpc.CallOption) (*SaveCloudStorageIndexResp, error)
	//增量拉取目录树
	GetCloudStorageIndex(ctx context.Context, in *GetCloudStorageIndexReq, opts ...grpc.CallOption) (*GetCloudStorageIndexResp, error)
	//开始远程调阅
	RemotePlay(ctx context.Context, in *RemotePlayReq, opts ...grpc.CallOption) (*RemotePlayResp, error)
	//停止远程调阅
	StopRemotePlay(ctx context.Context, in *StopRemotePlayReq, opts ...grpc.CallOption) (*StopRemotePlayResp, error)
	//删除本地目录树
	DeleteCloudStorageIndex(ctx context.Context, in *DeleteCloudStorageIndexReq, opts ...grpc.CallOption) (*DeleteCloudStorageIndexResp, error)
	//保存直播信息
	SaveSsvidInfo(ctx context.Context, in *SaveSsvidInfoReq, opts ...grpc.CallOption) (*SaveSsvidInfoResp, error)
	//获取实时轨迹信息
	GetRealtimeTrack(ctx context.Context, in *GetRealtimeTrackReq, opts ...grpc.CallOption) (*GetRealtimeTrackResp, error)
	//获取设备实时行程
	GetRealtimeTravel(ctx context.Context, in *GetRealtimeTravelReq, opts ...grpc.CallOption) (*GetRealtimeTravelResp, error)
	//获取经纬度省市区
	GetRegionInfoByGeo(ctx context.Context, in *GetRegionInfoByGeoReq, opts ...grpc.CallOption) (*GetRegionInfoByGeoResp, error)
	//发送指令
	SendCommand(ctx context.Context, in *CommandReq, opts ...grpc.CallOption) (*CommandResp, error)
	//获取历史轨迹信息
	GetHistoryTrack(ctx context.Context, in *GetHistoryTrackReq, opts ...grpc.CallOption) (*GetHistoryTrackResp, error)
	//视频编码信息上报
	SaveVideoInfo(ctx context.Context, in *SaveVideoInfoReq, opts ...grpc.CallOption) (*SaveVideoInfoResp, error)
	//查询视频信息
	SearchVideoInfo(ctx context.Context, in *SearchVideoInfoReq, opts ...grpc.CallOption) (*SearchVideoInfoResp, error)
	//上报视频错误码信息
	SaveVideoErrCode(ctx context.Context, in *SaveVideoErrCodeReq, opts ...grpc.CallOption) (*SaveVideoErrCodeResp, error)
	//删除
	DelVideoIndex(ctx context.Context, in *DelVideoIndexReq, opts ...grpc.CallOption) (*DelVideoIndexResp, error)
	//查询错误码
	SearchVideoErrInfo(ctx context.Context, in *SearchVideoErrInfoReq, opts ...grpc.CallOption) (*SearchVideoErrInfoResp, error)
	//获取设备实时路由信息
	GetDeviceRouter(ctx context.Context, in *GetDeviceRouterReq, opts ...grpc.CallOption) (*GetDeviceRouterResp, error)
	//保存记录仪视频日历（有则更新无则新增）
	SaveRecorderDaySummary(ctx context.Context, in *SaveRecorderDaySummaryReq, opts ...grpc.CallOption) (*SaveRecorderDaySummaryResp, error)
	//获取设备状态
	GetDeviceStatus(ctx context.Context, in *GetDeviceStatusReq, opts ...grpc.CallOption) (*GetDeviceStatusResp, error)
}

type dSSClient struct {
	cc *grpc.ClientConn
}

func NewDSSClient(cc *grpc.ClientConn) DSSClient {
	return &dSSClient{cc}
}

func (c *dSSClient) GetHisTravel(ctx context.Context, in *GetHisTravelReq, opts ...grpc.CallOption) (*GetHisTravelResp, error) {
	out := new(GetHisTravelResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/getHisTravel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) GetStatisticsTravel(ctx context.Context, in *GetStatisticsTravelReq, opts ...grpc.CallOption) (*GetStatisticsTravelResp, error) {
	out := new(GetStatisticsTravelResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/getStatisticsTravel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) GetDrivingScore(ctx context.Context, in *GetDrivingScoreReq, opts ...grpc.CallOption) (*GetDrivingScoreResp, error) {
	out := new(GetDrivingScoreResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/getDrivingScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) UpdateDeviceStatus(ctx context.Context, in *UpdateDeviceStatusReq, opts ...grpc.CallOption) (*UpdateDeviceStatusResp, error) {
	out := new(UpdateDeviceStatusResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/updateDeviceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) GetDriveEventInfo(ctx context.Context, in *GetDriveEventInfoReq, opts ...grpc.CallOption) (*GetDriveEventInfoResp, error) {
	out := new(GetDriveEventInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/getDriveEventInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) SaveDriveEventInfo(ctx context.Context, in *SaveDriveEventInfoReq, opts ...grpc.CallOption) (*SaveDriveEventInfoResp, error) {
	out := new(SaveDriveEventInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/saveDriveEventInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) GetDeviceEvent(ctx context.Context, in *GetDeviceEventReq, opts ...grpc.CallOption) (*GetDeviceEventResp, error) {
	out := new(GetDeviceEventResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/getDeviceEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) SaveDeviceEvent(ctx context.Context, in *SaveDeviceEventReq, opts ...grpc.CallOption) (*SaveDeviceEventResp, error) {
	out := new(SaveDeviceEventResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/saveDeviceEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) SnapCmd(ctx context.Context, in *SnapCmdReq, opts ...grpc.CallOption) (*SnapCmdResp, error) {
	out := new(SnapCmdResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/SnapCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) ReportBadVideoInfo(ctx context.Context, in *ReportBadVideoInfoReq, opts ...grpc.CallOption) (*ReportBadVideoInfoResp, error) {
	out := new(ReportBadVideoInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/ReportBadVideoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) GetTimeLine(ctx context.Context, in *GetTimeLineReq, opts ...grpc.CallOption) (*GetTimeLineResp, error) {
	out := new(GetTimeLineResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/GetTimeLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) GetIndex(ctx context.Context, in *GetIndexReq, opts ...grpc.CallOption) (*GetIndexResp, error) {
	out := new(GetIndexResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/GetIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) UploadIndex(ctx context.Context, in *UploadIndexReq, opts ...grpc.CallOption) (*UploadIndexResp, error) {
	out := new(UploadIndexResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/UploadIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) GetRecorderDaySummary(ctx context.Context, in *GetRecorderDaySummaryReq, opts ...grpc.CallOption) (*GetRecorderDaySummaryResp, error) {
	out := new(GetRecorderDaySummaryResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/GetRecorderDaySummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) SaveCloudStorageIndex(ctx context.Context, in *SaveCloudStorageIndexReq, opts ...grpc.CallOption) (*SaveCloudStorageIndexResp, error) {
	out := new(SaveCloudStorageIndexResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/SaveCloudStorageIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) GetCloudStorageIndex(ctx context.Context, in *GetCloudStorageIndexReq, opts ...grpc.CallOption) (*GetCloudStorageIndexResp, error) {
	out := new(GetCloudStorageIndexResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/GetCloudStorageIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) RemotePlay(ctx context.Context, in *RemotePlayReq, opts ...grpc.CallOption) (*RemotePlayResp, error) {
	out := new(RemotePlayResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/RemotePlay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) StopRemotePlay(ctx context.Context, in *StopRemotePlayReq, opts ...grpc.CallOption) (*StopRemotePlayResp, error) {
	out := new(StopRemotePlayResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/StopRemotePlay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) DeleteCloudStorageIndex(ctx context.Context, in *DeleteCloudStorageIndexReq, opts ...grpc.CallOption) (*DeleteCloudStorageIndexResp, error) {
	out := new(DeleteCloudStorageIndexResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/DeleteCloudStorageIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) SaveSsvidInfo(ctx context.Context, in *SaveSsvidInfoReq, opts ...grpc.CallOption) (*SaveSsvidInfoResp, error) {
	out := new(SaveSsvidInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/SaveSsvidInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) GetRealtimeTrack(ctx context.Context, in *GetRealtimeTrackReq, opts ...grpc.CallOption) (*GetRealtimeTrackResp, error) {
	out := new(GetRealtimeTrackResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/GetRealtimeTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) GetRealtimeTravel(ctx context.Context, in *GetRealtimeTravelReq, opts ...grpc.CallOption) (*GetRealtimeTravelResp, error) {
	out := new(GetRealtimeTravelResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/GetRealtimeTravel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) GetRegionInfoByGeo(ctx context.Context, in *GetRegionInfoByGeoReq, opts ...grpc.CallOption) (*GetRegionInfoByGeoResp, error) {
	out := new(GetRegionInfoByGeoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/GetRegionInfoByGeo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) SendCommand(ctx context.Context, in *CommandReq, opts ...grpc.CallOption) (*CommandResp, error) {
	out := new(CommandResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/SendCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) GetHistoryTrack(ctx context.Context, in *GetHistoryTrackReq, opts ...grpc.CallOption) (*GetHistoryTrackResp, error) {
	out := new(GetHistoryTrackResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/GetHistoryTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) SaveVideoInfo(ctx context.Context, in *SaveVideoInfoReq, opts ...grpc.CallOption) (*SaveVideoInfoResp, error) {
	out := new(SaveVideoInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/SaveVideoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) SearchVideoInfo(ctx context.Context, in *SearchVideoInfoReq, opts ...grpc.CallOption) (*SearchVideoInfoResp, error) {
	out := new(SearchVideoInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/SearchVideoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) SaveVideoErrCode(ctx context.Context, in *SaveVideoErrCodeReq, opts ...grpc.CallOption) (*SaveVideoErrCodeResp, error) {
	out := new(SaveVideoErrCodeResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/SaveVideoErrCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) DelVideoIndex(ctx context.Context, in *DelVideoIndexReq, opts ...grpc.CallOption) (*DelVideoIndexResp, error) {
	out := new(DelVideoIndexResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/DelVideoIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) SearchVideoErrInfo(ctx context.Context, in *SearchVideoErrInfoReq, opts ...grpc.CallOption) (*SearchVideoErrInfoResp, error) {
	out := new(SearchVideoErrInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/SearchVideoErrInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) GetDeviceRouter(ctx context.Context, in *GetDeviceRouterReq, opts ...grpc.CallOption) (*GetDeviceRouterResp, error) {
	out := new(GetDeviceRouterResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/getDeviceRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) SaveRecorderDaySummary(ctx context.Context, in *SaveRecorderDaySummaryReq, opts ...grpc.CallOption) (*SaveRecorderDaySummaryResp, error) {
	out := new(SaveRecorderDaySummaryResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/SaveRecorderDaySummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSSClient) GetDeviceStatus(ctx context.Context, in *GetDeviceStatusReq, opts ...grpc.CallOption) (*GetDeviceStatusResp, error) {
	out := new(GetDeviceStatusResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dss.DSS/GetDeviceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DSSServer is the server API for DSS service.
type DSSServer interface {
	//获取历史行程
	GetHisTravel(context.Context, *GetHisTravelReq) (*GetHisTravelResp, error)
	//获取行程统计信息
	GetStatisticsTravel(context.Context, *GetStatisticsTravelReq) (*GetStatisticsTravelResp, error)
	//获取驾驶评分
	GetDrivingScore(context.Context, *GetDrivingScoreReq) (*GetDrivingScoreResp, error)
	//更新定位表信息
	UpdateDeviceStatus(context.Context, *UpdateDeviceStatusReq) (*UpdateDeviceStatusResp, error)
	//查询事件标签
	GetDriveEventInfo(context.Context, *GetDriveEventInfoReq) (*GetDriveEventInfoResp, error)
	//保存事件标签
	SaveDriveEventInfo(context.Context, *SaveDriveEventInfoReq) (*SaveDriveEventInfoResp, error)
	//设备事件信息
	GetDeviceEvent(context.Context, *GetDeviceEventReq) (*GetDeviceEventResp, error)
	//保存事件信息
	SaveDeviceEvent(context.Context, *SaveDeviceEventReq) (*SaveDeviceEventResp, error)
	//统计查询图片/视频抓拍
	SnapCmd(context.Context, *SnapCmdReq) (*SnapCmdResp, error)
	//上报视频异常信息
	ReportBadVideoInfo(context.Context, *ReportBadVideoInfoReq) (*ReportBadVideoInfoResp, error)
	//分页查询APP拉取时间戳
	GetTimeLine(context.Context, *GetTimeLineReq) (*GetTimeLineResp, error)
	// APP拉取文件列表
	GetIndex(context.Context, *GetIndexReq) (*GetIndexResp, error)
	//设备端视频文件上传
	UploadIndex(context.Context, *UploadIndexReq) (*UploadIndexResp, error)
	//分页查询获取云记录仪视频日历
	GetRecorderDaySummary(context.Context, *GetRecorderDaySummaryReq) (*GetRecorderDaySummaryResp, error)
	//保存目录树
	SaveCloudStorageIndex(context.Context, *SaveCloudStorageIndexReq) (*SaveCloudStorageIndexResp, error)
	//增量拉取目录树
	GetCloudStorageIndex(context.Context, *GetCloudStorageIndexReq) (*GetCloudStorageIndexResp, error)
	//开始远程调阅
	RemotePlay(context.Context, *RemotePlayReq) (*RemotePlayResp, error)
	//停止远程调阅
	StopRemotePlay(context.Context, *StopRemotePlayReq) (*StopRemotePlayResp, error)
	//删除本地目录树
	DeleteCloudStorageIndex(context.Context, *DeleteCloudStorageIndexReq) (*DeleteCloudStorageIndexResp, error)
	//保存直播信息
	SaveSsvidInfo(context.Context, *SaveSsvidInfoReq) (*SaveSsvidInfoResp, error)
	//获取实时轨迹信息
	GetRealtimeTrack(context.Context, *GetRealtimeTrackReq) (*GetRealtimeTrackResp, error)
	//获取设备实时行程
	GetRealtimeTravel(context.Context, *GetRealtimeTravelReq) (*GetRealtimeTravelResp, error)
	//获取经纬度省市区
	GetRegionInfoByGeo(context.Context, *GetRegionInfoByGeoReq) (*GetRegionInfoByGeoResp, error)
	//发送指令
	SendCommand(context.Context, *CommandReq) (*CommandResp, error)
	//获取历史轨迹信息
	GetHistoryTrack(context.Context, *GetHistoryTrackReq) (*GetHistoryTrackResp, error)
	//视频编码信息上报
	SaveVideoInfo(context.Context, *SaveVideoInfoReq) (*SaveVideoInfoResp, error)
	//查询视频信息
	SearchVideoInfo(context.Context, *SearchVideoInfoReq) (*SearchVideoInfoResp, error)
	//上报视频错误码信息
	SaveVideoErrCode(context.Context, *SaveVideoErrCodeReq) (*SaveVideoErrCodeResp, error)
	//删除
	DelVideoIndex(context.Context, *DelVideoIndexReq) (*DelVideoIndexResp, error)
	//查询错误码
	SearchVideoErrInfo(context.Context, *SearchVideoErrInfoReq) (*SearchVideoErrInfoResp, error)
	//获取设备实时路由信息
	GetDeviceRouter(context.Context, *GetDeviceRouterReq) (*GetDeviceRouterResp, error)
	//保存记录仪视频日历（有则更新无则新增）
	SaveRecorderDaySummary(context.Context, *SaveRecorderDaySummaryReq) (*SaveRecorderDaySummaryResp, error)
	//获取设备状态
	GetDeviceStatus(context.Context, *GetDeviceStatusReq) (*GetDeviceStatusResp, error)
}

// UnimplementedDSSServer can be embedded to have forward compatible implementations.
type UnimplementedDSSServer struct {
}

func (*UnimplementedDSSServer) GetHisTravel(ctx context.Context, req *GetHisTravelReq) (*GetHisTravelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHisTravel not implemented")
}
func (*UnimplementedDSSServer) GetStatisticsTravel(ctx context.Context, req *GetStatisticsTravelReq) (*GetStatisticsTravelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticsTravel not implemented")
}
func (*UnimplementedDSSServer) GetDrivingScore(ctx context.Context, req *GetDrivingScoreReq) (*GetDrivingScoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrivingScore not implemented")
}
func (*UnimplementedDSSServer) UpdateDeviceStatus(ctx context.Context, req *UpdateDeviceStatusReq) (*UpdateDeviceStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceStatus not implemented")
}
func (*UnimplementedDSSServer) GetDriveEventInfo(ctx context.Context, req *GetDriveEventInfoReq) (*GetDriveEventInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriveEventInfo not implemented")
}
func (*UnimplementedDSSServer) SaveDriveEventInfo(ctx context.Context, req *SaveDriveEventInfoReq) (*SaveDriveEventInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDriveEventInfo not implemented")
}
func (*UnimplementedDSSServer) GetDeviceEvent(ctx context.Context, req *GetDeviceEventReq) (*GetDeviceEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceEvent not implemented")
}
func (*UnimplementedDSSServer) SaveDeviceEvent(ctx context.Context, req *SaveDeviceEventReq) (*SaveDeviceEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDeviceEvent not implemented")
}
func (*UnimplementedDSSServer) SnapCmd(ctx context.Context, req *SnapCmdReq) (*SnapCmdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapCmd not implemented")
}
func (*UnimplementedDSSServer) ReportBadVideoInfo(ctx context.Context, req *ReportBadVideoInfoReq) (*ReportBadVideoInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportBadVideoInfo not implemented")
}
func (*UnimplementedDSSServer) GetTimeLine(ctx context.Context, req *GetTimeLineReq) (*GetTimeLineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeLine not implemented")
}
func (*UnimplementedDSSServer) GetIndex(ctx context.Context, req *GetIndexReq) (*GetIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndex not implemented")
}
func (*UnimplementedDSSServer) UploadIndex(ctx context.Context, req *UploadIndexReq) (*UploadIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadIndex not implemented")
}
func (*UnimplementedDSSServer) GetRecorderDaySummary(ctx context.Context, req *GetRecorderDaySummaryReq) (*GetRecorderDaySummaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecorderDaySummary not implemented")
}
func (*UnimplementedDSSServer) SaveCloudStorageIndex(ctx context.Context, req *SaveCloudStorageIndexReq) (*SaveCloudStorageIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCloudStorageIndex not implemented")
}
func (*UnimplementedDSSServer) GetCloudStorageIndex(ctx context.Context, req *GetCloudStorageIndexReq) (*GetCloudStorageIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudStorageIndex not implemented")
}
func (*UnimplementedDSSServer) RemotePlay(ctx context.Context, req *RemotePlayReq) (*RemotePlayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemotePlay not implemented")
}
func (*UnimplementedDSSServer) StopRemotePlay(ctx context.Context, req *StopRemotePlayReq) (*StopRemotePlayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRemotePlay not implemented")
}
func (*UnimplementedDSSServer) DeleteCloudStorageIndex(ctx context.Context, req *DeleteCloudStorageIndexReq) (*DeleteCloudStorageIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudStorageIndex not implemented")
}
func (*UnimplementedDSSServer) SaveSsvidInfo(ctx context.Context, req *SaveSsvidInfoReq) (*SaveSsvidInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSsvidInfo not implemented")
}
func (*UnimplementedDSSServer) GetRealtimeTrack(ctx context.Context, req *GetRealtimeTrackReq) (*GetRealtimeTrackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealtimeTrack not implemented")
}
func (*UnimplementedDSSServer) GetRealtimeTravel(ctx context.Context, req *GetRealtimeTravelReq) (*GetRealtimeTravelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealtimeTravel not implemented")
}
func (*UnimplementedDSSServer) GetRegionInfoByGeo(ctx context.Context, req *GetRegionInfoByGeoReq) (*GetRegionInfoByGeoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegionInfoByGeo not implemented")
}
func (*UnimplementedDSSServer) SendCommand(ctx context.Context, req *CommandReq) (*CommandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommand not implemented")
}
func (*UnimplementedDSSServer) GetHistoryTrack(ctx context.Context, req *GetHistoryTrackReq) (*GetHistoryTrackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryTrack not implemented")
}
func (*UnimplementedDSSServer) SaveVideoInfo(ctx context.Context, req *SaveVideoInfoReq) (*SaveVideoInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveVideoInfo not implemented")
}
func (*UnimplementedDSSServer) SearchVideoInfo(ctx context.Context, req *SearchVideoInfoReq) (*SearchVideoInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchVideoInfo not implemented")
}
func (*UnimplementedDSSServer) SaveVideoErrCode(ctx context.Context, req *SaveVideoErrCodeReq) (*SaveVideoErrCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveVideoErrCode not implemented")
}
func (*UnimplementedDSSServer) DelVideoIndex(ctx context.Context, req *DelVideoIndexReq) (*DelVideoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVideoIndex not implemented")
}
func (*UnimplementedDSSServer) SearchVideoErrInfo(ctx context.Context, req *SearchVideoErrInfoReq) (*SearchVideoErrInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchVideoErrInfo not implemented")
}
func (*UnimplementedDSSServer) GetDeviceRouter(ctx context.Context, req *GetDeviceRouterReq) (*GetDeviceRouterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceRouter not implemented")
}
func (*UnimplementedDSSServer) SaveRecorderDaySummary(ctx context.Context, req *SaveRecorderDaySummaryReq) (*SaveRecorderDaySummaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRecorderDaySummary not implemented")
}
func (*UnimplementedDSSServer) GetDeviceStatus(ctx context.Context, req *GetDeviceStatusReq) (*GetDeviceStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceStatus not implemented")
}

func RegisterDSSServer(s *grpc.Server, srv DSSServer) {
	s.RegisterService(&_DSS_serviceDesc, srv)
}

func _DSS_GetHisTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHisTravelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).GetHisTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/GetHisTravel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).GetHisTravel(ctx, req.(*GetHisTravelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_GetStatisticsTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticsTravelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).GetStatisticsTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/GetStatisticsTravel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).GetStatisticsTravel(ctx, req.(*GetStatisticsTravelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_GetDrivingScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDrivingScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).GetDrivingScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/GetDrivingScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).GetDrivingScore(ctx, req.(*GetDrivingScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_UpdateDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).UpdateDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/UpdateDeviceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).UpdateDeviceStatus(ctx, req.(*UpdateDeviceStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_GetDriveEventInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDriveEventInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).GetDriveEventInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/GetDriveEventInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).GetDriveEventInfo(ctx, req.(*GetDriveEventInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_SaveDriveEventInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDriveEventInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).SaveDriveEventInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/SaveDriveEventInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).SaveDriveEventInfo(ctx, req.(*SaveDriveEventInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_GetDeviceEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).GetDeviceEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/GetDeviceEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).GetDeviceEvent(ctx, req.(*GetDeviceEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_SaveDeviceEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDeviceEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).SaveDeviceEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/SaveDeviceEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).SaveDeviceEvent(ctx, req.(*SaveDeviceEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_SnapCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapCmdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).SnapCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/SnapCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).SnapCmd(ctx, req.(*SnapCmdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_ReportBadVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportBadVideoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).ReportBadVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/ReportBadVideoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).ReportBadVideoInfo(ctx, req.(*ReportBadVideoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_GetTimeLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeLineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).GetTimeLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/GetTimeLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).GetTimeLine(ctx, req.(*GetTimeLineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_GetIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).GetIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/GetIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).GetIndex(ctx, req.(*GetIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_UploadIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).UploadIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/UploadIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).UploadIndex(ctx, req.(*UploadIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_GetRecorderDaySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecorderDaySummaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).GetRecorderDaySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/GetRecorderDaySummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).GetRecorderDaySummary(ctx, req.(*GetRecorderDaySummaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_SaveCloudStorageIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCloudStorageIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).SaveCloudStorageIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/SaveCloudStorageIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).SaveCloudStorageIndex(ctx, req.(*SaveCloudStorageIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_GetCloudStorageIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudStorageIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).GetCloudStorageIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/GetCloudStorageIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).GetCloudStorageIndex(ctx, req.(*GetCloudStorageIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_RemotePlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemotePlayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).RemotePlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/RemotePlay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).RemotePlay(ctx, req.(*RemotePlayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_StopRemotePlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRemotePlayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).StopRemotePlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/StopRemotePlay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).StopRemotePlay(ctx, req.(*StopRemotePlayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_DeleteCloudStorageIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudStorageIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).DeleteCloudStorageIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/DeleteCloudStorageIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).DeleteCloudStorageIndex(ctx, req.(*DeleteCloudStorageIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_SaveSsvidInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSsvidInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).SaveSsvidInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/SaveSsvidInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).SaveSsvidInfo(ctx, req.(*SaveSsvidInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_GetRealtimeTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealtimeTrackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).GetRealtimeTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/GetRealtimeTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).GetRealtimeTrack(ctx, req.(*GetRealtimeTrackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_GetRealtimeTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealtimeTravelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).GetRealtimeTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/GetRealtimeTravel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).GetRealtimeTravel(ctx, req.(*GetRealtimeTravelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_GetRegionInfoByGeo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionInfoByGeoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).GetRegionInfoByGeo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/GetRegionInfoByGeo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).GetRegionInfoByGeo(ctx, req.(*GetRegionInfoByGeoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/SendCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).SendCommand(ctx, req.(*CommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_GetHistoryTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryTrackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).GetHistoryTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/GetHistoryTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).GetHistoryTrack(ctx, req.(*GetHistoryTrackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_SaveVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveVideoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).SaveVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/SaveVideoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).SaveVideoInfo(ctx, req.(*SaveVideoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_SearchVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVideoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).SearchVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/SearchVideoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).SearchVideoInfo(ctx, req.(*SearchVideoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_SaveVideoErrCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveVideoErrCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).SaveVideoErrCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/SaveVideoErrCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).SaveVideoErrCode(ctx, req.(*SaveVideoErrCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_DelVideoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelVideoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).DelVideoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/DelVideoIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).DelVideoIndex(ctx, req.(*DelVideoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_SearchVideoErrInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVideoErrInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).SearchVideoErrInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/SearchVideoErrInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).SearchVideoErrInfo(ctx, req.(*SearchVideoErrInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_GetDeviceRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRouterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).GetDeviceRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/GetDeviceRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).GetDeviceRouter(ctx, req.(*GetDeviceRouterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_SaveRecorderDaySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRecorderDaySummaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).SaveRecorderDaySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/SaveRecorderDaySummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).SaveRecorderDaySummary(ctx, req.(*SaveRecorderDaySummaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSS_GetDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServer).GetDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dss.DSS/GetDeviceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServer).GetDeviceStatus(ctx, req.(*GetDeviceStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DSS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mapgoo.paas.dss.DSS",
	HandlerType: (*DSSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getHisTravel",
			Handler:    _DSS_GetHisTravel_Handler,
		},
		{
			MethodName: "getStatisticsTravel",
			Handler:    _DSS_GetStatisticsTravel_Handler,
		},
		{
			MethodName: "getDrivingScore",
			Handler:    _DSS_GetDrivingScore_Handler,
		},
		{
			MethodName: "updateDeviceStatus",
			Handler:    _DSS_UpdateDeviceStatus_Handler,
		},
		{
			MethodName: "getDriveEventInfo",
			Handler:    _DSS_GetDriveEventInfo_Handler,
		},
		{
			MethodName: "saveDriveEventInfo",
			Handler:    _DSS_SaveDriveEventInfo_Handler,
		},
		{
			MethodName: "getDeviceEvent",
			Handler:    _DSS_GetDeviceEvent_Handler,
		},
		{
			MethodName: "saveDeviceEvent",
			Handler:    _DSS_SaveDeviceEvent_Handler,
		},
		{
			MethodName: "SnapCmd",
			Handler:    _DSS_SnapCmd_Handler,
		},
		{
			MethodName: "ReportBadVideoInfo",
			Handler:    _DSS_ReportBadVideoInfo_Handler,
		},
		{
			MethodName: "GetTimeLine",
			Handler:    _DSS_GetTimeLine_Handler,
		},
		{
			MethodName: "GetIndex",
			Handler:    _DSS_GetIndex_Handler,
		},
		{
			MethodName: "UploadIndex",
			Handler:    _DSS_UploadIndex_Handler,
		},
		{
			MethodName: "GetRecorderDaySummary",
			Handler:    _DSS_GetRecorderDaySummary_Handler,
		},
		{
			MethodName: "SaveCloudStorageIndex",
			Handler:    _DSS_SaveCloudStorageIndex_Handler,
		},
		{
			MethodName: "GetCloudStorageIndex",
			Handler:    _DSS_GetCloudStorageIndex_Handler,
		},
		{
			MethodName: "RemotePlay",
			Handler:    _DSS_RemotePlay_Handler,
		},
		{
			MethodName: "StopRemotePlay",
			Handler:    _DSS_StopRemotePlay_Handler,
		},
		{
			MethodName: "DeleteCloudStorageIndex",
			Handler:    _DSS_DeleteCloudStorageIndex_Handler,
		},
		{
			MethodName: "SaveSsvidInfo",
			Handler:    _DSS_SaveSsvidInfo_Handler,
		},
		{
			MethodName: "GetRealtimeTrack",
			Handler:    _DSS_GetRealtimeTrack_Handler,
		},
		{
			MethodName: "GetRealtimeTravel",
			Handler:    _DSS_GetRealtimeTravel_Handler,
		},
		{
			MethodName: "GetRegionInfoByGeo",
			Handler:    _DSS_GetRegionInfoByGeo_Handler,
		},
		{
			MethodName: "SendCommand",
			Handler:    _DSS_SendCommand_Handler,
		},
		{
			MethodName: "GetHistoryTrack",
			Handler:    _DSS_GetHistoryTrack_Handler,
		},
		{
			MethodName: "SaveVideoInfo",
			Handler:    _DSS_SaveVideoInfo_Handler,
		},
		{
			MethodName: "SearchVideoInfo",
			Handler:    _DSS_SearchVideoInfo_Handler,
		},
		{
			MethodName: "SaveVideoErrCode",
			Handler:    _DSS_SaveVideoErrCode_Handler,
		},
		{
			MethodName: "DelVideoIndex",
			Handler:    _DSS_DelVideoIndex_Handler,
		},
		{
			MethodName: "SearchVideoErrInfo",
			Handler:    _DSS_SearchVideoErrInfo_Handler,
		},
		{
			MethodName: "getDeviceRouter",
			Handler:    _DSS_GetDeviceRouter_Handler,
		},
		{
			MethodName: "SaveRecorderDaySummary",
			Handler:    _DSS_SaveRecorderDaySummary_Handler,
		},
		{
			MethodName: "GetDeviceStatus",
			Handler:    _DSS_GetDeviceStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapgoo.paas.dss.proto",
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mapgoo.paas.vms.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("mapgoo.paas.vms.proto", fileDescriptor_c9f07dbe4e281154) }

var fileDescriptor_c9f07dbe4e281154 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcd, 0x4d, 0x2c, 0x48,
	0xcf, 0xcf, 0xd7, 0x2b, 0x48, 0x4c, 0x2c, 0xd6, 0x2b, 0xcb, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x47, 0x13, 0x96, 0x92, 0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x4f, 0x2c,
	0xc8, 0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x83, 0x2a, 0x97, 0x12,
	0x43, 0x56, 0x9e, 0x94, 0x58, 0x9c, 0x0a, 0x15, 0x97, 0x43, 0x31, 0x26, 0x35, 0x23, 0x33, 0x39,
	0x27, 0x55, 0x2f, 0x25, 0xb1, 0x24, 0x11, 0x22, 0x6f, 0x34, 0x81, 0x91, 0x8b, 0x39, 0xcc, 0x37,
	0x58, 0xa8, 0x83, 0x91, 0x8b, 0x2f, 0x3d, 0xb5, 0x24, 0x0c, 0xa2, 0xc2, 0x33, 0x2f, 0x2d, 0x5f,
	0x48, 0x5b, 0x0f, 0xa7, 0x5e, 0x77, 0x14, 0x95, 0x41, 0xa9, 0x85, 0x52, 0x3a, 0xc4, 0x2b, 0x2e,
	0x2e, 0x50, 0x92, 0x6e, 0xba, 0xfc, 0x64, 0x32, 0x93, 0xa8, 0x92, 0xb0, 0x7e, 0x59, 0x6e, 0xb1,
	0x3e, 0xaa, 0xbd, 0x4e, 0xa2, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91,
	0x1c, 0xe3, 0x8c, 0xc7, 0x72, 0x0c, 0x51, 0xcc, 0x89, 0x05, 0x99, 0x01, 0x8c, 0x01, 0x4c, 0x49,
	0x6c, 0x60, 0x47, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x69, 0xf1, 0xc6, 0x34, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VMSClient is the client API for VMS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VMSClient interface {
	//获取车辆信息
	GetVehicleInfo(ctx context.Context, in *GetVehicleInfoReq, opts ...grpc.CallOption) (*GetVehicleInfoResp, error)
}

type vMSClient struct {
	cc *grpc.ClientConn
}

func NewVMSClient(cc *grpc.ClientConn) VMSClient {
	return &vMSClient{cc}
}

func (c *vMSClient) GetVehicleInfo(ctx context.Context, in *GetVehicleInfoReq, opts ...grpc.CallOption) (*GetVehicleInfoResp, error) {
	out := new(GetVehicleInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.vms.VMS/getVehicleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMSServer is the server API for VMS service.
type VMSServer interface {
	//获取车辆信息
	GetVehicleInfo(context.Context, *GetVehicleInfoReq) (*GetVehicleInfoResp, error)
}

// UnimplementedVMSServer can be embedded to have forward compatible implementations.
type UnimplementedVMSServer struct {
}

func (*UnimplementedVMSServer) GetVehicleInfo(ctx context.Context, req *GetVehicleInfoReq) (*GetVehicleInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicleInfo not implemented")
}

func RegisterVMSServer(s *grpc.Server, srv VMSServer) {
	s.RegisterService(&_VMS_serviceDesc, srv)
}

func _VMS_GetVehicleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVehicleInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMSServer).GetVehicleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.vms.VMS/GetVehicleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMSServer).GetVehicleInfo(ctx, req.(*GetVehicleInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _VMS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mapgoo.paas.vms.VMS",
	HandlerType: (*VMSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getVehicleInfo",
			Handler:    _VMS_GetVehicleInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapgoo.paas.vms.proto",
}

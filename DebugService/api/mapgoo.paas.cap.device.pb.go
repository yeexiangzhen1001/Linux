// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mapgoo.paas.cap.device.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// get imei:obj:353327022481675
// 返回 ObjectID
type GetObjectIDByImeiCacheReq struct {
	// 设备IMEI号
	Imei                 string   `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetObjectIDByImeiCacheReq) Reset()         { *m = GetObjectIDByImeiCacheReq{} }
func (m *GetObjectIDByImeiCacheReq) String() string { return proto.CompactTextString(m) }
func (*GetObjectIDByImeiCacheReq) ProtoMessage()    {}
func (*GetObjectIDByImeiCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{0}
}
func (m *GetObjectIDByImeiCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetObjectIDByImeiCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetObjectIDByImeiCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetObjectIDByImeiCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetObjectIDByImeiCacheReq.Merge(m, src)
}
func (m *GetObjectIDByImeiCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *GetObjectIDByImeiCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetObjectIDByImeiCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetObjectIDByImeiCacheReq proto.InternalMessageInfo

func (m *GetObjectIDByImeiCacheReq) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

type GetObjectIDByImeiCacheResp struct {
	// 返回统一请求结果状态实例
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`
	// 设备id, 若没有，则返回0
	ObjectId             uint32   `protobuf:"varint,2,opt,name=object_id,json=objectId,proto3" json:"object_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetObjectIDByImeiCacheResp) Reset()         { *m = GetObjectIDByImeiCacheResp{} }
func (m *GetObjectIDByImeiCacheResp) String() string { return proto.CompactTextString(m) }
func (*GetObjectIDByImeiCacheResp) ProtoMessage()    {}
func (*GetObjectIDByImeiCacheResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{1}
}
func (m *GetObjectIDByImeiCacheResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetObjectIDByImeiCacheResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetObjectIDByImeiCacheResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetObjectIDByImeiCacheResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetObjectIDByImeiCacheResp.Merge(m, src)
}
func (m *GetObjectIDByImeiCacheResp) XXX_Size() int {
	return m.Size()
}
func (m *GetObjectIDByImeiCacheResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetObjectIDByImeiCacheResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetObjectIDByImeiCacheResp proto.InternalMessageInfo

func (m *GetObjectIDByImeiCacheResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetObjectIDByImeiCacheResp) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

// 设置IMEI对应ObjectID关系缓存请求
type SetImeiObjectIdCacheReq struct {
	// 设备IMEI号
	Imei string `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei"`
	// 设备id
	ObjectId             uint32   `protobuf:"varint,2,opt,name=object_id,json=objectId,proto3" json:"object_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetImeiObjectIdCacheReq) Reset()         { *m = SetImeiObjectIdCacheReq{} }
func (m *SetImeiObjectIdCacheReq) String() string { return proto.CompactTextString(m) }
func (*SetImeiObjectIdCacheReq) ProtoMessage()    {}
func (*SetImeiObjectIdCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{2}
}
func (m *SetImeiObjectIdCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetImeiObjectIdCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetImeiObjectIdCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetImeiObjectIdCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetImeiObjectIdCacheReq.Merge(m, src)
}
func (m *SetImeiObjectIdCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *SetImeiObjectIdCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetImeiObjectIdCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetImeiObjectIdCacheReq proto.InternalMessageInfo

func (m *SetImeiObjectIdCacheReq) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *SetImeiObjectIdCacheReq) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

// 设置IMEI对应ObjectID关系缓存响应
type SetImeiObjectIdCacheResp struct {
	// 返回统一请求结果状态实例
	Base                 *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SetImeiObjectIdCacheResp) Reset()         { *m = SetImeiObjectIdCacheResp{} }
func (m *SetImeiObjectIdCacheResp) String() string { return proto.CompactTextString(m) }
func (*SetImeiObjectIdCacheResp) ProtoMessage()    {}
func (*SetImeiObjectIdCacheResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{3}
}
func (m *SetImeiObjectIdCacheResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetImeiObjectIdCacheResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetImeiObjectIdCacheResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetImeiObjectIdCacheResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetImeiObjectIdCacheResp.Merge(m, src)
}
func (m *SetImeiObjectIdCacheResp) XXX_Size() int {
	return m.Size()
}
func (m *SetImeiObjectIdCacheResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetImeiObjectIdCacheResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetImeiObjectIdCacheResp proto.InternalMessageInfo

func (m *SetImeiObjectIdCacheResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

type SetDeviceParamsCacheResp struct {
	// 返回统一请求结果状态实例
	Base                 *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SetDeviceParamsCacheResp) Reset()         { *m = SetDeviceParamsCacheResp{} }
func (m *SetDeviceParamsCacheResp) String() string { return proto.CompactTextString(m) }
func (*SetDeviceParamsCacheResp) ProtoMessage()    {}
func (*SetDeviceParamsCacheResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{4}
}
func (m *SetDeviceParamsCacheResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDeviceParamsCacheResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDeviceParamsCacheResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDeviceParamsCacheResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDeviceParamsCacheResp.Merge(m, src)
}
func (m *SetDeviceParamsCacheResp) XXX_Size() int {
	return m.Size()
}
func (m *SetDeviceParamsCacheResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDeviceParamsCacheResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetDeviceParamsCacheResp proto.InternalMessageInfo

func (m *SetDeviceParamsCacheResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

type GetDeviceParamsCacheReq struct {
	// 设备id
	ObjectId             uint32   `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeviceParamsCacheReq) Reset()         { *m = GetDeviceParamsCacheReq{} }
func (m *GetDeviceParamsCacheReq) String() string { return proto.CompactTextString(m) }
func (*GetDeviceParamsCacheReq) ProtoMessage()    {}
func (*GetDeviceParamsCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{5}
}
func (m *GetDeviceParamsCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceParamsCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceParamsCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceParamsCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceParamsCacheReq.Merge(m, src)
}
func (m *GetDeviceParamsCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceParamsCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceParamsCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceParamsCacheReq proto.InternalMessageInfo

func (m *GetDeviceParamsCacheReq) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

type GetDeviceParamsCacheResp struct {
	// 返回统一请求结果状态实例
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`
	// 设备参数数据
	DevParams            []*DeviceParam `protobuf:"bytes,2,rep,name=dev_params,json=devParams,proto3" json:"dev_params"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetDeviceParamsCacheResp) Reset()         { *m = GetDeviceParamsCacheResp{} }
func (m *GetDeviceParamsCacheResp) String() string { return proto.CompactTextString(m) }
func (*GetDeviceParamsCacheResp) ProtoMessage()    {}
func (*GetDeviceParamsCacheResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{6}
}
func (m *GetDeviceParamsCacheResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceParamsCacheResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceParamsCacheResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceParamsCacheResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceParamsCacheResp.Merge(m, src)
}
func (m *GetDeviceParamsCacheResp) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceParamsCacheResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceParamsCacheResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceParamsCacheResp proto.InternalMessageInfo

func (m *GetDeviceParamsCacheResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetDeviceParamsCacheResp) GetDevParams() []*DeviceParam {
	if m != nil {
		return m.DevParams
	}
	return nil
}

//设备基本信息缓存请求
type GetDeviceBaseInfoCacheReq struct {
	// 设备id
	ObjectId             uint32   `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeviceBaseInfoCacheReq) Reset()         { *m = GetDeviceBaseInfoCacheReq{} }
func (m *GetDeviceBaseInfoCacheReq) String() string { return proto.CompactTextString(m) }
func (*GetDeviceBaseInfoCacheReq) ProtoMessage()    {}
func (*GetDeviceBaseInfoCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{7}
}
func (m *GetDeviceBaseInfoCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceBaseInfoCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceBaseInfoCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceBaseInfoCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceBaseInfoCacheReq.Merge(m, src)
}
func (m *GetDeviceBaseInfoCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceBaseInfoCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceBaseInfoCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceBaseInfoCacheReq proto.InternalMessageInfo

func (m *GetDeviceBaseInfoCacheReq) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

//设备基本信息缓存响应(多个)
type GetDeviceBaseInfoCacheResp struct {
	// 返回统一请求结果状态实例
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`
	// 设备基础信息
	Info                 *DeviceBaseInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetDeviceBaseInfoCacheResp) Reset()         { *m = GetDeviceBaseInfoCacheResp{} }
func (m *GetDeviceBaseInfoCacheResp) String() string { return proto.CompactTextString(m) }
func (*GetDeviceBaseInfoCacheResp) ProtoMessage()    {}
func (*GetDeviceBaseInfoCacheResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{8}
}
func (m *GetDeviceBaseInfoCacheResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceBaseInfoCacheResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceBaseInfoCacheResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceBaseInfoCacheResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceBaseInfoCacheResp.Merge(m, src)
}
func (m *GetDeviceBaseInfoCacheResp) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceBaseInfoCacheResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceBaseInfoCacheResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceBaseInfoCacheResp proto.InternalMessageInfo

func (m *GetDeviceBaseInfoCacheResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetDeviceBaseInfoCacheResp) GetInfo() *DeviceBaseInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

//设备信息缓存请求
type GetDeviceInfoCacheReq struct {
	// 设备id
	ObjectId             uint32   `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeviceInfoCacheReq) Reset()         { *m = GetDeviceInfoCacheReq{} }
func (m *GetDeviceInfoCacheReq) String() string { return proto.CompactTextString(m) }
func (*GetDeviceInfoCacheReq) ProtoMessage()    {}
func (*GetDeviceInfoCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{9}
}
func (m *GetDeviceInfoCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceInfoCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceInfoCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceInfoCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceInfoCacheReq.Merge(m, src)
}
func (m *GetDeviceInfoCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceInfoCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceInfoCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceInfoCacheReq proto.InternalMessageInfo

func (m *GetDeviceInfoCacheReq) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

//设备信息缓存响应(多个)
type GetDeviceInfoCacheResp struct {
	// 返回统一请求结果状态实例
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`
	// 设备信息
	Info                 *DeviceInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetDeviceInfoCacheResp) Reset()         { *m = GetDeviceInfoCacheResp{} }
func (m *GetDeviceInfoCacheResp) String() string { return proto.CompactTextString(m) }
func (*GetDeviceInfoCacheResp) ProtoMessage()    {}
func (*GetDeviceInfoCacheResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{10}
}
func (m *GetDeviceInfoCacheResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceInfoCacheResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceInfoCacheResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceInfoCacheResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceInfoCacheResp.Merge(m, src)
}
func (m *GetDeviceInfoCacheResp) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceInfoCacheResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceInfoCacheResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceInfoCacheResp proto.InternalMessageInfo

func (m *GetDeviceInfoCacheResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetDeviceInfoCacheResp) GetInfo() *DeviceInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 设置设备信息缓存请求
type SetDeviceInfoCacheReq struct {
	// 设备基础信息
	Info                 *DeviceInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SetDeviceInfoCacheReq) Reset()         { *m = SetDeviceInfoCacheReq{} }
func (m *SetDeviceInfoCacheReq) String() string { return proto.CompactTextString(m) }
func (*SetDeviceInfoCacheReq) ProtoMessage()    {}
func (*SetDeviceInfoCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{11}
}
func (m *SetDeviceInfoCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDeviceInfoCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDeviceInfoCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDeviceInfoCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDeviceInfoCacheReq.Merge(m, src)
}
func (m *SetDeviceInfoCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *SetDeviceInfoCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDeviceInfoCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetDeviceInfoCacheReq proto.InternalMessageInfo

func (m *SetDeviceInfoCacheReq) GetInfo() *DeviceInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 设置设备信息缓存响应
type SetDeviceInfoCacheResp struct {
	// 返回统一请求结果状态实例
	Base                 *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SetDeviceInfoCacheResp) Reset()         { *m = SetDeviceInfoCacheResp{} }
func (m *SetDeviceInfoCacheResp) String() string { return proto.CompactTextString(m) }
func (*SetDeviceInfoCacheResp) ProtoMessage()    {}
func (*SetDeviceInfoCacheResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{12}
}
func (m *SetDeviceInfoCacheResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDeviceInfoCacheResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDeviceInfoCacheResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDeviceInfoCacheResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDeviceInfoCacheResp.Merge(m, src)
}
func (m *SetDeviceInfoCacheResp) XXX_Size() int {
	return m.Size()
}
func (m *SetDeviceInfoCacheResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDeviceInfoCacheResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetDeviceInfoCacheResp proto.InternalMessageInfo

func (m *SetDeviceInfoCacheResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

// 根据车辆ID获取设备ID缓存请求
type GetDeviceIdsByVehicleIdCacheReq struct {
	// 设备id
	VehicleId            uint32   `protobuf:"varint,1,opt,name=vehicle_id,json=vehicleId,proto3" json:"vehicle_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeviceIdsByVehicleIdCacheReq) Reset()         { *m = GetDeviceIdsByVehicleIdCacheReq{} }
func (m *GetDeviceIdsByVehicleIdCacheReq) String() string { return proto.CompactTextString(m) }
func (*GetDeviceIdsByVehicleIdCacheReq) ProtoMessage()    {}
func (*GetDeviceIdsByVehicleIdCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{13}
}
func (m *GetDeviceIdsByVehicleIdCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceIdsByVehicleIdCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceIdsByVehicleIdCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceIdsByVehicleIdCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceIdsByVehicleIdCacheReq.Merge(m, src)
}
func (m *GetDeviceIdsByVehicleIdCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceIdsByVehicleIdCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceIdsByVehicleIdCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceIdsByVehicleIdCacheReq proto.InternalMessageInfo

func (m *GetDeviceIdsByVehicleIdCacheReq) GetVehicleId() uint32 {
	if m != nil {
		return m.VehicleId
	}
	return 0
}

// 根据车辆ID获取设备ID缓存响应
type GetDeviceIdsByVehicleIdCacheResp struct {
	// 返回统一请求结果状态实例
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`
	//设备列表
	DeviceList           []uint32 `protobuf:"varint,2,rep,packed,name=device_list,json=deviceList,proto3" json:"device_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeviceIdsByVehicleIdCacheResp) Reset()         { *m = GetDeviceIdsByVehicleIdCacheResp{} }
func (m *GetDeviceIdsByVehicleIdCacheResp) String() string { return proto.CompactTextString(m) }
func (*GetDeviceIdsByVehicleIdCacheResp) ProtoMessage()    {}
func (*GetDeviceIdsByVehicleIdCacheResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{14}
}
func (m *GetDeviceIdsByVehicleIdCacheResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceIdsByVehicleIdCacheResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceIdsByVehicleIdCacheResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceIdsByVehicleIdCacheResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceIdsByVehicleIdCacheResp.Merge(m, src)
}
func (m *GetDeviceIdsByVehicleIdCacheResp) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceIdsByVehicleIdCacheResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceIdsByVehicleIdCacheResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceIdsByVehicleIdCacheResp proto.InternalMessageInfo

func (m *GetDeviceIdsByVehicleIdCacheResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetDeviceIdsByVehicleIdCacheResp) GetDeviceList() []uint32 {
	if m != nil {
		return m.DeviceList
	}
	return nil
}

//保存和更新设备缓存配置参数
type UpdateDeviceConfigCacheReq struct {
	//配置信息
	ConfigInfo           *DeviceConfigInfo `protobuf:"bytes,1,opt,name=config_info,json=configInfo,proto3" json:"config_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateDeviceConfigCacheReq) Reset()         { *m = UpdateDeviceConfigCacheReq{} }
func (m *UpdateDeviceConfigCacheReq) String() string { return proto.CompactTextString(m) }
func (*UpdateDeviceConfigCacheReq) ProtoMessage()    {}
func (*UpdateDeviceConfigCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{15}
}
func (m *UpdateDeviceConfigCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDeviceConfigCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDeviceConfigCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDeviceConfigCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDeviceConfigCacheReq.Merge(m, src)
}
func (m *UpdateDeviceConfigCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDeviceConfigCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDeviceConfigCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDeviceConfigCacheReq proto.InternalMessageInfo

func (m *UpdateDeviceConfigCacheReq) GetConfigInfo() *DeviceConfigInfo {
	if m != nil {
		return m.ConfigInfo
	}
	return nil
}

type UpdateDeviceConfigCacheResp struct {
	//公共结构
	Base                 *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UpdateDeviceConfigCacheResp) Reset()         { *m = UpdateDeviceConfigCacheResp{} }
func (m *UpdateDeviceConfigCacheResp) String() string { return proto.CompactTextString(m) }
func (*UpdateDeviceConfigCacheResp) ProtoMessage()    {}
func (*UpdateDeviceConfigCacheResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{16}
}
func (m *UpdateDeviceConfigCacheResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDeviceConfigCacheResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDeviceConfigCacheResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDeviceConfigCacheResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDeviceConfigCacheResp.Merge(m, src)
}
func (m *UpdateDeviceConfigCacheResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDeviceConfigCacheResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDeviceConfigCacheResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDeviceConfigCacheResp proto.InternalMessageInfo

func (m *UpdateDeviceConfigCacheResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

//删除设备配置缓存参数
type DelDeviceConfigCacheReq struct {
	//设备id
	ObjectId             uint32   `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelDeviceConfigCacheReq) Reset()         { *m = DelDeviceConfigCacheReq{} }
func (m *DelDeviceConfigCacheReq) String() string { return proto.CompactTextString(m) }
func (*DelDeviceConfigCacheReq) ProtoMessage()    {}
func (*DelDeviceConfigCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{17}
}
func (m *DelDeviceConfigCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelDeviceConfigCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelDeviceConfigCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelDeviceConfigCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelDeviceConfigCacheReq.Merge(m, src)
}
func (m *DelDeviceConfigCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *DelDeviceConfigCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelDeviceConfigCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelDeviceConfigCacheReq proto.InternalMessageInfo

func (m *DelDeviceConfigCacheReq) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

type DelDeviceConfigCacheResp struct {
	//公共结构
	Base                 *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DelDeviceConfigCacheResp) Reset()         { *m = DelDeviceConfigCacheResp{} }
func (m *DelDeviceConfigCacheResp) String() string { return proto.CompactTextString(m) }
func (*DelDeviceConfigCacheResp) ProtoMessage()    {}
func (*DelDeviceConfigCacheResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{18}
}
func (m *DelDeviceConfigCacheResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelDeviceConfigCacheResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelDeviceConfigCacheResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelDeviceConfigCacheResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelDeviceConfigCacheResp.Merge(m, src)
}
func (m *DelDeviceConfigCacheResp) XXX_Size() int {
	return m.Size()
}
func (m *DelDeviceConfigCacheResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DelDeviceConfigCacheResp.DiscardUnknown(m)
}

var xxx_messageInfo_DelDeviceConfigCacheResp proto.InternalMessageInfo

func (m *DelDeviceConfigCacheResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

//获取设备配置缓存参数
type GetDeviceConfigCacheReq struct {
	//设备id
	ObjectId             uint32   `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeviceConfigCacheReq) Reset()         { *m = GetDeviceConfigCacheReq{} }
func (m *GetDeviceConfigCacheReq) String() string { return proto.CompactTextString(m) }
func (*GetDeviceConfigCacheReq) ProtoMessage()    {}
func (*GetDeviceConfigCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{19}
}
func (m *GetDeviceConfigCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceConfigCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceConfigCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceConfigCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceConfigCacheReq.Merge(m, src)
}
func (m *GetDeviceConfigCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceConfigCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceConfigCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceConfigCacheReq proto.InternalMessageInfo

func (m *GetDeviceConfigCacheReq) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

type GetDeviceConfigCacheResp struct {
	//公共结构
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	//配置信息
	ConfigInfo           *DeviceConfigInfo `protobuf:"bytes,2,opt,name=config_info,json=configInfo,proto3" json:"config_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetDeviceConfigCacheResp) Reset()         { *m = GetDeviceConfigCacheResp{} }
func (m *GetDeviceConfigCacheResp) String() string { return proto.CompactTextString(m) }
func (*GetDeviceConfigCacheResp) ProtoMessage()    {}
func (*GetDeviceConfigCacheResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e489e18beb4b22a9, []int{20}
}
func (m *GetDeviceConfigCacheResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceConfigCacheResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceConfigCacheResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceConfigCacheResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceConfigCacheResp.Merge(m, src)
}
func (m *GetDeviceConfigCacheResp) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceConfigCacheResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceConfigCacheResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceConfigCacheResp proto.InternalMessageInfo

func (m *GetDeviceConfigCacheResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetDeviceConfigCacheResp) GetConfigInfo() *DeviceConfigInfo {
	if m != nil {
		return m.ConfigInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*GetObjectIDByImeiCacheReq)(nil), "mapgoo.paas.cap.device.GetObjectIDByImeiCacheReq")
	proto.RegisterType((*GetObjectIDByImeiCacheResp)(nil), "mapgoo.paas.cap.device.GetObjectIDByImeiCacheResp")
	proto.RegisterType((*SetImeiObjectIdCacheReq)(nil), "mapgoo.paas.cap.device.SetImeiObjectIdCacheReq")
	proto.RegisterType((*SetImeiObjectIdCacheResp)(nil), "mapgoo.paas.cap.device.SetImeiObjectIdCacheResp")
	proto.RegisterType((*SetDeviceParamsCacheResp)(nil), "mapgoo.paas.cap.device.SetDeviceParamsCacheResp")
	proto.RegisterType((*GetDeviceParamsCacheReq)(nil), "mapgoo.paas.cap.device.GetDeviceParamsCacheReq")
	proto.RegisterType((*GetDeviceParamsCacheResp)(nil), "mapgoo.paas.cap.device.GetDeviceParamsCacheResp")
	proto.RegisterType((*GetDeviceBaseInfoCacheReq)(nil), "mapgoo.paas.cap.device.GetDeviceBaseInfoCacheReq")
	proto.RegisterType((*GetDeviceBaseInfoCacheResp)(nil), "mapgoo.paas.cap.device.GetDeviceBaseInfoCacheResp")
	proto.RegisterType((*GetDeviceInfoCacheReq)(nil), "mapgoo.paas.cap.device.GetDeviceInfoCacheReq")
	proto.RegisterType((*GetDeviceInfoCacheResp)(nil), "mapgoo.paas.cap.device.GetDeviceInfoCacheResp")
	proto.RegisterType((*SetDeviceInfoCacheReq)(nil), "mapgoo.paas.cap.device.SetDeviceInfoCacheReq")
	proto.RegisterType((*SetDeviceInfoCacheResp)(nil), "mapgoo.paas.cap.device.SetDeviceInfoCacheResp")
	proto.RegisterType((*GetDeviceIdsByVehicleIdCacheReq)(nil), "mapgoo.paas.cap.device.GetDeviceIdsByVehicleIdCacheReq")
	proto.RegisterType((*GetDeviceIdsByVehicleIdCacheResp)(nil), "mapgoo.paas.cap.device.GetDeviceIdsByVehicleIdCacheResp")
	proto.RegisterType((*UpdateDeviceConfigCacheReq)(nil), "mapgoo.paas.cap.device.UpdateDeviceConfigCacheReq")
	proto.RegisterType((*UpdateDeviceConfigCacheResp)(nil), "mapgoo.paas.cap.device.UpdateDeviceConfigCacheResp")
	proto.RegisterType((*DelDeviceConfigCacheReq)(nil), "mapgoo.paas.cap.device.DelDeviceConfigCacheReq")
	proto.RegisterType((*DelDeviceConfigCacheResp)(nil), "mapgoo.paas.cap.device.DelDeviceConfigCacheResp")
	proto.RegisterType((*GetDeviceConfigCacheReq)(nil), "mapgoo.paas.cap.device.GetDeviceConfigCacheReq")
	proto.RegisterType((*GetDeviceConfigCacheResp)(nil), "mapgoo.paas.cap.device.GetDeviceConfigCacheResp")
}

func init() { proto.RegisterFile("mapgoo.paas.cap.device.proto", fileDescriptor_e489e18beb4b22a9) }

var fileDescriptor_e489e18beb4b22a9 = []byte{
	// 975 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x3b, 0x69, 0x84, 0x9a, 0x67, 0x05, 0xc1, 0xa8, 0x49, 0x8c, 0xeb, 0xda, 0x66, 0x68,
	0x8b, 0x15, 0x94, 0xdd, 0xe2, 0x4a, 0xfc, 0x12, 0xe2, 0xe0, 0xa4, 0xb2, 0x22, 0x55, 0x60, 0xd6,
	0xa2, 0x42, 0x5c, 0xa2, 0xf1, 0xee, 0x78, 0xb3, 0x28, 0xf6, 0x4c, 0x33, 0x5b, 0x8b, 0x1c, 0xe1,
	0xc0, 0x1f, 0x00, 0x42, 0x42, 0xe5, 0x58, 0xd4, 0x0b, 0x07, 0xfe, 0x08, 0x2e, 0x1c, 0x91, 0xb8,
	0x47, 0x28, 0x70, 0xca, 0x5f, 0x81, 0x76, 0x76, 0x13, 0xef, 0x7a, 0x67, 0x1c, 0xaf, 0xd3, 0x5c,
	0x56, 0xbb, 0xe3, 0xf7, 0xde, 0x7c, 0xde, 0xbe, 0x37, 0xf3, 0x9d, 0x35, 0x54, 0x87, 0x54, 0xf8,
	0x9c, 0x5b, 0x82, 0x52, 0x69, 0xb9, 0x54, 0x58, 0x1e, 0x1b, 0x07, 0x2e, 0xb3, 0xc4, 0x21, 0x0f,
	0x39, 0x5e, 0xd7, 0xff, 0x5a, 0xc9, 0x8c, 0xf7, 0xa9, 0x4c, 0xec, 0x2b, 0xe5, 0xf4, 0x78, 0x3a,
	0x52, 0x65, 0xcb, 0x0f, 0xc2, 0xfd, 0xa7, 0x7d, 0xcb, 0xe5, 0x43, 0xdb, 0xe7, 0x3e, 0xb7, 0xd5,
	0x70, 0xff, 0xe9, 0x40, 0x3d, 0xa9, 0x07, 0x75, 0x97, 0x98, 0x57, 0x7d, 0xce, 0xfd, 0x03, 0x66,
	0x53, 0x11, 0xd8, 0x74, 0x34, 0xe2, 0x21, 0x0d, 0x03, 0x3e, 0x92, 0xf1, 0xaf, 0xe4, 0x43, 0x78,
	0xa3, 0xc3, 0xc2, 0xcf, 0xfa, 0x5f, 0x33, 0x37, 0xdc, 0xdd, 0x69, 0x1f, 0xed, 0x0e, 0x59, 0xb0,
	0x4d, 0xdd, 0x7d, 0xe6, 0xb0, 0x27, 0xb8, 0x0a, 0xcb, 0xc1, 0x90, 0x05, 0x65, 0xd4, 0x40, 0xcd,
	0x95, 0xf6, 0x8d, 0xd3, 0xe3, 0xba, 0x7a, 0x76, 0xd4, 0x95, 0x7c, 0x8f, 0xa0, 0x62, 0xf2, 0x95,
	0x02, 0x7f, 0x0c, 0xcb, 0x51, 0x3a, 0xca, 0xb9, 0xd4, 0xaa, 0x59, 0xb9, 0x3c, 0xdb, 0x54, 0x2a,
	0xcb, 0xdd, 0xd1, 0x80, 0xc7, 0xc1, 0xa3, 0x61, 0x47, 0x5d, 0xf1, 0x26, 0xac, 0x70, 0x15, 0x78,
	0x2f, 0xf0, 0xca, 0x4b, 0x0d, 0xd4, 0x5c, 0x6d, 0xaf, 0x9e, 0x1e, 0xd7, 0x27, 0x83, 0xce, 0x8d,
	0xf8, 0x76, 0xd7, 0x23, 0x2e, 0x6c, 0xf4, 0x58, 0x18, 0xcd, 0x9e, 0xb0, 0x78, 0xf3, 0x65, 0x50,
	0x68, 0x92, 0x2f, 0xa1, 0xac, 0x9f, 0xe4, 0xb2, 0xa9, 0x26, 0x91, 0x77, 0x54, 0x89, 0xbb, 0xf4,
	0x90, 0x0e, 0xe5, 0xcb, 0x8a, 0xfc, 0x10, 0x36, 0x3a, 0xda, 0xc8, 0x4f, 0xb2, 0xa9, 0xa3, 0xd9,
	0xa9, 0xbf, 0x40, 0x50, 0xee, 0x5c, 0x09, 0x21, 0x7e, 0x04, 0xe0, 0xb1, 0xf1, 0x9e, 0x50, 0x41,
	0xcb, 0x4b, 0x8d, 0xeb, 0xcd, 0x52, 0xeb, 0x76, 0x3e, 0x46, 0x6a, 0xea, 0xf6, 0xab, 0xa7, 0xc7,
	0xf5, 0x94, 0x93, 0xb3, 0xe2, 0xb1, 0x71, 0x0c, 0x45, 0x3a, 0xaa, 0x99, 0x63, 0xe3, 0x68, 0xda,
	0x68, 0xca, 0x85, 0x32, 0x7e, 0x16, 0xb7, 0xb6, 0x36, 0xd2, 0xa5, 0x73, 0xfe, 0x04, 0x96, 0x83,
	0xd1, 0x80, 0xab, 0x86, 0x2b, 0xb5, 0x1a, 0xa6, 0x6c, 0xcf, 0xa6, 0x4d, 0xba, 0x76, 0x34, 0xe0,
	0x8e, 0xba, 0x92, 0x6d, 0x58, 0x3b, 0x67, 0x5b, 0x38, 0xc3, 0x1f, 0x10, 0xac, 0xeb, 0xa2, 0x5c,
	0x3a, 0xbb, 0x8f, 0x32, 0xd9, 0x55, 0x4d, 0xd9, 0x69, 0x33, 0xeb, 0xc1, 0x5a, 0x4f, 0x9b, 0xd9,
	0x59, 0x50, 0xb4, 0x40, 0xd0, 0xc7, 0xb0, 0xde, 0xbb, 0x82, 0x44, 0x49, 0x17, 0xea, 0x93, 0x17,
	0xe8, 0xc9, 0xf6, 0xd1, 0x63, 0xb6, 0x1f, 0xb8, 0x07, 0x2c, 0xb5, 0xfb, 0x6c, 0x01, 0x8c, 0xe3,
	0xc1, 0x49, 0x45, 0x54, 0xfb, 0x4e, 0x46, 0x9d, 0x95, 0xf1, 0x99, 0x1b, 0xf9, 0x16, 0x41, 0x63,
	0x76, 0xc8, 0x4b, 0x57, 0xa7, 0x0e, 0xa5, 0x58, 0x4b, 0xf6, 0x0e, 0x02, 0x19, 0xaa, 0x05, 0xb7,
	0xea, 0x40, 0x3c, 0xf4, 0x28, 0x90, 0x21, 0x71, 0xa1, 0xf2, 0x85, 0xf0, 0x68, 0xc8, 0x62, 0x8a,
	0x6d, 0x3e, 0x1a, 0x04, 0xfe, 0x79, 0x42, 0x0f, 0xa1, 0xe4, 0xaa, 0x91, 0xbd, 0x54, 0x39, 0xee,
	0x58, 0x1a, 0xa9, 0x4a, 0xbb, 0x47, 0x24, 0x0e, 0xb8, 0xe7, 0xf7, 0xe4, 0x73, 0xb8, 0x65, 0x9c,
	0x44, 0x0a, 0xdc, 0x2a, 0x92, 0x62, 0x52, 0x8d, 0xf7, 0x60, 0x63, 0x87, 0x1d, 0x68, 0xa1, 0x6f,
	0xe5, 0x96, 0x45, 0x6a, 0x1d, 0x7c, 0x0a, 0x65, 0xbd, 0xdf, 0xe2, 0x1c, 0xe7, 0x25, 0x2c, 0xc2,
	0xf1, 0x53, 0x7a, 0x8f, 0x7d, 0x09, 0x20, 0xd3, 0xa5, 0x5a, 0x5a, 0xac, 0x54, 0xad, 0x5f, 0x5f,
	0x87, 0xd7, 0x12, 0x83, 0x08, 0xa7, 0x7b, 0xc8, 0xbf, 0x39, 0xc2, 0x2f, 0xe2, 0xcd, 0x43, 0xa3,
	0xfc, 0xf8, 0x5d, 0xcb, 0x70, 0x0a, 0x32, 0x9e, 0x32, 0x2a, 0xad, 0xa2, 0x2e, 0x52, 0x90, 0xbb,
	0xdf, 0xfd, 0xfd, 0xdf, 0x8f, 0x4b, 0x75, 0x72, 0xdb, 0x76, 0xa9, 0xb0, 0x63, 0x7b, 0xdb, 0x9f,
	0xb6, 0xc7, 0xcf, 0x10, 0xdc, 0xd4, 0x69, 0x2b, 0xbe, 0xa7, 0x7b, 0x11, 0x53, 0x96, 0x11, 0xdb,
	0x7d, 0x13, 0x9b, 0x49, 0xb1, 0x49, 0x53, 0x91, 0x11, 0xd2, 0x48, 0x93, 0x49, 0x1d, 0xc3, 0x73,
	0x04, 0x37, 0x75, 0xb2, 0x8a, 0xed, 0x19, 0x2f, 0x44, 0x27, 0xe6, 0x66, 0xca, 0x4e, 0x21, 0x4a,
	0x5f, 0x07, 0xf3, 0x5b, 0x5a, 0x28, 0x32, 0x52, 0x38, 0xb3, 0xd6, 0x7a, 0x11, 0x9e, 0x59, 0x6b,
	0x83, 0xda, 0x92, 0x4d, 0xc5, 0x7a, 0x87, 0x10, 0x2d, 0x6b, 0x16, 0xe9, 0x17, 0x04, 0x38, 0x2f,
	0x6b, 0x78, 0xeb, 0xc2, 0x69, 0x33, 0x94, 0x56, 0x11, 0x73, 0x29, 0xc8, 0x3d, 0x45, 0xd8, 0x20,
	0x35, 0x2d, 0x61, 0x96, 0xae, 0x57, 0x80, 0xae, 0x57, 0x8c, 0xae, 0x57, 0x80, 0x4e, 0xe6, 0x31,
	0x9e, 0xc7, 0x8b, 0x25, 0x77, 0xc4, 0x35, 0xf7, 0xa3, 0xe1, 0xd4, 0x3d, 0x73, 0xd5, 0x68, 0x4f,
	0xd0, 0xc6, 0x55, 0x93, 0x87, 0xf9, 0x03, 0x41, 0x75, 0x96, 0x48, 0xe2, 0xf7, 0x2f, 0x2e, 0x9e,
	0x56, 0xad, 0x2b, 0x1f, 0x2c, 0xe6, 0x28, 0x05, 0xb9, 0xaf, 0xe8, 0x37, 0x49, 0x53, 0x5f, 0x7f,
	0x0d, 0xe4, 0xef, 0x08, 0x36, 0x0c, 0x12, 0x88, 0x8d, 0x6b, 0xc4, 0x2c, 0xcc, 0x95, 0x07, 0x85,
	0x7d, 0xa4, 0x20, 0xef, 0x28, 0xec, 0xbb, 0xe4, 0xad, 0x34, 0xb6, 0x89, 0x2a, 0xea, 0x0e, 0x9d,
	0x52, 0x9a, 0xbb, 0xc3, 0xa0, 0xc7, 0xe6, 0xee, 0x30, 0x09, 0xb1, 0xbe, 0x3b, 0xb4, 0x30, 0x99,
	0x3d, 0x75, 0x2e, 0x4a, 0x83, 0x5a, 0xcf, 0xb1, 0xa7, 0xce, 0x45, 0xa9, 0x85, 0x89, 0x3e, 0xa8,
	0x7a, 0x67, 0x62, 0xb5, 0x4d, 0x87, 0xec, 0x90, 0x4e, 0x96, 0xa1, 0x6d, 0x90, 0x26, 0xad, 0x75,
	0x9e, 0xf4, 0x42, 0x07, 0x29, 0xc8, 0xdb, 0x8a, 0xf4, 0x4d, 0x52, 0x4f, 0x93, 0x6a, 0x3c, 0x70,
	0xf2, 0xe5, 0x57, 0x00, 0xb4, 0x53, 0x14, 0xb4, 0x33, 0x07, 0x28, 0xae, 0x4f, 0xbd, 0xd2, 0x69,
	0x8f, 0xf6, 0xda, 0x9f, 0x27, 0x35, 0xf4, 0xd7, 0x49, 0x0d, 0xfd, 0x73, 0x52, 0x43, 0x3f, 0xff,
	0x5b, 0xbb, 0xf6, 0xd5, 0x75, 0x2a, 0x82, 0xee, 0xb5, 0x2e, 0xea, 0xbf, 0xa2, 0xfe, 0xe8, 0x78,
	0xf0, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x95, 0xc6, 0x59, 0x92, 0x9f, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceCacheProxyClient is the client API for DeviceCacheProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceCacheProxyClient interface {
	// 根据IMEI获取ObjectID
	GetObjectIDByImeiCache(ctx context.Context, in *GetObjectIDByImeiCacheReq, opts ...grpc.CallOption) (*GetObjectIDByImeiCacheResp, error)
	// 设备能力上传数据缓存
	SetDeviceParamsCache(ctx context.Context, in *SetDeviceParamsReq, opts ...grpc.CallOption) (*SetDeviceParamsCacheResp, error)
	// 获取设备参数缓存数据
	GetDeviceParamsCache(ctx context.Context, in *GetDeviceParamsCacheReq, opts ...grpc.CallOption) (*GetDeviceParamsCacheResp, error)
	// 获取设备基本信息缓存接口
	GetDeviceBaseInfoCache(ctx context.Context, in *GetDeviceBaseInfoCacheReq, opts ...grpc.CallOption) (*GetDeviceBaseInfoCacheResp, error)
	// 获取设备信息缓存接口
	GetDeviceInfoCache(ctx context.Context, in *GetDeviceInfoCacheReq, opts ...grpc.CallOption) (*GetDeviceInfoCacheResp, error)
	// 设置设备信息缓存接口
	SetDeviceInfoCache(ctx context.Context, in *SetDeviceInfoCacheReq, opts ...grpc.CallOption) (*SetDeviceInfoCacheResp, error)
	// 设置IMEI对应ObjectID关系缓存
	SetImeiObjectIdCache(ctx context.Context, in *SetImeiObjectIdCacheReq, opts ...grpc.CallOption) (*SetImeiObjectIdCacheResp, error)
	// 根据车辆ID获取对应ObjectID关系缓存
	GetDeviceIdsByVehicleIdCache(ctx context.Context, in *GetDeviceIdsByVehicleIdCacheReq, opts ...grpc.CallOption) (*GetDeviceIdsByVehicleIdCacheResp, error)
	//保存设备配置信息
	UpdateDeviceConfigCache(ctx context.Context, in *UpdateDeviceConfigCacheReq, opts ...grpc.CallOption) (*UpdateDeviceConfigCacheResp, error)
	//删除设备配置信息
	DelDeviceConfigCache(ctx context.Context, in *DelDeviceConfigCacheReq, opts ...grpc.CallOption) (*DelDeviceConfigCacheResp, error)
	//获取设备配置缓存参数
	GetDeviceConfigCache(ctx context.Context, in *GetDeviceConfigCacheReq, opts ...grpc.CallOption) (*GetDeviceConfigCacheResp, error)
	//设置设备摄像头信息缓存
	SetObjectCameraInfoCache(ctx context.Context, in *SetObjectCameraInfoCacheReq, opts ...grpc.CallOption) (*SetObjectCameraInfoCacheResp, error)
	//获取设备摄像头信息缓存
	GetObjectCameraInfoCache(ctx context.Context, in *GetObjectCameraInfoCacheReq, opts ...grpc.CallOption) (*GetObjectCameraInfoCacheResp, error)
}

type deviceCacheProxyClient struct {
	cc *grpc.ClientConn
}

func NewDeviceCacheProxyClient(cc *grpc.ClientConn) DeviceCacheProxyClient {
	return &deviceCacheProxyClient{cc}
}

func (c *deviceCacheProxyClient) GetObjectIDByImeiCache(ctx context.Context, in *GetObjectIDByImeiCacheReq, opts ...grpc.CallOption) (*GetObjectIDByImeiCacheResp, error) {
	out := new(GetObjectIDByImeiCacheResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.cap.device.DeviceCacheProxy/GetObjectIDByImeiCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCacheProxyClient) SetDeviceParamsCache(ctx context.Context, in *SetDeviceParamsReq, opts ...grpc.CallOption) (*SetDeviceParamsCacheResp, error) {
	out := new(SetDeviceParamsCacheResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.cap.device.DeviceCacheProxy/SetDeviceParamsCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCacheProxyClient) GetDeviceParamsCache(ctx context.Context, in *GetDeviceParamsCacheReq, opts ...grpc.CallOption) (*GetDeviceParamsCacheResp, error) {
	out := new(GetDeviceParamsCacheResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.cap.device.DeviceCacheProxy/GetDeviceParamsCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCacheProxyClient) GetDeviceBaseInfoCache(ctx context.Context, in *GetDeviceBaseInfoCacheReq, opts ...grpc.CallOption) (*GetDeviceBaseInfoCacheResp, error) {
	out := new(GetDeviceBaseInfoCacheResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.cap.device.DeviceCacheProxy/GetDeviceBaseInfoCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCacheProxyClient) GetDeviceInfoCache(ctx context.Context, in *GetDeviceInfoCacheReq, opts ...grpc.CallOption) (*GetDeviceInfoCacheResp, error) {
	out := new(GetDeviceInfoCacheResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.cap.device.DeviceCacheProxy/GetDeviceInfoCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCacheProxyClient) SetDeviceInfoCache(ctx context.Context, in *SetDeviceInfoCacheReq, opts ...grpc.CallOption) (*SetDeviceInfoCacheResp, error) {
	out := new(SetDeviceInfoCacheResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.cap.device.DeviceCacheProxy/SetDeviceInfoCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCacheProxyClient) SetImeiObjectIdCache(ctx context.Context, in *SetImeiObjectIdCacheReq, opts ...grpc.CallOption) (*SetImeiObjectIdCacheResp, error) {
	out := new(SetImeiObjectIdCacheResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.cap.device.DeviceCacheProxy/SetImeiObjectIdCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCacheProxyClient) GetDeviceIdsByVehicleIdCache(ctx context.Context, in *GetDeviceIdsByVehicleIdCacheReq, opts ...grpc.CallOption) (*GetDeviceIdsByVehicleIdCacheResp, error) {
	out := new(GetDeviceIdsByVehicleIdCacheResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.cap.device.DeviceCacheProxy/GetDeviceIdsByVehicleIdCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCacheProxyClient) UpdateDeviceConfigCache(ctx context.Context, in *UpdateDeviceConfigCacheReq, opts ...grpc.CallOption) (*UpdateDeviceConfigCacheResp, error) {
	out := new(UpdateDeviceConfigCacheResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.cap.device.DeviceCacheProxy/UpdateDeviceConfigCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCacheProxyClient) DelDeviceConfigCache(ctx context.Context, in *DelDeviceConfigCacheReq, opts ...grpc.CallOption) (*DelDeviceConfigCacheResp, error) {
	out := new(DelDeviceConfigCacheResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.cap.device.DeviceCacheProxy/DelDeviceConfigCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCacheProxyClient) GetDeviceConfigCache(ctx context.Context, in *GetDeviceConfigCacheReq, opts ...grpc.CallOption) (*GetDeviceConfigCacheResp, error) {
	out := new(GetDeviceConfigCacheResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.cap.device.DeviceCacheProxy/GetDeviceConfigCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCacheProxyClient) SetObjectCameraInfoCache(ctx context.Context, in *SetObjectCameraInfoCacheReq, opts ...grpc.CallOption) (*SetObjectCameraInfoCacheResp, error) {
	out := new(SetObjectCameraInfoCacheResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.cap.device.DeviceCacheProxy/SetObjectCameraInfoCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceCacheProxyClient) GetObjectCameraInfoCache(ctx context.Context, in *GetObjectCameraInfoCacheReq, opts ...grpc.CallOption) (*GetObjectCameraInfoCacheResp, error) {
	out := new(GetObjectCameraInfoCacheResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.cap.device.DeviceCacheProxy/GetObjectCameraInfoCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceCacheProxyServer is the server API for DeviceCacheProxy service.
type DeviceCacheProxyServer interface {
	// 根据IMEI获取ObjectID
	GetObjectIDByImeiCache(context.Context, *GetObjectIDByImeiCacheReq) (*GetObjectIDByImeiCacheResp, error)
	// 设备能力上传数据缓存
	SetDeviceParamsCache(context.Context, *SetDeviceParamsReq) (*SetDeviceParamsCacheResp, error)
	// 获取设备参数缓存数据
	GetDeviceParamsCache(context.Context, *GetDeviceParamsCacheReq) (*GetDeviceParamsCacheResp, error)
	// 获取设备基本信息缓存接口
	GetDeviceBaseInfoCache(context.Context, *GetDeviceBaseInfoCacheReq) (*GetDeviceBaseInfoCacheResp, error)
	// 获取设备信息缓存接口
	GetDeviceInfoCache(context.Context, *GetDeviceInfoCacheReq) (*GetDeviceInfoCacheResp, error)
	// 设置设备信息缓存接口
	SetDeviceInfoCache(context.Context, *SetDeviceInfoCacheReq) (*SetDeviceInfoCacheResp, error)
	// 设置IMEI对应ObjectID关系缓存
	SetImeiObjectIdCache(context.Context, *SetImeiObjectIdCacheReq) (*SetImeiObjectIdCacheResp, error)
	// 根据车辆ID获取对应ObjectID关系缓存
	GetDeviceIdsByVehicleIdCache(context.Context, *GetDeviceIdsByVehicleIdCacheReq) (*GetDeviceIdsByVehicleIdCacheResp, error)
	//保存设备配置信息
	UpdateDeviceConfigCache(context.Context, *UpdateDeviceConfigCacheReq) (*UpdateDeviceConfigCacheResp, error)
	//删除设备配置信息
	DelDeviceConfigCache(context.Context, *DelDeviceConfigCacheReq) (*DelDeviceConfigCacheResp, error)
	//获取设备配置缓存参数
	GetDeviceConfigCache(context.Context, *GetDeviceConfigCacheReq) (*GetDeviceConfigCacheResp, error)
	//设置设备摄像头信息缓存
	SetObjectCameraInfoCache(context.Context, *SetObjectCameraInfoCacheReq) (*SetObjectCameraInfoCacheResp, error)
	//获取设备摄像头信息缓存
	GetObjectCameraInfoCache(context.Context, *GetObjectCameraInfoCacheReq) (*GetObjectCameraInfoCacheResp, error)
}

// UnimplementedDeviceCacheProxyServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceCacheProxyServer struct {
}

func (*UnimplementedDeviceCacheProxyServer) GetObjectIDByImeiCache(ctx context.Context, req *GetObjectIDByImeiCacheReq) (*GetObjectIDByImeiCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectIDByImeiCache not implemented")
}
func (*UnimplementedDeviceCacheProxyServer) SetDeviceParamsCache(ctx context.Context, req *SetDeviceParamsReq) (*SetDeviceParamsCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceParamsCache not implemented")
}
func (*UnimplementedDeviceCacheProxyServer) GetDeviceParamsCache(ctx context.Context, req *GetDeviceParamsCacheReq) (*GetDeviceParamsCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceParamsCache not implemented")
}
func (*UnimplementedDeviceCacheProxyServer) GetDeviceBaseInfoCache(ctx context.Context, req *GetDeviceBaseInfoCacheReq) (*GetDeviceBaseInfoCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceBaseInfoCache not implemented")
}
func (*UnimplementedDeviceCacheProxyServer) GetDeviceInfoCache(ctx context.Context, req *GetDeviceInfoCacheReq) (*GetDeviceInfoCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfoCache not implemented")
}
func (*UnimplementedDeviceCacheProxyServer) SetDeviceInfoCache(ctx context.Context, req *SetDeviceInfoCacheReq) (*SetDeviceInfoCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceInfoCache not implemented")
}
func (*UnimplementedDeviceCacheProxyServer) SetImeiObjectIdCache(ctx context.Context, req *SetImeiObjectIdCacheReq) (*SetImeiObjectIdCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetImeiObjectIdCache not implemented")
}
func (*UnimplementedDeviceCacheProxyServer) GetDeviceIdsByVehicleIdCache(ctx context.Context, req *GetDeviceIdsByVehicleIdCacheReq) (*GetDeviceIdsByVehicleIdCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceIdsByVehicleIdCache not implemented")
}
func (*UnimplementedDeviceCacheProxyServer) UpdateDeviceConfigCache(ctx context.Context, req *UpdateDeviceConfigCacheReq) (*UpdateDeviceConfigCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceConfigCache not implemented")
}
func (*UnimplementedDeviceCacheProxyServer) DelDeviceConfigCache(ctx context.Context, req *DelDeviceConfigCacheReq) (*DelDeviceConfigCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDeviceConfigCache not implemented")
}
func (*UnimplementedDeviceCacheProxyServer) GetDeviceConfigCache(ctx context.Context, req *GetDeviceConfigCacheReq) (*GetDeviceConfigCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceConfigCache not implemented")
}
func (*UnimplementedDeviceCacheProxyServer) SetObjectCameraInfoCache(ctx context.Context, req *SetObjectCameraInfoCacheReq) (*SetObjectCameraInfoCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetObjectCameraInfoCache not implemented")
}
func (*UnimplementedDeviceCacheProxyServer) GetObjectCameraInfoCache(ctx context.Context, req *GetObjectCameraInfoCacheReq) (*GetObjectCameraInfoCacheResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectCameraInfoCache not implemented")
}

func RegisterDeviceCacheProxyServer(s *grpc.Server, srv DeviceCacheProxyServer) {
	s.RegisterService(&_DeviceCacheProxy_serviceDesc, srv)
}

func _DeviceCacheProxy_GetObjectIDByImeiCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectIDByImeiCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCacheProxyServer).GetObjectIDByImeiCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.cap.device.DeviceCacheProxy/GetObjectIDByImeiCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCacheProxyServer).GetObjectIDByImeiCache(ctx, req.(*GetObjectIDByImeiCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCacheProxy_SetDeviceParamsCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceParamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCacheProxyServer).SetDeviceParamsCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.cap.device.DeviceCacheProxy/SetDeviceParamsCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCacheProxyServer).SetDeviceParamsCache(ctx, req.(*SetDeviceParamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCacheProxy_GetDeviceParamsCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceParamsCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCacheProxyServer).GetDeviceParamsCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.cap.device.DeviceCacheProxy/GetDeviceParamsCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCacheProxyServer).GetDeviceParamsCache(ctx, req.(*GetDeviceParamsCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCacheProxy_GetDeviceBaseInfoCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceBaseInfoCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCacheProxyServer).GetDeviceBaseInfoCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.cap.device.DeviceCacheProxy/GetDeviceBaseInfoCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCacheProxyServer).GetDeviceBaseInfoCache(ctx, req.(*GetDeviceBaseInfoCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCacheProxy_GetDeviceInfoCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceInfoCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCacheProxyServer).GetDeviceInfoCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.cap.device.DeviceCacheProxy/GetDeviceInfoCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCacheProxyServer).GetDeviceInfoCache(ctx, req.(*GetDeviceInfoCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCacheProxy_SetDeviceInfoCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceInfoCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCacheProxyServer).SetDeviceInfoCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.cap.device.DeviceCacheProxy/SetDeviceInfoCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCacheProxyServer).SetDeviceInfoCache(ctx, req.(*SetDeviceInfoCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCacheProxy_SetImeiObjectIdCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetImeiObjectIdCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCacheProxyServer).SetImeiObjectIdCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.cap.device.DeviceCacheProxy/SetImeiObjectIdCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCacheProxyServer).SetImeiObjectIdCache(ctx, req.(*SetImeiObjectIdCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCacheProxy_GetDeviceIdsByVehicleIdCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceIdsByVehicleIdCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCacheProxyServer).GetDeviceIdsByVehicleIdCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.cap.device.DeviceCacheProxy/GetDeviceIdsByVehicleIdCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCacheProxyServer).GetDeviceIdsByVehicleIdCache(ctx, req.(*GetDeviceIdsByVehicleIdCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCacheProxy_UpdateDeviceConfigCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceConfigCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCacheProxyServer).UpdateDeviceConfigCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.cap.device.DeviceCacheProxy/UpdateDeviceConfigCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCacheProxyServer).UpdateDeviceConfigCache(ctx, req.(*UpdateDeviceConfigCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCacheProxy_DelDeviceConfigCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDeviceConfigCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCacheProxyServer).DelDeviceConfigCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.cap.device.DeviceCacheProxy/DelDeviceConfigCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCacheProxyServer).DelDeviceConfigCache(ctx, req.(*DelDeviceConfigCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCacheProxy_GetDeviceConfigCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceConfigCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCacheProxyServer).GetDeviceConfigCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.cap.device.DeviceCacheProxy/GetDeviceConfigCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCacheProxyServer).GetDeviceConfigCache(ctx, req.(*GetDeviceConfigCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCacheProxy_SetObjectCameraInfoCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetObjectCameraInfoCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCacheProxyServer).SetObjectCameraInfoCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.cap.device.DeviceCacheProxy/SetObjectCameraInfoCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCacheProxyServer).SetObjectCameraInfoCache(ctx, req.(*SetObjectCameraInfoCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceCacheProxy_GetObjectCameraInfoCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectCameraInfoCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCacheProxyServer).GetObjectCameraInfoCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.cap.device.DeviceCacheProxy/GetObjectCameraInfoCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCacheProxyServer).GetObjectCameraInfoCache(ctx, req.(*GetObjectCameraInfoCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceCacheProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mapgoo.paas.cap.device.DeviceCacheProxy",
	HandlerType: (*DeviceCacheProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetObjectIDByImeiCache",
			Handler:    _DeviceCacheProxy_GetObjectIDByImeiCache_Handler,
		},
		{
			MethodName: "SetDeviceParamsCache",
			Handler:    _DeviceCacheProxy_SetDeviceParamsCache_Handler,
		},
		{
			MethodName: "GetDeviceParamsCache",
			Handler:    _DeviceCacheProxy_GetDeviceParamsCache_Handler,
		},
		{
			MethodName: "GetDeviceBaseInfoCache",
			Handler:    _DeviceCacheProxy_GetDeviceBaseInfoCache_Handler,
		},
		{
			MethodName: "GetDeviceInfoCache",
			Handler:    _DeviceCacheProxy_GetDeviceInfoCache_Handler,
		},
		{
			MethodName: "SetDeviceInfoCache",
			Handler:    _DeviceCacheProxy_SetDeviceInfoCache_Handler,
		},
		{
			MethodName: "SetImeiObjectIdCache",
			Handler:    _DeviceCacheProxy_SetImeiObjectIdCache_Handler,
		},
		{
			MethodName: "GetDeviceIdsByVehicleIdCache",
			Handler:    _DeviceCacheProxy_GetDeviceIdsByVehicleIdCache_Handler,
		},
		{
			MethodName: "UpdateDeviceConfigCache",
			Handler:    _DeviceCacheProxy_UpdateDeviceConfigCache_Handler,
		},
		{
			MethodName: "DelDeviceConfigCache",
			Handler:    _DeviceCacheProxy_DelDeviceConfigCache_Handler,
		},
		{
			MethodName: "GetDeviceConfigCache",
			Handler:    _DeviceCacheProxy_GetDeviceConfigCache_Handler,
		},
		{
			MethodName: "SetObjectCameraInfoCache",
			Handler:    _DeviceCacheProxy_SetObjectCameraInfoCache_Handler,
		},
		{
			MethodName: "GetObjectCameraInfoCache",
			Handler:    _DeviceCacheProxy_GetObjectCameraInfoCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapgoo.paas.cap.device.proto",
}

func (m *GetObjectIDByImeiCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetObjectIDByImeiCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetObjectIDByImeiCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Imei) > 0 {
		i -= len(m.Imei)
		copy(dAtA[i:], m.Imei)
		i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(len(m.Imei)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetObjectIDByImeiCacheResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetObjectIDByImeiCacheResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetObjectIDByImeiCacheResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetImeiObjectIdCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetImeiObjectIdCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetImeiObjectIdCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Imei) > 0 {
		i -= len(m.Imei)
		copy(dAtA[i:], m.Imei)
		i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(len(m.Imei)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetImeiObjectIdCacheResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetImeiObjectIdCacheResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetImeiObjectIdCacheResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetDeviceParamsCacheResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDeviceParamsCacheResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDeviceParamsCacheResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceParamsCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceParamsCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceParamsCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceParamsCacheResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceParamsCacheResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceParamsCacheResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DevParams) > 0 {
		for iNdEx := len(m.DevParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DevParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceBaseInfoCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceBaseInfoCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceBaseInfoCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceBaseInfoCacheResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceBaseInfoCacheResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceBaseInfoCacheResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceInfoCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceInfoCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceInfoCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceInfoCacheResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceInfoCacheResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceInfoCacheResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetDeviceInfoCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDeviceInfoCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDeviceInfoCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetDeviceInfoCacheResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDeviceInfoCacheResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDeviceInfoCacheResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceIdsByVehicleIdCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceIdsByVehicleIdCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceIdsByVehicleIdCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VehicleId != 0 {
		i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(m.VehicleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceIdsByVehicleIdCacheResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceIdsByVehicleIdCacheResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceIdsByVehicleIdCacheResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeviceList) > 0 {
		dAtA12 := make([]byte, len(m.DeviceList)*10)
		var j11 int
		for _, num := range m.DeviceList {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDeviceConfigCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDeviceConfigCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDeviceConfigCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConfigInfo != nil {
		{
			size, err := m.ConfigInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDeviceConfigCacheResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDeviceConfigCacheResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDeviceConfigCacheResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelDeviceConfigCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelDeviceConfigCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelDeviceConfigCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelDeviceConfigCacheResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelDeviceConfigCacheResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelDeviceConfigCacheResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceConfigCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceConfigCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceConfigCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceConfigCacheResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceConfigCacheResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceConfigCacheResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConfigInfo != nil {
		{
			size, err := m.ConfigInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasCapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMapgooPaasCapDevice(dAtA []byte, offset int, v uint64) int {
	offset -= sovMapgooPaasCapDevice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetObjectIDByImeiCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Imei)
	if l > 0 {
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetObjectIDByImeiCacheResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasCapDevice(uint64(m.ObjectId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetImeiObjectIdCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Imei)
	if l > 0 {
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasCapDevice(uint64(m.ObjectId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetImeiObjectIdCacheResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetDeviceParamsCacheResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceParamsCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasCapDevice(uint64(m.ObjectId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceParamsCacheResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if len(m.DevParams) > 0 {
		for _, e := range m.DevParams {
			l = e.Size()
			n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceBaseInfoCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasCapDevice(uint64(m.ObjectId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceBaseInfoCacheResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceInfoCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasCapDevice(uint64(m.ObjectId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceInfoCacheResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetDeviceInfoCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetDeviceInfoCacheResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceIdsByVehicleIdCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VehicleId != 0 {
		n += 1 + sovMapgooPaasCapDevice(uint64(m.VehicleId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceIdsByVehicleIdCacheResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if len(m.DeviceList) > 0 {
		l = 0
		for _, e := range m.DeviceList {
			l += sovMapgooPaasCapDevice(uint64(e))
		}
		n += 1 + sovMapgooPaasCapDevice(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDeviceConfigCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigInfo != nil {
		l = m.ConfigInfo.Size()
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDeviceConfigCacheResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelDeviceConfigCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasCapDevice(uint64(m.ObjectId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelDeviceConfigCacheResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceConfigCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasCapDevice(uint64(m.ObjectId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceConfigCacheResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if m.ConfigInfo != nil {
		l = m.ConfigInfo.Size()
		n += 1 + l + sovMapgooPaasCapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMapgooPaasCapDevice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMapgooPaasCapDevice(x uint64) (n int) {
	return sovMapgooPaasCapDevice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetObjectIDByImeiCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetObjectIDByImeiCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetObjectIDByImeiCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetObjectIDByImeiCacheResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetObjectIDByImeiCacheResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetObjectIDByImeiCacheResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetImeiObjectIdCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetImeiObjectIdCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetImeiObjectIdCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetImeiObjectIdCacheResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetImeiObjectIdCacheResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetImeiObjectIdCacheResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDeviceParamsCacheResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDeviceParamsCacheResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDeviceParamsCacheResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceParamsCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceParamsCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceParamsCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceParamsCacheResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceParamsCacheResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceParamsCacheResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevParams = append(m.DevParams, &DeviceParam{})
			if err := m.DevParams[len(m.DevParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceBaseInfoCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceBaseInfoCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceBaseInfoCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceBaseInfoCacheResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceBaseInfoCacheResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceBaseInfoCacheResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &DeviceBaseInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceInfoCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceInfoCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceInfoCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceInfoCacheResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceInfoCacheResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceInfoCacheResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &DeviceInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDeviceInfoCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDeviceInfoCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDeviceInfoCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &DeviceInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDeviceInfoCacheResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDeviceInfoCacheResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDeviceInfoCacheResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceIdsByVehicleIdCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceIdsByVehicleIdCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceIdsByVehicleIdCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VehicleId", wireType)
			}
			m.VehicleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VehicleId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceIdsByVehicleIdCacheResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceIdsByVehicleIdCacheResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceIdsByVehicleIdCacheResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapgooPaasCapDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DeviceList = append(m.DeviceList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapgooPaasCapDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMapgooPaasCapDevice
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMapgooPaasCapDevice
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DeviceList) == 0 {
					m.DeviceList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMapgooPaasCapDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DeviceList = append(m.DeviceList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDeviceConfigCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDeviceConfigCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDeviceConfigCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigInfo == nil {
				m.ConfigInfo = &DeviceConfigInfo{}
			}
			if err := m.ConfigInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDeviceConfigCacheResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDeviceConfigCacheResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDeviceConfigCacheResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelDeviceConfigCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelDeviceConfigCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelDeviceConfigCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelDeviceConfigCacheResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelDeviceConfigCacheResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelDeviceConfigCacheResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceConfigCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceConfigCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceConfigCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceConfigCacheResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceConfigCacheResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceConfigCacheResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigInfo == nil {
				m.ConfigInfo = &DeviceConfigInfo{}
			}
			if err := m.ConfigInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMapgooPaasCapDevice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMapgooPaasCapDevice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapgooPaasCapDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMapgooPaasCapDevice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMapgooPaasCapDevice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMapgooPaasCapDevice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMapgooPaasCapDevice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMapgooPaasCapDevice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMapgooPaasCapDevice = fmt.Errorf("proto: unexpected end of group")
)

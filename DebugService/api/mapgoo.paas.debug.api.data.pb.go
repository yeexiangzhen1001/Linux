// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mapgoo.paas.debug.api.data.proto

package api

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//获取设备路由
type GetRouterInfoReq struct {
	//设备ID
	DeviceId             *DeviceId `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetRouterInfoReq) Reset()         { *m = GetRouterInfoReq{} }
func (m *GetRouterInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetRouterInfoReq) ProtoMessage()    {}
func (*GetRouterInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_90dd6359284756c2, []int{0}
}
func (m *GetRouterInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRouterInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRouterInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRouterInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRouterInfoReq.Merge(m, src)
}
func (m *GetRouterInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetRouterInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRouterInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRouterInfoReq proto.InternalMessageInfo

func (m *GetRouterInfoReq) GetDeviceId() *DeviceId {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

type GetRouterInfoResp struct {
	//返回信息
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	//路由信息
	RouterInfo           *RouterInfo `protobuf:"bytes,2,opt,name=routerInfo,proto3" json:"routerInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetRouterInfoResp) Reset()         { *m = GetRouterInfoResp{} }
func (m *GetRouterInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetRouterInfoResp) ProtoMessage()    {}
func (*GetRouterInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_90dd6359284756c2, []int{1}
}
func (m *GetRouterInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRouterInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRouterInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRouterInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRouterInfoResp.Merge(m, src)
}
func (m *GetRouterInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *GetRouterInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRouterInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRouterInfoResp proto.InternalMessageInfo

func (m *GetRouterInfoResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetRouterInfoResp) GetRouterInfo() *RouterInfo {
	if m != nil {
		return m.RouterInfo
	}
	return nil
}

//获取设备信息
type GetDeviceInfoReq struct {
	//设备id
	DeviceId             *DeviceId `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetDeviceInfoReq) Reset()         { *m = GetDeviceInfoReq{} }
func (m *GetDeviceInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetDeviceInfoReq) ProtoMessage()    {}
func (*GetDeviceInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_90dd6359284756c2, []int{2}
}
func (m *GetDeviceInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceInfoReq.Merge(m, src)
}
func (m *GetDeviceInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceInfoReq proto.InternalMessageInfo

func (m *GetDeviceInfoReq) GetDeviceId() *DeviceId {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

type GetDeviceBaseInfoResp struct {
	//返回信息
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`
	//设备信息
	BaseInfo             *DeviceBaseInfo `protobuf:"bytes,2,opt,name=base_info,json=baseInfo,proto3" json:"base_info"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetDeviceBaseInfoResp) Reset()         { *m = GetDeviceBaseInfoResp{} }
func (m *GetDeviceBaseInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetDeviceBaseInfoResp) ProtoMessage()    {}
func (*GetDeviceBaseInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_90dd6359284756c2, []int{3}
}
func (m *GetDeviceBaseInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceBaseInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceBaseInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceBaseInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceBaseInfoResp.Merge(m, src)
}
func (m *GetDeviceBaseInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceBaseInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceBaseInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceBaseInfoResp proto.InternalMessageInfo

func (m *GetDeviceBaseInfoResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetDeviceBaseInfoResp) GetBaseInfo() *DeviceBaseInfo {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

//添加设备跟踪
type AddDeviceTraceReq struct {
	//设备IMEI
	Imei string `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei,omitempty"`
	//过期时间戳,-1表示永不过期
	Ttl                  int32    `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddDeviceTraceReq) Reset()         { *m = AddDeviceTraceReq{} }
func (m *AddDeviceTraceReq) String() string { return proto.CompactTextString(m) }
func (*AddDeviceTraceReq) ProtoMessage()    {}
func (*AddDeviceTraceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_90dd6359284756c2, []int{4}
}
func (m *AddDeviceTraceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDeviceTraceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDeviceTraceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDeviceTraceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDeviceTraceReq.Merge(m, src)
}
func (m *AddDeviceTraceReq) XXX_Size() int {
	return m.Size()
}
func (m *AddDeviceTraceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDeviceTraceReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddDeviceTraceReq proto.InternalMessageInfo

func (m *AddDeviceTraceReq) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *AddDeviceTraceReq) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type AddDeviceTraceResp struct {
	//返回信息
	Base                 *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AddDeviceTraceResp) Reset()         { *m = AddDeviceTraceResp{} }
func (m *AddDeviceTraceResp) String() string { return proto.CompactTextString(m) }
func (*AddDeviceTraceResp) ProtoMessage()    {}
func (*AddDeviceTraceResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_90dd6359284756c2, []int{5}
}
func (m *AddDeviceTraceResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDeviceTraceResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDeviceTraceResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDeviceTraceResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDeviceTraceResp.Merge(m, src)
}
func (m *AddDeviceTraceResp) XXX_Size() int {
	return m.Size()
}
func (m *AddDeviceTraceResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDeviceTraceResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddDeviceTraceResp proto.InternalMessageInfo

func (m *AddDeviceTraceResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

//删除设备跟踪
type DeleteDeviceTraceReq struct {
	//设备IMEI
	Imei                 string   `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteDeviceTraceReq) Reset()         { *m = DeleteDeviceTraceReq{} }
func (m *DeleteDeviceTraceReq) String() string { return proto.CompactTextString(m) }
func (*DeleteDeviceTraceReq) ProtoMessage()    {}
func (*DeleteDeviceTraceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_90dd6359284756c2, []int{6}
}
func (m *DeleteDeviceTraceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteDeviceTraceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteDeviceTraceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteDeviceTraceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDeviceTraceReq.Merge(m, src)
}
func (m *DeleteDeviceTraceReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteDeviceTraceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDeviceTraceReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDeviceTraceReq proto.InternalMessageInfo

func (m *DeleteDeviceTraceReq) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

type DeleteDeviceTraceResp struct {
	//返回信息
	Base                 *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DeleteDeviceTraceResp) Reset()         { *m = DeleteDeviceTraceResp{} }
func (m *DeleteDeviceTraceResp) String() string { return proto.CompactTextString(m) }
func (*DeleteDeviceTraceResp) ProtoMessage()    {}
func (*DeleteDeviceTraceResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_90dd6359284756c2, []int{7}
}
func (m *DeleteDeviceTraceResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteDeviceTraceResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteDeviceTraceResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteDeviceTraceResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDeviceTraceResp.Merge(m, src)
}
func (m *DeleteDeviceTraceResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteDeviceTraceResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDeviceTraceResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDeviceTraceResp proto.InternalMessageInfo

func (m *DeleteDeviceTraceResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func init() {
	proto.RegisterType((*GetRouterInfoReq)(nil), "mapgoo.paas.debug.api.data.GetRouterInfoReq")
	proto.RegisterType((*GetRouterInfoResp)(nil), "mapgoo.paas.debug.api.data.GetRouterInfoResp")
	proto.RegisterType((*GetDeviceInfoReq)(nil), "mapgoo.paas.debug.api.data.GetDeviceInfoReq")
	proto.RegisterType((*GetDeviceBaseInfoResp)(nil), "mapgoo.paas.debug.api.data.GetDeviceBaseInfoResp")
	proto.RegisterType((*AddDeviceTraceReq)(nil), "mapgoo.paas.debug.api.data.AddDeviceTraceReq")
	proto.RegisterType((*AddDeviceTraceResp)(nil), "mapgoo.paas.debug.api.data.AddDeviceTraceResp")
	proto.RegisterType((*DeleteDeviceTraceReq)(nil), "mapgoo.paas.debug.api.data.DeleteDeviceTraceReq")
	proto.RegisterType((*DeleteDeviceTraceResp)(nil), "mapgoo.paas.debug.api.data.DeleteDeviceTraceResp")
}

func init() { proto.RegisterFile("mapgoo.paas.debug.api.data.proto", fileDescriptor_90dd6359284756c2) }

var fileDescriptor_90dd6359284756c2 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4f, 0x4e, 0xf2, 0x40,
	0x14, 0xff, 0xfa, 0x81, 0x06, 0x9e, 0x31, 0x81, 0x46, 0x0c, 0x69, 0xb4, 0x90, 0xba, 0x31, 0x26,
	0x4e, 0x13, 0x5c, 0x18, 0x13, 0x37, 0x56, 0xa2, 0x12, 0x5c, 0x35, 0xae, 0xd8, 0x90, 0x29, 0x33,
	0xd4, 0x49, 0xa0, 0x53, 0xdb, 0xa9, 0xa7, 0xf0, 0x00, 0xee, 0xbd, 0x8c, 0x4b, 0x4f, 0x40, 0x0c,
	0xee, 0x38, 0x85, 0xe9, 0xb4, 0x96, 0x06, 0x24, 0x06, 0x56, 0x7d, 0xd3, 0xf7, 0xfb, 0xdb, 0x0e,
	0x34, 0xc7, 0xd8, 0x77, 0x39, 0x47, 0x3e, 0xc6, 0x21, 0x22, 0xd4, 0x89, 0x5c, 0x84, 0x7d, 0x86,
	0x08, 0x16, 0x18, 0xf9, 0x01, 0x17, 0x5c, 0xd5, 0x56, 0x23, 0xb4, 0x53, 0x97, 0x89, 0xc7, 0xc8,
	0x41, 0x03, 0x3e, 0x36, 0x5d, 0xee, 0x72, 0x53, 0x52, 0x9c, 0x68, 0x28, 0x4f, 0xf2, 0x20, 0xa7,
	0x44, 0x4a, 0x3b, 0x70, 0x39, 0x77, 0x47, 0xd4, 0xc4, 0x3e, 0x33, 0xb1, 0xe7, 0x71, 0x81, 0x05,
	0xe3, 0x5e, 0x98, 0x6e, 0x0f, 0xf3, 0x46, 0xa1, 0xc0, 0x22, 0x0a, 0x73, 0x39, 0xb4, 0xfd, 0xfc,
	0xda, 0xc1, 0x21, 0x4d, 0xde, 0x1b, 0x5d, 0xa8, 0xdc, 0x52, 0x61, 0xf3, 0x48, 0xd0, 0xa0, 0xe3,
	0x0d, 0xb9, 0x4d, 0x9f, 0xd4, 0x73, 0x28, 0x13, 0xfa, 0xcc, 0x06, 0xb4, 0xcf, 0x48, 0x5d, 0x69,
	0x2a, 0xc7, 0x3b, 0x2d, 0x0d, 0x2d, 0xf1, 0xdb, 0x12, 0xd2, 0x21, 0x76, 0x89, 0xa4, 0x93, 0xf1,
	0xa2, 0x40, 0x75, 0x41, 0x2d, 0xf4, 0xd5, 0x16, 0x14, 0x63, 0x42, 0xaa, 0xa4, 0x2f, 0x2b, 0x59,
	0x38, 0xa4, 0x31, 0x52, 0x32, 0x24, 0x56, 0xbd, 0x06, 0x08, 0x32, 0x95, 0xfa, 0x7f, 0xc9, 0x3c,
	0x42, 0xab, 0x2a, 0xe6, 0x0c, 0x73, 0x34, 0xa3, 0x27, 0xbb, 0xa5, 0x39, 0xd3, 0x6e, 0x37, 0x6b,
	0x75, 0xb3, 0x76, 0x67, 0x93, 0xc6, 0x9c, 0x90, 0xab, 0xfa, 0xa6, 0x40, 0x2d, 0x13, 0x8f, 0x0b,
	0x64, 0x75, 0x2f, 0xd7, 0xa9, 0x6b, 0x95, 0x66, 0x93, 0x86, 0xc4, 0xa7, 0xc5, 0xef, 0xa1, 0x1c,
	0x3f, 0xfb, 0x6c, 0xde, 0xbb, 0xb9, 0x2a, 0xdf, 0x8f, 0x6d, 0x92, 0x32, 0xa3, 0xd9, 0x25, 0x27,
	0x5d, 0x18, 0x17, 0x50, 0xbd, 0x22, 0x24, 0x41, 0x3f, 0x04, 0x78, 0x40, 0xe3, 0x4f, 0xa0, 0x42,
	0x91, 0x8d, 0x29, 0x93, 0x01, 0xcb, 0xb6, 0x9c, 0xd5, 0x0a, 0x14, 0x84, 0x18, 0x49, 0xc3, 0x2d,
	0x3b, 0x1e, 0x8d, 0x3b, 0x50, 0x17, 0xa9, 0x9b, 0xfd, 0x4b, 0xe3, 0x04, 0xf6, 0xda, 0x74, 0x44,
	0x05, 0xfd, 0x3b, 0x87, 0xd1, 0x85, 0xda, 0x2f, 0xd8, 0xcd, 0x8c, 0xad, 0xda, 0xfb, 0x54, 0x57,
	0x3e, 0xa6, 0xba, 0xf2, 0x39, 0xd5, 0x95, 0xd7, 0x2f, 0xfd, 0x5f, 0xaf, 0x80, 0x7d, 0xe6, 0x6c,
	0xcb, 0x9b, 0x7f, 0xf6, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x76, 0x36, 0x3f, 0x93, 0xbd, 0x03, 0x00,
	0x00,
}

func (m *GetRouterInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRouterInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRouterInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeviceId != nil {
		{
			size, err := m.DeviceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDebugApiData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRouterInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRouterInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRouterInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RouterInfo != nil {
		{
			size, err := m.RouterInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDebugApiData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDebugApiData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeviceId != nil {
		{
			size, err := m.DeviceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDebugApiData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceBaseInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceBaseInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceBaseInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BaseInfo != nil {
		{
			size, err := m.BaseInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDebugApiData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDebugApiData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddDeviceTraceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDeviceTraceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDeviceTraceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ttl != 0 {
		i = encodeVarintMapgooPaasDebugApiData(dAtA, i, uint64(m.Ttl))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Imei) > 0 {
		i -= len(m.Imei)
		copy(dAtA[i:], m.Imei)
		i = encodeVarintMapgooPaasDebugApiData(dAtA, i, uint64(len(m.Imei)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddDeviceTraceResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDeviceTraceResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDeviceTraceResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDebugApiData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteDeviceTraceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDeviceTraceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteDeviceTraceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Imei) > 0 {
		i -= len(m.Imei)
		copy(dAtA[i:], m.Imei)
		i = encodeVarintMapgooPaasDebugApiData(dAtA, i, uint64(len(m.Imei)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteDeviceTraceResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDeviceTraceResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteDeviceTraceResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDebugApiData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMapgooPaasDebugApiData(dAtA []byte, offset int, v uint64) int {
	offset -= sovMapgooPaasDebugApiData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetRouterInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceId != nil {
		l = m.DeviceId.Size()
		n += 1 + l + sovMapgooPaasDebugApiData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRouterInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDebugApiData(uint64(l))
	}
	if m.RouterInfo != nil {
		l = m.RouterInfo.Size()
		n += 1 + l + sovMapgooPaasDebugApiData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceId != nil {
		l = m.DeviceId.Size()
		n += 1 + l + sovMapgooPaasDebugApiData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceBaseInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDebugApiData(uint64(l))
	}
	if m.BaseInfo != nil {
		l = m.BaseInfo.Size()
		n += 1 + l + sovMapgooPaasDebugApiData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddDeviceTraceReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Imei)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDebugApiData(uint64(l))
	}
	if m.Ttl != 0 {
		n += 1 + sovMapgooPaasDebugApiData(uint64(m.Ttl))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddDeviceTraceResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDebugApiData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteDeviceTraceReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Imei)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDebugApiData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteDeviceTraceResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDebugApiData(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMapgooPaasDebugApiData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMapgooPaasDebugApiData(x uint64) (n int) {
	return sovMapgooPaasDebugApiData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetRouterInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDebugApiData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRouterInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRouterInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDebugApiData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceId == nil {
				m.DeviceId = &DeviceId{}
			}
			if err := m.DeviceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDebugApiData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRouterInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDebugApiData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRouterInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRouterInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDebugApiData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDebugApiData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouterInfo == nil {
				m.RouterInfo = &RouterInfo{}
			}
			if err := m.RouterInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDebugApiData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDebugApiData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDebugApiData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceId == nil {
				m.DeviceId = &DeviceId{}
			}
			if err := m.DeviceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDebugApiData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceBaseInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDebugApiData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceBaseInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceBaseInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDebugApiData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDebugApiData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfo == nil {
				m.BaseInfo = &DeviceBaseInfo{}
			}
			if err := m.BaseInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDebugApiData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDeviceTraceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDebugApiData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDeviceTraceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDeviceTraceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDebugApiData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDebugApiData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttl |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDebugApiData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDeviceTraceResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDebugApiData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDeviceTraceResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDeviceTraceResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDebugApiData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDebugApiData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDeviceTraceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDebugApiData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDeviceTraceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDeviceTraceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDebugApiData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDebugApiData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDeviceTraceResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDebugApiData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDeviceTraceResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDeviceTraceResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDebugApiData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDebugApiData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDebugApiData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMapgooPaasDebugApiData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMapgooPaasDebugApiData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapgooPaasDebugApiData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapgooPaasDebugApiData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMapgooPaasDebugApiData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMapgooPaasDebugApiData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMapgooPaasDebugApiData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMapgooPaasDebugApiData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMapgooPaasDebugApiData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMapgooPaasDebugApiData = fmt.Errorf("proto: unexpected end of group")
)

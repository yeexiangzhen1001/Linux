// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mapgoo.paas.debug.api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("mapgoo.paas.debug.api.proto", fileDescriptor_bf11b2565c269c77) }

var fileDescriptor_bf11b2565c269c77 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0x87, 0x09, 0x20, 0x86, 0x08, 0x90, 0x88, 0x28, 0xa0, 0x50, 0xa2, 0x2a, 0x33, 0xb5, 0xf9,
	0xf3, 0x04, 0x54, 0x95, 0x10, 0x6b, 0x61, 0x62, 0xbb, 0x34, 0x57, 0x63, 0xa9, 0xcd, 0x99, 0xd8,
	0xe1, 0x01, 0x18, 0x19, 0xba, 0xb0, 0x20, 0x9e, 0x88, 0x11, 0x89, 0x8d, 0x09, 0x15, 0x1e, 0x04,
	0xc5, 0xa9, 0x44, 0x03, 0x51, 0x68, 0xb7, 0xdc, 0xdd, 0x97, 0xfb, 0x7d, 0xb6, 0xec, 0xee, 0x8f,
	0x40, 0x09, 0x22, 0xa6, 0x00, 0x34, 0x8b, 0x31, 0xca, 0x04, 0x03, 0x25, 0x99, 0x4a, 0xc9, 0x90,
	0xd7, 0xa8, 0x1c, 0xfa, 0x6d, 0x21, 0xcd, 0x4d, 0x16, 0xb1, 0x3e, 0x8d, 0xb8, 0x20, 0x41, 0xdc,
	0xd2, 0x51, 0x36, 0xb0, 0x95, 0x2d, 0xec, 0x57, 0xb1, 0xc5, 0x6f, 0x0a, 0x22, 0x31, 0x44, 0x0e,
	0x4a, 0x72, 0x48, 0x12, 0x32, 0x60, 0x24, 0x25, 0x7a, 0x3a, 0x6d, 0x55, 0x0b, 0xc4, 0x60, 0xa0,
	0x20, 0x4e, 0xde, 0x57, 0xdd, 0xf5, 0x6e, 0x3e, 0xb8, 0xc4, 0xf4, 0x4e, 0xf6, 0xd1, 0x7b, 0x70,
	0xdc, 0x8d, 0x73, 0x34, 0x3d, 0xca, 0x0c, 0xa6, 0x17, 0xc9, 0x80, 0xbc, 0x43, 0x56, 0xb3, 0xa5,
	0x84, 0xf6, 0xf0, 0xd6, 0x6f, 0x2f, 0x40, 0x6b, 0x15, 0x36, 0xef, 0xdf, 0xbe, 0x1e, 0x97, 0x77,
	0xc2, 0x6d, 0x6e, 0x51, 0x2e, 0x4a, 0xd1, 0xe3, 0x42, 0xa6, 0x8b, 0xb9, 0xda, 0x5c, 0x32, 0x3f,
	0x68, 0x2e, 0x73, 0x3c, 0x17, 0xdd, 0x01, 0x8d, 0x75, 0x42, 0x33, 0xf1, 0x63, 0xc7, 0xdd, 0x3c,
	0x8b, 0xe3, 0xa2, 0x73, 0x95, 0x42, 0x1f, 0xbd, 0xda, 0x03, 0x97, 0xd9, 0x5c, 0x89, 0x2d, 0x82,
	0x6b, 0x15, 0x1e, 0x58, 0x9f, 0x5d, 0xaf, 0x31, 0xf5, 0x81, 0x72, 0xfa, 0xb3, 0xe3, 0x6e, 0x75,
	0x71, 0x88, 0x06, 0x67, 0xbb, 0x47, 0x75, 0x21, 0x7f, 0xf0, 0x7f, 0x6f, 0xaa, 0xe2, 0x0f, 0xad,
	0xc2, 0x96, 0x35, 0xf3, 0xbd, 0xbd, 0xa9, 0x59, 0xfc, 0x9b, 0xea, 0x34, 0x5e, 0x26, 0x81, 0xf3,
	0x3a, 0x09, 0x9c, 0x8f, 0x49, 0xe0, 0x3c, 0x7d, 0x06, 0x4b, 0xd7, 0x2b, 0xa0, 0x64, 0xb4, 0x66,
	0x9f, 0xde, 0xe9, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x0e, 0x4c, 0xbf, 0x1f, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DebugServiceClient is the client API for DebugService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugServiceClient interface {
	//获取路由信息
	GetRouterInfo(ctx context.Context, in *GetRouterInfoReq, opts ...grpc.CallOption) (*GetRouterInfoResp, error)
	//获取设备信息
	GetDeviceInfo(ctx context.Context, in *GetDeviceInfoReq, opts ...grpc.CallOption) (*GetDeviceBaseInfoResp, error)
	//添加设备跟踪
	AddDeviceTrace(ctx context.Context, in *AddDeviceTraceReq, opts ...grpc.CallOption) (*AddDeviceTraceResp, error)
	//删除设备跟踪
	DeleteDeviceTrace(ctx context.Context, in *DeleteDeviceTraceReq, opts ...grpc.CallOption) (*DeleteDeviceTraceResp, error)
}

type debugServiceClient struct {
	cc *grpc.ClientConn
}

func NewDebugServiceClient(cc *grpc.ClientConn) DebugServiceClient {
	return &debugServiceClient{cc}
}

func (c *debugServiceClient) GetRouterInfo(ctx context.Context, in *GetRouterInfoReq, opts ...grpc.CallOption) (*GetRouterInfoResp, error) {
	out := new(GetRouterInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.debug.api.DebugService/GetRouterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugServiceClient) GetDeviceInfo(ctx context.Context, in *GetDeviceInfoReq, opts ...grpc.CallOption) (*GetDeviceBaseInfoResp, error) {
	out := new(GetDeviceBaseInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.debug.api.DebugService/GetDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugServiceClient) AddDeviceTrace(ctx context.Context, in *AddDeviceTraceReq, opts ...grpc.CallOption) (*AddDeviceTraceResp, error) {
	out := new(AddDeviceTraceResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.debug.api.DebugService/AddDeviceTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugServiceClient) DeleteDeviceTrace(ctx context.Context, in *DeleteDeviceTraceReq, opts ...grpc.CallOption) (*DeleteDeviceTraceResp, error) {
	out := new(DeleteDeviceTraceResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.debug.api.DebugService/DeleteDeviceTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugServiceServer is the server API for DebugService service.
type DebugServiceServer interface {
	//获取路由信息
	GetRouterInfo(context.Context, *GetRouterInfoReq) (*GetRouterInfoResp, error)
	//获取设备信息
	GetDeviceInfo(context.Context, *GetDeviceInfoReq) (*GetDeviceBaseInfoResp, error)
	//添加设备跟踪
	AddDeviceTrace(context.Context, *AddDeviceTraceReq) (*AddDeviceTraceResp, error)
	//删除设备跟踪
	DeleteDeviceTrace(context.Context, *DeleteDeviceTraceReq) (*DeleteDeviceTraceResp, error)
}

// UnimplementedDebugServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDebugServiceServer struct {
}

func (*UnimplementedDebugServiceServer) GetRouterInfo(ctx context.Context, req *GetRouterInfoReq) (*GetRouterInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouterInfo not implemented")
}
func (*UnimplementedDebugServiceServer) GetDeviceInfo(ctx context.Context, req *GetDeviceInfoReq) (*GetDeviceBaseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}
func (*UnimplementedDebugServiceServer) AddDeviceTrace(ctx context.Context, req *AddDeviceTraceReq) (*AddDeviceTraceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeviceTrace not implemented")
}
func (*UnimplementedDebugServiceServer) DeleteDeviceTrace(ctx context.Context, req *DeleteDeviceTraceReq) (*DeleteDeviceTraceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceTrace not implemented")
}

func RegisterDebugServiceServer(s *grpc.Server, srv DebugServiceServer) {
	s.RegisterService(&_DebugService_serviceDesc, srv)
}

func _DebugService_GetRouterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouterInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServiceServer).GetRouterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.debug.api.DebugService/GetRouterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServiceServer).GetRouterInfo(ctx, req.(*GetRouterInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugService_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServiceServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.debug.api.DebugService/GetDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServiceServer).GetDeviceInfo(ctx, req.(*GetDeviceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugService_AddDeviceTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeviceTraceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServiceServer).AddDeviceTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.debug.api.DebugService/AddDeviceTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServiceServer).AddDeviceTrace(ctx, req.(*AddDeviceTraceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugService_DeleteDeviceTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceTraceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServiceServer).DeleteDeviceTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.debug.api.DebugService/DeleteDeviceTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServiceServer).DeleteDeviceTrace(ctx, req.(*DeleteDeviceTraceReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DebugService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mapgoo.paas.debug.api.DebugService",
	HandlerType: (*DebugServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRouterInfo",
			Handler:    _DebugService_GetRouterInfo_Handler,
		},
		{
			MethodName: "GetDeviceInfo",
			Handler:    _DebugService_GetDeviceInfo_Handler,
		},
		{
			MethodName: "AddDeviceTrace",
			Handler:    _DebugService_AddDeviceTrace_Handler,
		},
		{
			MethodName: "DeleteDeviceTrace",
			Handler:    _DebugService_DeleteDeviceTrace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapgoo.paas.debug.api.proto",
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mapgoo.paas.cds.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SendCmdReq struct {
	DownId               uint64   `protobuf:"varint,1,opt,name=down_id,json=downId,proto3" json:"down_id,omitempty"`
	ObjId                uint32   `protobuf:"varint,2,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Imei                 string   `protobuf:"bytes,3,opt,name=imei,proto3" json:"imei,omitempty"`
	SendContent          string   `protobuf:"bytes,4,opt,name=send_content,json=sendContent,proto3" json:"send_content,omitempty"`
	CmdTypeId            uint32   `protobuf:"varint,5,opt,name=cmd_type_id,json=cmdTypeId,proto3" json:"cmd_type_id,omitempty"`
	SubmitTime           uint32   `protobuf:"varint,6,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`
	SendUserId           uint32   `protobuf:"varint,7,opt,name=send_user_id,json=sendUserId,proto3" json:"send_user_id,omitempty"`
	Sim                  string   `protobuf:"bytes,8,opt,name=sim,proto3" json:"sim,omitempty"`
	Remark               string   `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	SendFlag             uint32   `protobuf:"varint,10,opt,name=send_flag,json=sendFlag,proto3" json:"send_flag,omitempty"`
	TransType            uint32   `protobuf:"varint,11,opt,name=trans_type,json=transType,proto3" json:"trans_type,omitempty"`
	DownInfoType         uint32   `protobuf:"varint,12,opt,name=down_info_type,json=downInfoType,proto3" json:"down_info_type,omitempty"`
	Ttl                  uint32   `protobuf:"varint,13,opt,name=ttl,proto3" json:"ttl,omitempty"`
	TryCount             uint32   `protobuf:"varint,14,opt,name=try_count,json=tryCount,proto3" json:"try_count,omitempty"`
	SendSource           uint32   `protobuf:"varint,15,opt,name=send_source,json=sendSource,proto3" json:"send_source,omitempty"`
	Seq                  string   `protobuf:"bytes,16,opt,name=seq,proto3" json:"seq,omitempty"`
	ExtSeq               string   `protobuf:"bytes,17,opt,name=ext_seq,json=extSeq,proto3" json:"ext_seq,omitempty"`
	CallbackUrl          string   `protobuf:"bytes,18,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendCmdReq) Reset()         { *m = SendCmdReq{} }
func (m *SendCmdReq) String() string { return proto.CompactTextString(m) }
func (*SendCmdReq) ProtoMessage()    {}
func (*SendCmdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9e8847aa3986763, []int{0}
}
func (m *SendCmdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendCmdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendCmdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendCmdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendCmdReq.Merge(m, src)
}
func (m *SendCmdReq) XXX_Size() int {
	return m.Size()
}
func (m *SendCmdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendCmdReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendCmdReq proto.InternalMessageInfo

func (m *SendCmdReq) GetDownId() uint64 {
	if m != nil {
		return m.DownId
	}
	return 0
}

func (m *SendCmdReq) GetObjId() uint32 {
	if m != nil {
		return m.ObjId
	}
	return 0
}

func (m *SendCmdReq) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *SendCmdReq) GetSendContent() string {
	if m != nil {
		return m.SendContent
	}
	return ""
}

func (m *SendCmdReq) GetCmdTypeId() uint32 {
	if m != nil {
		return m.CmdTypeId
	}
	return 0
}

func (m *SendCmdReq) GetSubmitTime() uint32 {
	if m != nil {
		return m.SubmitTime
	}
	return 0
}

func (m *SendCmdReq) GetSendUserId() uint32 {
	if m != nil {
		return m.SendUserId
	}
	return 0
}

func (m *SendCmdReq) GetSim() string {
	if m != nil {
		return m.Sim
	}
	return ""
}

func (m *SendCmdReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *SendCmdReq) GetSendFlag() uint32 {
	if m != nil {
		return m.SendFlag
	}
	return 0
}

func (m *SendCmdReq) GetTransType() uint32 {
	if m != nil {
		return m.TransType
	}
	return 0
}

func (m *SendCmdReq) GetDownInfoType() uint32 {
	if m != nil {
		return m.DownInfoType
	}
	return 0
}

func (m *SendCmdReq) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *SendCmdReq) GetTryCount() uint32 {
	if m != nil {
		return m.TryCount
	}
	return 0
}

func (m *SendCmdReq) GetSendSource() uint32 {
	if m != nil {
		return m.SendSource
	}
	return 0
}

func (m *SendCmdReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *SendCmdReq) GetExtSeq() string {
	if m != nil {
		return m.ExtSeq
	}
	return ""
}

func (m *SendCmdReq) GetCallbackUrl() string {
	if m != nil {
		return m.CallbackUrl
	}
	return ""
}

type ConfirmCmdReq struct {
	ObjId                uint32   `protobuf:"varint,1,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Source               uint32   `protobuf:"varint,2,opt,name=source,proto3" json:"source,omitempty"`
	Seq                  string   `protobuf:"bytes,3,opt,name=seq,proto3" json:"seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfirmCmdReq) Reset()         { *m = ConfirmCmdReq{} }
func (m *ConfirmCmdReq) String() string { return proto.CompactTextString(m) }
func (*ConfirmCmdReq) ProtoMessage()    {}
func (*ConfirmCmdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9e8847aa3986763, []int{1}
}
func (m *ConfirmCmdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmCmdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmCmdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmCmdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmCmdReq.Merge(m, src)
}
func (m *ConfirmCmdReq) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmCmdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmCmdReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmCmdReq proto.InternalMessageInfo

func (m *ConfirmCmdReq) GetObjId() uint32 {
	if m != nil {
		return m.ObjId
	}
	return 0
}

func (m *ConfirmCmdReq) GetSource() uint32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *ConfirmCmdReq) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func init() {
	proto.RegisterType((*SendCmdReq)(nil), "mapgoo.paas.cds.SendCmdReq")
	proto.RegisterType((*ConfirmCmdReq)(nil), "mapgoo.paas.cds.ConfirmCmdReq")
}

func init() { proto.RegisterFile("mapgoo.paas.cds.proto", fileDescriptor_f9e8847aa3986763) }

var fileDescriptor_f9e8847aa3986763 = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6e, 0x1a, 0x3f,
	0x10, 0xc7, 0xd9, 0x1f, 0x64, 0x03, 0x06, 0x12, 0x7e, 0x96, 0x48, 0xad, 0x44, 0xdd, 0x52, 0xd4,
	0x03, 0x27, 0x0e, 0xed, 0x1b, 0x64, 0xd5, 0x4a, 0x9c, 0x42, 0xf9, 0x73, 0xe9, 0x65, 0xe5, 0x5d,
	0x0f, 0x68, 0xc9, 0xda, 0x5e, 0x6c, 0xa3, 0xc2, 0xad, 0x8f, 0xd1, 0x07, 0xe9, 0x43, 0xf4, 0xd8,
	0x47, 0xa8, 0xe8, 0x8b, 0x54, 0xb6, 0x37, 0x25, 0x4d, 0x7b, 0xe8, 0xcd, 0xf3, 0xf1, 0xe8, 0x3b,
	0xdf, 0xf1, 0x8c, 0x51, 0x9f, 0xd3, 0x72, 0x2d, 0xe5, 0xb8, 0xa4, 0x54, 0x8f, 0x33, 0xa6, 0xc7,
	0xa5, 0x92, 0x46, 0xe2, 0xcb, 0x27, 0xf8, 0x9a, 0x3c, 0x06, 0x29, 0xd5, 0x00, 0x7b, 0x9f, 0x3a,
	0xfc, 0xd4, 0x40, 0x68, 0x0e, 0x82, 0xc5, 0x9c, 0xcd, 0x60, 0x8b, 0x9f, 0xa1, 0x73, 0x26, 0x3f,
	0x8a, 0x24, 0x67, 0x24, 0x18, 0x04, 0xa3, 0xc6, 0x2c, 0xb4, 0xe1, 0x84, 0xe1, 0x3e, 0x0a, 0x65,
	0xba, 0xb1, 0xfc, 0xbf, 0x41, 0x30, 0xea, 0xce, 0xce, 0x64, 0xba, 0x99, 0x30, 0x8c, 0x51, 0x23,
	0xe7, 0x90, 0x93, 0xfa, 0x20, 0x18, 0xb5, 0x66, 0xee, 0x8c, 0x5f, 0xa2, 0x8e, 0x06, 0xc1, 0x92,
	0x4c, 0x0a, 0x03, 0xc2, 0x90, 0x86, 0xbb, 0x6b, 0x5b, 0x16, 0x7b, 0x84, 0x23, 0xd4, 0xce, 0x38,
	0x4b, 0xcc, 0xa1, 0x04, 0x2b, 0x79, 0xe6, 0x24, 0x5b, 0x19, 0x67, 0x8b, 0x43, 0x09, 0x13, 0x86,
	0x5f, 0xa0, 0xb6, 0xde, 0xa5, 0x3c, 0x37, 0x89, 0xc9, 0x39, 0x90, 0xd0, 0xdd, 0x23, 0x8f, 0x16,
	0x39, 0x07, 0x3c, 0xa8, 0x6a, 0xec, 0x34, 0x28, 0xab, 0x70, 0x5e, 0x65, 0x80, 0x60, 0x4b, 0x0d,
	0x6a, 0xc2, 0x70, 0x0f, 0xd5, 0x75, 0xce, 0x49, 0xd3, 0x15, 0xb7, 0x47, 0x7c, 0x85, 0x42, 0x05,
	0x9c, 0xaa, 0x7b, 0xd2, 0x72, 0xb0, 0x8a, 0xf0, 0x0d, 0x6a, 0x39, 0xad, 0x55, 0x41, 0xd7, 0x04,
	0x39, 0xa1, 0xa6, 0x05, 0xef, 0x0a, 0xba, 0xc6, 0xcf, 0x11, 0x32, 0x8a, 0x0a, 0xed, 0xbc, 0x92,
	0xb6, 0x37, 0xea, 0x88, 0xb5, 0x8a, 0x5f, 0xa1, 0x0b, 0xff, 0x5e, 0x62, 0x25, 0x7d, 0x4a, 0xc7,
	0xa5, 0x74, 0xdc, 0xb3, 0x89, 0x95, 0x74, 0x59, 0x3d, 0x54, 0x37, 0xa6, 0x20, 0x5d, 0x77, 0x65,
	0x8f, 0xb6, 0xa6, 0x51, 0x87, 0x24, 0x93, 0x3b, 0x61, 0xc8, 0x85, 0xaf, 0x69, 0xd4, 0x21, 0xb6,
	0xb1, 0xeb, 0xde, 0x1a, 0xd2, 0x72, 0xa7, 0x32, 0x20, 0x97, 0xa7, 0xde, 0xe6, 0x8e, 0xb8, 0xde,
	0x60, 0x4b, 0x7a, 0x55, 0x6f, 0x7e, 0x6e, 0xb0, 0x37, 0x89, 0xa5, 0xff, 0xfb, 0xe6, 0x60, 0x6f,
	0xe6, 0xb0, 0xb5, 0xc3, 0xc8, 0x68, 0x51, 0xa4, 0x34, 0xbb, 0x4f, 0x76, 0xaa, 0x20, 0xd8, 0x0f,
	0xe3, 0x81, 0x2d, 0x55, 0x31, 0x9c, 0xa2, 0x6e, 0x2c, 0xc5, 0x2a, 0x57, 0xbc, 0x5a, 0x82, 0xd3,
	0xac, 0x83, 0xc7, 0xb3, 0xbe, 0x42, 0x61, 0xe5, 0xc8, 0xaf, 0x40, 0x15, 0x3d, 0xb8, 0xa9, 0xff,
	0x72, 0xf3, 0xfa, 0x4b, 0x80, 0x9a, 0x31, 0xd3, 0x53, 0x25, 0xf7, 0x07, 0xfc, 0xde, 0x8f, 0x2a,
	0xe6, 0x6c, 0x21, 0xef, 0xd2, 0x0d, 0xbe, 0x19, 0x3f, 0x5d, 0xda, 0xd3, 0xfe, 0x5d, 0x0f, 0xc7,
	0x7f, 0xd9, 0xd4, 0x5b, 0xaa, 0x61, 0x06, 0xba, 0xb4, 0xef, 0xf9, 0x76, 0x3f, 0xac, 0xe1, 0x25,
	0xea, 0x66, 0xde, 0xf1, 0x5d, 0xba, 0x89, 0x39, 0xc3, 0xd1, 0x1f, 0x9a, 0xbf, 0x75, 0xf4, 0x6f,
	0xb2, 0xb7, 0xfd, 0xaf, 0xc7, 0x28, 0xf8, 0x76, 0x8c, 0x82, 0xef, 0xc7, 0x28, 0xf8, 0xfc, 0x23,
	0xaa, 0x7d, 0xa8, 0xd3, 0x32, 0x9f, 0xd6, 0xd2, 0xd0, 0xfd, 0x95, 0x37, 0x3f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x87, 0xf9, 0xe9, 0x28, 0x6f, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CdsProxyClient is the client API for CdsProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CdsProxyClient interface {
	SendCmdToObj(ctx context.Context, in *SendCmdReq, opts ...grpc.CallOption) (*BaseRespInfoEx, error)
	ConfirmObjCmd(ctx context.Context, in *ConfirmCmdReq, opts ...grpc.CallOption) (*BaseRespInfoEx, error)
}

type cdsProxyClient struct {
	cc *grpc.ClientConn
}

func NewCdsProxyClient(cc *grpc.ClientConn) CdsProxyClient {
	return &cdsProxyClient{cc}
}

func (c *cdsProxyClient) SendCmdToObj(ctx context.Context, in *SendCmdReq, opts ...grpc.CallOption) (*BaseRespInfoEx, error) {
	out := new(BaseRespInfoEx)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.cds.CdsProxy/sendCmdToObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cdsProxyClient) ConfirmObjCmd(ctx context.Context, in *ConfirmCmdReq, opts ...grpc.CallOption) (*BaseRespInfoEx, error) {
	out := new(BaseRespInfoEx)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.cds.CdsProxy/confirmObjCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CdsProxyServer is the server API for CdsProxy service.
type CdsProxyServer interface {
	SendCmdToObj(context.Context, *SendCmdReq) (*BaseRespInfoEx, error)
	ConfirmObjCmd(context.Context, *ConfirmCmdReq) (*BaseRespInfoEx, error)
}

// UnimplementedCdsProxyServer can be embedded to have forward compatible implementations.
type UnimplementedCdsProxyServer struct {
}

func (*UnimplementedCdsProxyServer) SendCmdToObj(ctx context.Context, req *SendCmdReq) (*BaseRespInfoEx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCmdToObj not implemented")
}
func (*UnimplementedCdsProxyServer) ConfirmObjCmd(ctx context.Context, req *ConfirmCmdReq) (*BaseRespInfoEx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmObjCmd not implemented")
}

func RegisterCdsProxyServer(s *grpc.Server, srv CdsProxyServer) {
	s.RegisterService(&_CdsProxy_serviceDesc, srv)
}

func _CdsProxy_SendCmdToObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCmdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CdsProxyServer).SendCmdToObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.cds.CdsProxy/SendCmdToObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CdsProxyServer).SendCmdToObj(ctx, req.(*SendCmdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CdsProxy_ConfirmObjCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmCmdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CdsProxyServer).ConfirmObjCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.cds.CdsProxy/ConfirmObjCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CdsProxyServer).ConfirmObjCmd(ctx, req.(*ConfirmCmdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CdsProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mapgoo.paas.cds.CdsProxy",
	HandlerType: (*CdsProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendCmdToObj",
			Handler:    _CdsProxy_SendCmdToObj_Handler,
		},
		{
			MethodName: "confirmObjCmd",
			Handler:    _CdsProxy_ConfirmObjCmd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapgoo.paas.cds.proto",
}

func (m *SendCmdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendCmdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendCmdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CallbackUrl) > 0 {
		i -= len(m.CallbackUrl)
		copy(dAtA[i:], m.CallbackUrl)
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(len(m.CallbackUrl)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ExtSeq) > 0 {
		i -= len(m.ExtSeq)
		copy(dAtA[i:], m.ExtSeq)
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(len(m.ExtSeq)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Seq) > 0 {
		i -= len(m.Seq)
		copy(dAtA[i:], m.Seq)
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(len(m.Seq)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.SendSource != 0 {
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(m.SendSource))
		i--
		dAtA[i] = 0x78
	}
	if m.TryCount != 0 {
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(m.TryCount))
		i--
		dAtA[i] = 0x70
	}
	if m.Ttl != 0 {
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(m.Ttl))
		i--
		dAtA[i] = 0x68
	}
	if m.DownInfoType != 0 {
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(m.DownInfoType))
		i--
		dAtA[i] = 0x60
	}
	if m.TransType != 0 {
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(m.TransType))
		i--
		dAtA[i] = 0x58
	}
	if m.SendFlag != 0 {
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(m.SendFlag))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Sim) > 0 {
		i -= len(m.Sim)
		copy(dAtA[i:], m.Sim)
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(len(m.Sim)))
		i--
		dAtA[i] = 0x42
	}
	if m.SendUserId != 0 {
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(m.SendUserId))
		i--
		dAtA[i] = 0x38
	}
	if m.SubmitTime != 0 {
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(m.SubmitTime))
		i--
		dAtA[i] = 0x30
	}
	if m.CmdTypeId != 0 {
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(m.CmdTypeId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SendContent) > 0 {
		i -= len(m.SendContent)
		copy(dAtA[i:], m.SendContent)
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(len(m.SendContent)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Imei) > 0 {
		i -= len(m.Imei)
		copy(dAtA[i:], m.Imei)
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(len(m.Imei)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjId != 0 {
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(m.ObjId))
		i--
		dAtA[i] = 0x10
	}
	if m.DownId != 0 {
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(m.DownId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmCmdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmCmdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmCmdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Seq) > 0 {
		i -= len(m.Seq)
		copy(dAtA[i:], m.Seq)
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(len(m.Seq)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Source != 0 {
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x10
	}
	if m.ObjId != 0 {
		i = encodeVarintMapgooPaasCds(dAtA, i, uint64(m.ObjId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMapgooPaasCds(dAtA []byte, offset int, v uint64) int {
	offset -= sovMapgooPaasCds(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SendCmdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownId != 0 {
		n += 1 + sovMapgooPaasCds(uint64(m.DownId))
	}
	if m.ObjId != 0 {
		n += 1 + sovMapgooPaasCds(uint64(m.ObjId))
	}
	l = len(m.Imei)
	if l > 0 {
		n += 1 + l + sovMapgooPaasCds(uint64(l))
	}
	l = len(m.SendContent)
	if l > 0 {
		n += 1 + l + sovMapgooPaasCds(uint64(l))
	}
	if m.CmdTypeId != 0 {
		n += 1 + sovMapgooPaasCds(uint64(m.CmdTypeId))
	}
	if m.SubmitTime != 0 {
		n += 1 + sovMapgooPaasCds(uint64(m.SubmitTime))
	}
	if m.SendUserId != 0 {
		n += 1 + sovMapgooPaasCds(uint64(m.SendUserId))
	}
	l = len(m.Sim)
	if l > 0 {
		n += 1 + l + sovMapgooPaasCds(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovMapgooPaasCds(uint64(l))
	}
	if m.SendFlag != 0 {
		n += 1 + sovMapgooPaasCds(uint64(m.SendFlag))
	}
	if m.TransType != 0 {
		n += 1 + sovMapgooPaasCds(uint64(m.TransType))
	}
	if m.DownInfoType != 0 {
		n += 1 + sovMapgooPaasCds(uint64(m.DownInfoType))
	}
	if m.Ttl != 0 {
		n += 1 + sovMapgooPaasCds(uint64(m.Ttl))
	}
	if m.TryCount != 0 {
		n += 1 + sovMapgooPaasCds(uint64(m.TryCount))
	}
	if m.SendSource != 0 {
		n += 1 + sovMapgooPaasCds(uint64(m.SendSource))
	}
	l = len(m.Seq)
	if l > 0 {
		n += 2 + l + sovMapgooPaasCds(uint64(l))
	}
	l = len(m.ExtSeq)
	if l > 0 {
		n += 2 + l + sovMapgooPaasCds(uint64(l))
	}
	l = len(m.CallbackUrl)
	if l > 0 {
		n += 2 + l + sovMapgooPaasCds(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfirmCmdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjId != 0 {
		n += 1 + sovMapgooPaasCds(uint64(m.ObjId))
	}
	if m.Source != 0 {
		n += 1 + sovMapgooPaasCds(uint64(m.Source))
	}
	l = len(m.Seq)
	if l > 0 {
		n += 1 + l + sovMapgooPaasCds(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMapgooPaasCds(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMapgooPaasCds(x uint64) (n int) {
	return sovMapgooPaasCds(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SendCmdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendCmdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendCmdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownId", wireType)
			}
			m.DownId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			m.ObjId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdTypeId", wireType)
			}
			m.CmdTypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdTypeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitTime", wireType)
			}
			m.SubmitTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubmitTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendUserId", wireType)
			}
			m.SendUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendUserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sim", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sim = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendFlag", wireType)
			}
			m.SendFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendFlag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransType", wireType)
			}
			m.TransType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownInfoType", wireType)
			}
			m.DownInfoType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownInfoType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttl |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TryCount", wireType)
			}
			m.TryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TryCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendSource", wireType)
			}
			m.SendSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendSource |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtSeq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtSeq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallbackUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallbackUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmCmdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasCds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmCmdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmCmdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			m.ObjId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasCds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasCds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMapgooPaasCds(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMapgooPaasCds
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapgooPaasCds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMapgooPaasCds
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMapgooPaasCds
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMapgooPaasCds
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMapgooPaasCds        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMapgooPaasCds          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMapgooPaasCds = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mapgoo.paas.dap.device.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 获取Can状态、设备信息返回
type GetObjectCANInfoDBResp struct {
	// 返回统一请求结果状态实例
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// CAN状态
	CanState uint32 `protobuf:"varint,2,opt,name=can_state,json=canState,proto3" json:"CANState"`
	// 渠道ID
	HoldId uint32 `protobuf:"varint,3,opt,name=hold_id,json=holdId,proto3" json:"HoldID"`
	// 目标ID
	ObjectId uint32 `protobuf:"varint,4,opt,name=object_id,json=objectId,proto3" json:"ObjectID"`
	// ICCID号
	Iccid                string   `protobuf:"bytes,5,opt,name=iccid,proto3" json:"ICCID"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetObjectCANInfoDBResp) Reset()         { *m = GetObjectCANInfoDBResp{} }
func (m *GetObjectCANInfoDBResp) String() string { return proto.CompactTextString(m) }
func (*GetObjectCANInfoDBResp) ProtoMessage()    {}
func (*GetObjectCANInfoDBResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{0}
}
func (m *GetObjectCANInfoDBResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetObjectCANInfoDBResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetObjectCANInfoDBResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetObjectCANInfoDBResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetObjectCANInfoDBResp.Merge(m, src)
}
func (m *GetObjectCANInfoDBResp) XXX_Size() int {
	return m.Size()
}
func (m *GetObjectCANInfoDBResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetObjectCANInfoDBResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetObjectCANInfoDBResp proto.InternalMessageInfo

func (m *GetObjectCANInfoDBResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetObjectCANInfoDBResp) GetCanState() uint32 {
	if m != nil {
		return m.CanState
	}
	return 0
}

func (m *GetObjectCANInfoDBResp) GetHoldId() uint32 {
	if m != nil {
		return m.HoldId
	}
	return 0
}

func (m *GetObjectCANInfoDBResp) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *GetObjectCANInfoDBResp) GetIccid() string {
	if m != nil {
		return m.Iccid
	}
	return ""
}

// 设备能力上传返回
type SetDeviceParamsDBResp struct {
	// 返回统一请求结果状态实例
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// 是否发送OMS通知
	NoticeOms            bool     `protobuf:"varint,2,opt,name=notice_oms,json=noticeOms,proto3" json:"notice_oms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetDeviceParamsDBResp) Reset()         { *m = SetDeviceParamsDBResp{} }
func (m *SetDeviceParamsDBResp) String() string { return proto.CompactTextString(m) }
func (*SetDeviceParamsDBResp) ProtoMessage()    {}
func (*SetDeviceParamsDBResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{1}
}
func (m *SetDeviceParamsDBResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDeviceParamsDBResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDeviceParamsDBResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDeviceParamsDBResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDeviceParamsDBResp.Merge(m, src)
}
func (m *SetDeviceParamsDBResp) XXX_Size() int {
	return m.Size()
}
func (m *SetDeviceParamsDBResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDeviceParamsDBResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetDeviceParamsDBResp proto.InternalMessageInfo

func (m *SetDeviceParamsDBResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *SetDeviceParamsDBResp) GetNoticeOms() bool {
	if m != nil {
		return m.NoticeOms
	}
	return false
}

// 上传视频设备信息请求
type UploadCarSsvidInfoDBReq struct {
	// 视频序列id
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"ID"`
	// IMEI号
	Imei string `protobuf:"bytes,2,opt,name=imei,proto3" json:"IMEI"`
	// SSVID
	Ssvid string `protobuf:"bytes,3,opt,name=ssvid,proto3" json:"SSVID"`
	// 状态,1.在线,0.离线
	Status uint32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	// 设备类型,1.大屏机,2.后视镜,3.其他类型
	DeviceType uint32 `protobuf:"varint,5,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// Token
	Token string `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	// Rtmp
	Rtmp string `protobuf:"bytes,7,opt,name=rtmp,proto3" json:"rtmp,omitempty"`
	// SSVID数量
	SsvidCount uint32 `protobuf:"varint,8,opt,name=ssvid_count,json=ssvidCount,proto3" json:"SSVIDCount"`
	// 等待时间
	WaitTime uint64 `protobuf:"varint,9,opt,name=wait_time,json=waitTime,proto3" json:"WaitTime"`
	// 更新时间
	UpdateTime           uint64   `protobuf:"varint,10,opt,name=update_time,json=updateTime,proto3" json:"UpdateTime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadCarSsvidInfoDBReq) Reset()         { *m = UploadCarSsvidInfoDBReq{} }
func (m *UploadCarSsvidInfoDBReq) String() string { return proto.CompactTextString(m) }
func (*UploadCarSsvidInfoDBReq) ProtoMessage()    {}
func (*UploadCarSsvidInfoDBReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{2}
}
func (m *UploadCarSsvidInfoDBReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadCarSsvidInfoDBReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadCarSsvidInfoDBReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadCarSsvidInfoDBReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadCarSsvidInfoDBReq.Merge(m, src)
}
func (m *UploadCarSsvidInfoDBReq) XXX_Size() int {
	return m.Size()
}
func (m *UploadCarSsvidInfoDBReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadCarSsvidInfoDBReq.DiscardUnknown(m)
}

var xxx_messageInfo_UploadCarSsvidInfoDBReq proto.InternalMessageInfo

func (m *UploadCarSsvidInfoDBReq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UploadCarSsvidInfoDBReq) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *UploadCarSsvidInfoDBReq) GetSsvid() string {
	if m != nil {
		return m.Ssvid
	}
	return ""
}

func (m *UploadCarSsvidInfoDBReq) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UploadCarSsvidInfoDBReq) GetDeviceType() uint32 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *UploadCarSsvidInfoDBReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UploadCarSsvidInfoDBReq) GetRtmp() string {
	if m != nil {
		return m.Rtmp
	}
	return ""
}

func (m *UploadCarSsvidInfoDBReq) GetSsvidCount() uint32 {
	if m != nil {
		return m.SsvidCount
	}
	return 0
}

func (m *UploadCarSsvidInfoDBReq) GetWaitTime() uint64 {
	if m != nil {
		return m.WaitTime
	}
	return 0
}

func (m *UploadCarSsvidInfoDBReq) GetUpdateTime() uint64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

// 上传视频设备信息返回
type UploadCarSsvidInfoDBResp struct {
	// 返回统一请求结果状态实例
	Base                 *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UploadCarSsvidInfoDBResp) Reset()         { *m = UploadCarSsvidInfoDBResp{} }
func (m *UploadCarSsvidInfoDBResp) String() string { return proto.CompactTextString(m) }
func (*UploadCarSsvidInfoDBResp) ProtoMessage()    {}
func (*UploadCarSsvidInfoDBResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{3}
}
func (m *UploadCarSsvidInfoDBResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadCarSsvidInfoDBResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadCarSsvidInfoDBResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadCarSsvidInfoDBResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadCarSsvidInfoDBResp.Merge(m, src)
}
func (m *UploadCarSsvidInfoDBResp) XXX_Size() int {
	return m.Size()
}
func (m *UploadCarSsvidInfoDBResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadCarSsvidInfoDBResp.DiscardUnknown(m)
}

var xxx_messageInfo_UploadCarSsvidInfoDBResp proto.InternalMessageInfo

func (m *UploadCarSsvidInfoDBResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

type GetExistObjInfoDBReq struct {
	// originalIMEI号
	OriginalImei         string   `protobuf:"bytes,1,opt,name=original_imei,json=originalImei,proto3" json:"originalIMEI"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetExistObjInfoDBReq) Reset()         { *m = GetExistObjInfoDBReq{} }
func (m *GetExistObjInfoDBReq) String() string { return proto.CompactTextString(m) }
func (*GetExistObjInfoDBReq) ProtoMessage()    {}
func (*GetExistObjInfoDBReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{4}
}
func (m *GetExistObjInfoDBReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetExistObjInfoDBReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExistObjInfoDBReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetExistObjInfoDBReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExistObjInfoDBReq.Merge(m, src)
}
func (m *GetExistObjInfoDBReq) XXX_Size() int {
	return m.Size()
}
func (m *GetExistObjInfoDBReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExistObjInfoDBReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetExistObjInfoDBReq proto.InternalMessageInfo

func (m *GetExistObjInfoDBReq) GetOriginalImei() string {
	if m != nil {
		return m.OriginalImei
	}
	return ""
}

type GetExistObjInfoDBResp struct {
	// 返回统一请求结果状态实例
	Base                 *BaseRespInfo                   `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	InfoMap              map[string]*DeviceSelfRegFields `protobuf:"bytes,2,rep,name=info_map,json=infoMap,proto3" json:"info_map" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *GetExistObjInfoDBResp) Reset()         { *m = GetExistObjInfoDBResp{} }
func (m *GetExistObjInfoDBResp) String() string { return proto.CompactTextString(m) }
func (*GetExistObjInfoDBResp) ProtoMessage()    {}
func (*GetExistObjInfoDBResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{5}
}
func (m *GetExistObjInfoDBResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetExistObjInfoDBResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExistObjInfoDBResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetExistObjInfoDBResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExistObjInfoDBResp.Merge(m, src)
}
func (m *GetExistObjInfoDBResp) XXX_Size() int {
	return m.Size()
}
func (m *GetExistObjInfoDBResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExistObjInfoDBResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetExistObjInfoDBResp proto.InternalMessageInfo

func (m *GetExistObjInfoDBResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetExistObjInfoDBResp) GetInfoMap() map[string]*DeviceSelfRegFields {
	if m != nil {
		return m.InfoMap
	}
	return nil
}

// 保存设备自注册信息至数据表请求
type AddObjectRegInfoDBReq struct {
	// IMEI号
	Imei string `protobuf:"bytes,1,opt,name=imei,proto3" json:"IMEI"`
	// SIM卡号
	Sim string `protobuf:"bytes,2,opt,name=sim,proto3" json:"SIM"`
	// 设备名
	ObjectName string `protobuf:"bytes,3,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	// 渠道ID
	HoldId uint32 `protobuf:"varint,4,opt,name=hold_id,json=holdId,proto3" json:"HoldID"`
	// 设备编号
	ObjectCode string `protobuf:"bytes,5,opt,name=object_code,json=objectCode,proto3" json:"object_code,omitempty"`
	// 设备类型id
	MdttypeId uint32 `protobuf:"varint,6,opt,name=mdttype_id,json=mdttypeId,proto3" json:"mdttype_id,omitempty"`
	// 令牌
	Lincese string `protobuf:"bytes,7,opt,name=lincese,proto3" json:"lincese,omitempty"`
	// 原IMEI号
	OriginalImei string `protobuf:"bytes,8,opt,name=original_imei,json=originalImei,proto3" json:"original_imei,omitempty"`
	// APP Key
	AppKey               string   `protobuf:"bytes,9,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddObjectRegInfoDBReq) Reset()         { *m = AddObjectRegInfoDBReq{} }
func (m *AddObjectRegInfoDBReq) String() string { return proto.CompactTextString(m) }
func (*AddObjectRegInfoDBReq) ProtoMessage()    {}
func (*AddObjectRegInfoDBReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{6}
}
func (m *AddObjectRegInfoDBReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddObjectRegInfoDBReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddObjectRegInfoDBReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddObjectRegInfoDBReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddObjectRegInfoDBReq.Merge(m, src)
}
func (m *AddObjectRegInfoDBReq) XXX_Size() int {
	return m.Size()
}
func (m *AddObjectRegInfoDBReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddObjectRegInfoDBReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddObjectRegInfoDBReq proto.InternalMessageInfo

func (m *AddObjectRegInfoDBReq) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *AddObjectRegInfoDBReq) GetSim() string {
	if m != nil {
		return m.Sim
	}
	return ""
}

func (m *AddObjectRegInfoDBReq) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *AddObjectRegInfoDBReq) GetHoldId() uint32 {
	if m != nil {
		return m.HoldId
	}
	return 0
}

func (m *AddObjectRegInfoDBReq) GetObjectCode() string {
	if m != nil {
		return m.ObjectCode
	}
	return ""
}

func (m *AddObjectRegInfoDBReq) GetMdttypeId() uint32 {
	if m != nil {
		return m.MdttypeId
	}
	return 0
}

func (m *AddObjectRegInfoDBReq) GetLincese() string {
	if m != nil {
		return m.Lincese
	}
	return ""
}

func (m *AddObjectRegInfoDBReq) GetOriginalImei() string {
	if m != nil {
		return m.OriginalImei
	}
	return ""
}

func (m *AddObjectRegInfoDBReq) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

type AddObjectRegInfoDBResp struct {
	// 返回统一请求结果状态实例
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// 新设备id
	ObjectId             uint32   `protobuf:"varint,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddObjectRegInfoDBResp) Reset()         { *m = AddObjectRegInfoDBResp{} }
func (m *AddObjectRegInfoDBResp) String() string { return proto.CompactTextString(m) }
func (*AddObjectRegInfoDBResp) ProtoMessage()    {}
func (*AddObjectRegInfoDBResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{7}
}
func (m *AddObjectRegInfoDBResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddObjectRegInfoDBResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddObjectRegInfoDBResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddObjectRegInfoDBResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddObjectRegInfoDBResp.Merge(m, src)
}
func (m *AddObjectRegInfoDBResp) XXX_Size() int {
	return m.Size()
}
func (m *AddObjectRegInfoDBResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddObjectRegInfoDBResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddObjectRegInfoDBResp proto.InternalMessageInfo

func (m *AddObjectRegInfoDBResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *AddObjectRegInfoDBResp) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

// 获取设备类型产品信息请求
type GetMDTProductInfoDBReq struct {
	// 设备类型ID
	MdttypeId            uint32   `protobuf:"varint,1,opt,name=mdttype_id,json=mdttypeId,proto3" json:"mdttype_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMDTProductInfoDBReq) Reset()         { *m = GetMDTProductInfoDBReq{} }
func (m *GetMDTProductInfoDBReq) String() string { return proto.CompactTextString(m) }
func (*GetMDTProductInfoDBReq) ProtoMessage()    {}
func (*GetMDTProductInfoDBReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{8}
}
func (m *GetMDTProductInfoDBReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMDTProductInfoDBReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMDTProductInfoDBReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMDTProductInfoDBReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMDTProductInfoDBReq.Merge(m, src)
}
func (m *GetMDTProductInfoDBReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMDTProductInfoDBReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMDTProductInfoDBReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMDTProductInfoDBReq proto.InternalMessageInfo

func (m *GetMDTProductInfoDBReq) GetMdttypeId() uint32 {
	if m != nil {
		return m.MdttypeId
	}
	return 0
}

// 获取设备类型产品信息，返回具体字段由业务模块自行组合
type GetMDTProductInfoDBResp struct {
	// 返回统一请求结果状态实例
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// 工厂信息
	Factory string `protobuf:"bytes,2,opt,name=factory,proto3" json:"factory,omitempty"`
	// 品牌信息
	Brand                string   `protobuf:"bytes,3,opt,name=brand,proto3" json:"brand,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMDTProductInfoDBResp) Reset()         { *m = GetMDTProductInfoDBResp{} }
func (m *GetMDTProductInfoDBResp) String() string { return proto.CompactTextString(m) }
func (*GetMDTProductInfoDBResp) ProtoMessage()    {}
func (*GetMDTProductInfoDBResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{9}
}
func (m *GetMDTProductInfoDBResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMDTProductInfoDBResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMDTProductInfoDBResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMDTProductInfoDBResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMDTProductInfoDBResp.Merge(m, src)
}
func (m *GetMDTProductInfoDBResp) XXX_Size() int {
	return m.Size()
}
func (m *GetMDTProductInfoDBResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMDTProductInfoDBResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMDTProductInfoDBResp proto.InternalMessageInfo

func (m *GetMDTProductInfoDBResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetMDTProductInfoDBResp) GetFactory() string {
	if m != nil {
		return m.Factory
	}
	return ""
}

func (m *GetMDTProductInfoDBResp) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

// 上传设备APK应用信息返回
type UploadDeviceAppInfoDBResp struct {
	// 返回统一请求结果状态实例
	Base                 *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UploadDeviceAppInfoDBResp) Reset()         { *m = UploadDeviceAppInfoDBResp{} }
func (m *UploadDeviceAppInfoDBResp) String() string { return proto.CompactTextString(m) }
func (*UploadDeviceAppInfoDBResp) ProtoMessage()    {}
func (*UploadDeviceAppInfoDBResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{10}
}
func (m *UploadDeviceAppInfoDBResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadDeviceAppInfoDBResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadDeviceAppInfoDBResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadDeviceAppInfoDBResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadDeviceAppInfoDBResp.Merge(m, src)
}
func (m *UploadDeviceAppInfoDBResp) XXX_Size() int {
	return m.Size()
}
func (m *UploadDeviceAppInfoDBResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadDeviceAppInfoDBResp.DiscardUnknown(m)
}

var xxx_messageInfo_UploadDeviceAppInfoDBResp proto.InternalMessageInfo

func (m *UploadDeviceAppInfoDBResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

// 获取设备APP版本信息
type GetDeviceAppVerInfoDBReq struct {
	// 设备id ObjectID
	ObjectId uint32 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"ObjectID"`
	//包名
	AppPackageName       string   `protobuf:"bytes,2,opt,name=app_package_name,json=appPackageName,proto3" json:"app_package_name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeviceAppVerInfoDBReq) Reset()         { *m = GetDeviceAppVerInfoDBReq{} }
func (m *GetDeviceAppVerInfoDBReq) String() string { return proto.CompactTextString(m) }
func (*GetDeviceAppVerInfoDBReq) ProtoMessage()    {}
func (*GetDeviceAppVerInfoDBReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{11}
}
func (m *GetDeviceAppVerInfoDBReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceAppVerInfoDBReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceAppVerInfoDBReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceAppVerInfoDBReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceAppVerInfoDBReq.Merge(m, src)
}
func (m *GetDeviceAppVerInfoDBReq) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceAppVerInfoDBReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceAppVerInfoDBReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceAppVerInfoDBReq proto.InternalMessageInfo

func (m *GetDeviceAppVerInfoDBReq) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *GetDeviceAppVerInfoDBReq) GetAppPackageName() string {
	if m != nil {
		return m.AppPackageName
	}
	return ""
}

// 获取设备APP版本信息,按数据库字段原型返回
type GetDeviceAppVerInfoDBResp struct {
	// 返回统一请求结果状态实例
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`
	// 设备app版本信息
	Info                 *DeviceAppVerInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetDeviceAppVerInfoDBResp) Reset()         { *m = GetDeviceAppVerInfoDBResp{} }
func (m *GetDeviceAppVerInfoDBResp) String() string { return proto.CompactTextString(m) }
func (*GetDeviceAppVerInfoDBResp) ProtoMessage()    {}
func (*GetDeviceAppVerInfoDBResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{12}
}
func (m *GetDeviceAppVerInfoDBResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceAppVerInfoDBResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceAppVerInfoDBResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceAppVerInfoDBResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceAppVerInfoDBResp.Merge(m, src)
}
func (m *GetDeviceAppVerInfoDBResp) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceAppVerInfoDBResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceAppVerInfoDBResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceAppVerInfoDBResp proto.InternalMessageInfo

func (m *GetDeviceAppVerInfoDBResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetDeviceAppVerInfoDBResp) GetInfo() *DeviceAppVerInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// 修改注册数据请求
type UpdateDeviceSelfRegDBReq struct {
	// IMEI号
	Imei string `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei"`
	// ICCID号
	Iccid string `protobuf:"bytes,2,opt,name=iccid,proto3" json:"iccid"`
	// 设备类型id
	MdtTypeId uint32 `protobuf:"varint,3,opt,name=mdt_type_id,json=mdtTypeId,proto3" json:"mdt_type_id"`
	// 令牌
	Lincese string `protobuf:"bytes,4,opt,name=lincese,proto3" json:"lincese"`
	// 渠道ID
	HoldId uint32 `protobuf:"varint,5,opt,name=hold_id,json=holdId,proto3" json:"hold_id"`
	// 原IMEI号
	OriginalImei string `protobuf:"bytes,6,opt,name=original_imei,json=originalImei,proto3" json:"original_imei"`
	// 设备id
	ObjectId uint32 `protobuf:"varint,7,opt,name=object_id,json=objectId,proto3" json:"object_id"`
	// app key
	AppKey string `protobuf:"bytes,8,opt,name=app_key,json=appKey,proto3" json:"app_key"`
	// 是否更新AppKey字段
	IsupdateAppKey bool `protobuf:"varint,9,opt,name=isupdate_app_key,json=isupdateAppKey,proto3" json:"isupdate_app_key"`
	//产品批次
	ProductBatch string `protobuf:"bytes,10,opt,name=product_batch,json=productBatch,proto3" json:"product_batch"`
	//是否更新holdID字段
	IsUpdateHoldId       bool     `protobuf:"varint,11,opt,name=is_update_hold_id,json=isUpdateHoldId,proto3" json:"is_update_hold_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDeviceSelfRegDBReq) Reset()         { *m = UpdateDeviceSelfRegDBReq{} }
func (m *UpdateDeviceSelfRegDBReq) String() string { return proto.CompactTextString(m) }
func (*UpdateDeviceSelfRegDBReq) ProtoMessage()    {}
func (*UpdateDeviceSelfRegDBReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{13}
}
func (m *UpdateDeviceSelfRegDBReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDeviceSelfRegDBReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDeviceSelfRegDBReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDeviceSelfRegDBReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDeviceSelfRegDBReq.Merge(m, src)
}
func (m *UpdateDeviceSelfRegDBReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDeviceSelfRegDBReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDeviceSelfRegDBReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDeviceSelfRegDBReq proto.InternalMessageInfo

func (m *UpdateDeviceSelfRegDBReq) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *UpdateDeviceSelfRegDBReq) GetIccid() string {
	if m != nil {
		return m.Iccid
	}
	return ""
}

func (m *UpdateDeviceSelfRegDBReq) GetMdtTypeId() uint32 {
	if m != nil {
		return m.MdtTypeId
	}
	return 0
}

func (m *UpdateDeviceSelfRegDBReq) GetLincese() string {
	if m != nil {
		return m.Lincese
	}
	return ""
}

func (m *UpdateDeviceSelfRegDBReq) GetHoldId() uint32 {
	if m != nil {
		return m.HoldId
	}
	return 0
}

func (m *UpdateDeviceSelfRegDBReq) GetOriginalImei() string {
	if m != nil {
		return m.OriginalImei
	}
	return ""
}

func (m *UpdateDeviceSelfRegDBReq) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *UpdateDeviceSelfRegDBReq) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

func (m *UpdateDeviceSelfRegDBReq) GetIsupdateAppKey() bool {
	if m != nil {
		return m.IsupdateAppKey
	}
	return false
}

func (m *UpdateDeviceSelfRegDBReq) GetProductBatch() string {
	if m != nil {
		return m.ProductBatch
	}
	return ""
}

func (m *UpdateDeviceSelfRegDBReq) GetIsUpdateHoldId() bool {
	if m != nil {
		return m.IsUpdateHoldId
	}
	return false
}

//更新Socol配置
type UpdateDeviceSocolDBReq struct {
	DeviceSocol          *DeviceSocolInfo `protobuf:"bytes,1,opt,name=device_socol,json=deviceSocol,proto3" json:"device_socol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdateDeviceSocolDBReq) Reset()         { *m = UpdateDeviceSocolDBReq{} }
func (m *UpdateDeviceSocolDBReq) String() string { return proto.CompactTextString(m) }
func (*UpdateDeviceSocolDBReq) ProtoMessage()    {}
func (*UpdateDeviceSocolDBReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{14}
}
func (m *UpdateDeviceSocolDBReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDeviceSocolDBReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDeviceSocolDBReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDeviceSocolDBReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDeviceSocolDBReq.Merge(m, src)
}
func (m *UpdateDeviceSocolDBReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDeviceSocolDBReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDeviceSocolDBReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDeviceSocolDBReq proto.InternalMessageInfo

func (m *UpdateDeviceSocolDBReq) GetDeviceSocol() *DeviceSocolInfo {
	if m != nil {
		return m.DeviceSocol
	}
	return nil
}

type UpdateDeviceSocolDBResp struct {
	// 返回统一请求结果状态实例
	Base                 *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UpdateDeviceSocolDBResp) Reset()         { *m = UpdateDeviceSocolDBResp{} }
func (m *UpdateDeviceSocolDBResp) String() string { return proto.CompactTextString(m) }
func (*UpdateDeviceSocolDBResp) ProtoMessage()    {}
func (*UpdateDeviceSocolDBResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{15}
}
func (m *UpdateDeviceSocolDBResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDeviceSocolDBResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDeviceSocolDBResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDeviceSocolDBResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDeviceSocolDBResp.Merge(m, src)
}
func (m *UpdateDeviceSocolDBResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDeviceSocolDBResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDeviceSocolDBResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDeviceSocolDBResp proto.InternalMessageInfo

func (m *UpdateDeviceSocolDBResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

//保存和更新设备配置参数
type SaveDeviceConfigDbReq struct {
	//设备id
	ObjectId uint32 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	//是否存在版本
	IsExistVersion bool `protobuf:"varint,2,opt,name=is_exist_version,json=isExistVersion,proto3" json:"is_exist_version,omitempty"`
	//更新参数列表
	UpdateList []*DeviceConfigParam `protobuf:"bytes,3,rep,name=update_list,json=updateList,proto3" json:"update_list,omitempty"`
	//插入参数列表
	InsertList           []*DeviceConfigParam `protobuf:"bytes,4,rep,name=insert_list,json=insertList,proto3" json:"insert_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SaveDeviceConfigDbReq) Reset()         { *m = SaveDeviceConfigDbReq{} }
func (m *SaveDeviceConfigDbReq) String() string { return proto.CompactTextString(m) }
func (*SaveDeviceConfigDbReq) ProtoMessage()    {}
func (*SaveDeviceConfigDbReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{16}
}
func (m *SaveDeviceConfigDbReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveDeviceConfigDbReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveDeviceConfigDbReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveDeviceConfigDbReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveDeviceConfigDbReq.Merge(m, src)
}
func (m *SaveDeviceConfigDbReq) XXX_Size() int {
	return m.Size()
}
func (m *SaveDeviceConfigDbReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveDeviceConfigDbReq.DiscardUnknown(m)
}

var xxx_messageInfo_SaveDeviceConfigDbReq proto.InternalMessageInfo

func (m *SaveDeviceConfigDbReq) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *SaveDeviceConfigDbReq) GetIsExistVersion() bool {
	if m != nil {
		return m.IsExistVersion
	}
	return false
}

func (m *SaveDeviceConfigDbReq) GetUpdateList() []*DeviceConfigParam {
	if m != nil {
		return m.UpdateList
	}
	return nil
}

func (m *SaveDeviceConfigDbReq) GetInsertList() []*DeviceConfigParam {
	if m != nil {
		return m.InsertList
	}
	return nil
}

type SaveDeviceConfigDbResp struct {
	//公共结构
	Base                 *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SaveDeviceConfigDbResp) Reset()         { *m = SaveDeviceConfigDbResp{} }
func (m *SaveDeviceConfigDbResp) String() string { return proto.CompactTextString(m) }
func (*SaveDeviceConfigDbResp) ProtoMessage()    {}
func (*SaveDeviceConfigDbResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{17}
}
func (m *SaveDeviceConfigDbResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveDeviceConfigDbResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveDeviceConfigDbResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveDeviceConfigDbResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveDeviceConfigDbResp.Merge(m, src)
}
func (m *SaveDeviceConfigDbResp) XXX_Size() int {
	return m.Size()
}
func (m *SaveDeviceConfigDbResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveDeviceConfigDbResp.DiscardUnknown(m)
}

var xxx_messageInfo_SaveDeviceConfigDbResp proto.InternalMessageInfo

func (m *SaveDeviceConfigDbResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

//删除设备配置参数
type DelDeviceConfigDbReq struct {
	//设备id
	ObjectId uint32 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	//参数列表
	SettingNameList      []string `protobuf:"bytes,2,rep,name=setting_name_list,json=settingNameList,proto3" json:"setting_name_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelDeviceConfigDbReq) Reset()         { *m = DelDeviceConfigDbReq{} }
func (m *DelDeviceConfigDbReq) String() string { return proto.CompactTextString(m) }
func (*DelDeviceConfigDbReq) ProtoMessage()    {}
func (*DelDeviceConfigDbReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{18}
}
func (m *DelDeviceConfigDbReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelDeviceConfigDbReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelDeviceConfigDbReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelDeviceConfigDbReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelDeviceConfigDbReq.Merge(m, src)
}
func (m *DelDeviceConfigDbReq) XXX_Size() int {
	return m.Size()
}
func (m *DelDeviceConfigDbReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelDeviceConfigDbReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelDeviceConfigDbReq proto.InternalMessageInfo

func (m *DelDeviceConfigDbReq) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *DelDeviceConfigDbReq) GetSettingNameList() []string {
	if m != nil {
		return m.SettingNameList
	}
	return nil
}

type DelDeviceConfigDbResp struct {
	//公共结构
	Base                 *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DelDeviceConfigDbResp) Reset()         { *m = DelDeviceConfigDbResp{} }
func (m *DelDeviceConfigDbResp) String() string { return proto.CompactTextString(m) }
func (*DelDeviceConfigDbResp) ProtoMessage()    {}
func (*DelDeviceConfigDbResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{19}
}
func (m *DelDeviceConfigDbResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelDeviceConfigDbResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelDeviceConfigDbResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelDeviceConfigDbResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelDeviceConfigDbResp.Merge(m, src)
}
func (m *DelDeviceConfigDbResp) XXX_Size() int {
	return m.Size()
}
func (m *DelDeviceConfigDbResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DelDeviceConfigDbResp.DiscardUnknown(m)
}

var xxx_messageInfo_DelDeviceConfigDbResp proto.InternalMessageInfo

func (m *DelDeviceConfigDbResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

//获取设备配置参数
type GetDeviceConfigDbReq struct {
	//设备id
	ObjectId uint32 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	//配置名称 默认:所有参数
	SettingName string `protobuf:"bytes,2,opt,name=setting_name,json=settingName,proto3" json:"setting_name,omitempty"`
	//状态 默认：全部 1：启用 2：废弃
	State                uint32   `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeviceConfigDbReq) Reset()         { *m = GetDeviceConfigDbReq{} }
func (m *GetDeviceConfigDbReq) String() string { return proto.CompactTextString(m) }
func (*GetDeviceConfigDbReq) ProtoMessage()    {}
func (*GetDeviceConfigDbReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{20}
}
func (m *GetDeviceConfigDbReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceConfigDbReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceConfigDbReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceConfigDbReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceConfigDbReq.Merge(m, src)
}
func (m *GetDeviceConfigDbReq) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceConfigDbReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceConfigDbReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceConfigDbReq proto.InternalMessageInfo

func (m *GetDeviceConfigDbReq) GetObjectId() uint32 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *GetDeviceConfigDbReq) GetSettingName() string {
	if m != nil {
		return m.SettingName
	}
	return ""
}

func (m *GetDeviceConfigDbReq) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

type GetDeviceConfigDbResp struct {
	//公共结构
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	//更新时间
	UpdateTime uint64 `protobuf:"varint,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	//参数列表
	ParamList            []*DeviceConfigParam `protobuf:"bytes,3,rep,name=param_list,json=paramList,proto3" json:"param_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetDeviceConfigDbResp) Reset()         { *m = GetDeviceConfigDbResp{} }
func (m *GetDeviceConfigDbResp) String() string { return proto.CompactTextString(m) }
func (*GetDeviceConfigDbResp) ProtoMessage()    {}
func (*GetDeviceConfigDbResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{21}
}
func (m *GetDeviceConfigDbResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceConfigDbResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceConfigDbResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceConfigDbResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceConfigDbResp.Merge(m, src)
}
func (m *GetDeviceConfigDbResp) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceConfigDbResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceConfigDbResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceConfigDbResp proto.InternalMessageInfo

func (m *GetDeviceConfigDbResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetDeviceConfigDbResp) GetUpdateTime() uint64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *GetDeviceConfigDbResp) GetParamList() []*DeviceConfigParam {
	if m != nil {
		return m.ParamList
	}
	return nil
}

//获取设备配置参数
type GetDeviceConfigDbListReq struct {
	//更新时间
	UpdateTime uint64 `protobuf:"varint,1,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	//行数
	Limit                uint32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeviceConfigDbListReq) Reset()         { *m = GetDeviceConfigDbListReq{} }
func (m *GetDeviceConfigDbListReq) String() string { return proto.CompactTextString(m) }
func (*GetDeviceConfigDbListReq) ProtoMessage()    {}
func (*GetDeviceConfigDbListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{22}
}
func (m *GetDeviceConfigDbListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceConfigDbListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceConfigDbListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceConfigDbListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceConfigDbListReq.Merge(m, src)
}
func (m *GetDeviceConfigDbListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceConfigDbListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceConfigDbListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceConfigDbListReq proto.InternalMessageInfo

func (m *GetDeviceConfigDbListReq) GetUpdateTime() uint64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *GetDeviceConfigDbListReq) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetDeviceConfigDbListResp struct {
	//公共结构
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	//参数列表
	ConfigList           map[uint32]*DeviceConfigInfo `protobuf:"bytes,2,rep,name=config_list,json=configList,proto3" json:"config_list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *GetDeviceConfigDbListResp) Reset()         { *m = GetDeviceConfigDbListResp{} }
func (m *GetDeviceConfigDbListResp) String() string { return proto.CompactTextString(m) }
func (*GetDeviceConfigDbListResp) ProtoMessage()    {}
func (*GetDeviceConfigDbListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{23}
}
func (m *GetDeviceConfigDbListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDeviceConfigDbListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDeviceConfigDbListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDeviceConfigDbListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeviceConfigDbListResp.Merge(m, src)
}
func (m *GetDeviceConfigDbListResp) XXX_Size() int {
	return m.Size()
}
func (m *GetDeviceConfigDbListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeviceConfigDbListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeviceConfigDbListResp proto.InternalMessageInfo

func (m *GetDeviceConfigDbListResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetDeviceConfigDbListResp) GetConfigList() map[uint32]*DeviceConfigInfo {
	if m != nil {
		return m.ConfigList
	}
	return nil
}

//通过模糊搜索获取设备ID
type SearchTrackObjectListDBReq struct {
	//关键字类型 1 设备名称 2所属用户 3 IMEI号 4 sim卡号 8 关联账号 10 设备状态 11 联系人 12 车牌号 13标签 14 iccid
	KeyType uint32 `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	//关键字
	KeyVal string `protobuf:"bytes,2,opt,name=key_val,json=keyVal,proto3" json:"key_val,omitempty"`
	//每页数量
	PageSize uint32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	//渠道id
	HoldId uint32 `protobuf:"varint,4,opt,name=hold_id,json=holdId,proto3" json:"hold_id,omitempty"`
	//渠道level
	HoldLevel            uint32   `protobuf:"varint,5,opt,name=hold_level,json=holdLevel,proto3" json:"hold_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchTrackObjectListDBReq) Reset()         { *m = SearchTrackObjectListDBReq{} }
func (m *SearchTrackObjectListDBReq) String() string { return proto.CompactTextString(m) }
func (*SearchTrackObjectListDBReq) ProtoMessage()    {}
func (*SearchTrackObjectListDBReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{24}
}
func (m *SearchTrackObjectListDBReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchTrackObjectListDBReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchTrackObjectListDBReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchTrackObjectListDBReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTrackObjectListDBReq.Merge(m, src)
}
func (m *SearchTrackObjectListDBReq) XXX_Size() int {
	return m.Size()
}
func (m *SearchTrackObjectListDBReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTrackObjectListDBReq.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTrackObjectListDBReq proto.InternalMessageInfo

func (m *SearchTrackObjectListDBReq) GetKeyType() uint32 {
	if m != nil {
		return m.KeyType
	}
	return 0
}

func (m *SearchTrackObjectListDBReq) GetKeyVal() string {
	if m != nil {
		return m.KeyVal
	}
	return ""
}

func (m *SearchTrackObjectListDBReq) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *SearchTrackObjectListDBReq) GetHoldId() uint32 {
	if m != nil {
		return m.HoldId
	}
	return 0
}

func (m *SearchTrackObjectListDBReq) GetHoldLevel() uint32 {
	if m != nil {
		return m.HoldLevel
	}
	return 0
}

type SearchTrackObjectListDBResp struct {
	//返回信息
	Base *BaseRespInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	//设备id列表
	ObjectIdList         []uint32 `protobuf:"varint,2,rep,packed,name=object_id_list,json=objectIdList,proto3" json:"object_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchTrackObjectListDBResp) Reset()         { *m = SearchTrackObjectListDBResp{} }
func (m *SearchTrackObjectListDBResp) String() string { return proto.CompactTextString(m) }
func (*SearchTrackObjectListDBResp) ProtoMessage()    {}
func (*SearchTrackObjectListDBResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c410bd0313ceec, []int{25}
}
func (m *SearchTrackObjectListDBResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchTrackObjectListDBResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchTrackObjectListDBResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchTrackObjectListDBResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTrackObjectListDBResp.Merge(m, src)
}
func (m *SearchTrackObjectListDBResp) XXX_Size() int {
	return m.Size()
}
func (m *SearchTrackObjectListDBResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTrackObjectListDBResp.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTrackObjectListDBResp proto.InternalMessageInfo

func (m *SearchTrackObjectListDBResp) GetBase() *BaseRespInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *SearchTrackObjectListDBResp) GetObjectIdList() []uint32 {
	if m != nil {
		return m.ObjectIdList
	}
	return nil
}

func init() {
	proto.RegisterType((*GetObjectCANInfoDBResp)(nil), "mapgoo.paas.dap.device.GetObjectCANInfoDBResp")
	proto.RegisterType((*SetDeviceParamsDBResp)(nil), "mapgoo.paas.dap.device.SetDeviceParamsDBResp")
	proto.RegisterType((*UploadCarSsvidInfoDBReq)(nil), "mapgoo.paas.dap.device.UploadCarSsvidInfoDBReq")
	proto.RegisterType((*UploadCarSsvidInfoDBResp)(nil), "mapgoo.paas.dap.device.UploadCarSsvidInfoDBResp")
	proto.RegisterType((*GetExistObjInfoDBReq)(nil), "mapgoo.paas.dap.device.GetExistObjInfoDBReq")
	proto.RegisterType((*GetExistObjInfoDBResp)(nil), "mapgoo.paas.dap.device.GetExistObjInfoDBResp")
	proto.RegisterMapType((map[string]*DeviceSelfRegFields)(nil), "mapgoo.paas.dap.device.GetExistObjInfoDBResp.InfoMapEntry")
	proto.RegisterType((*AddObjectRegInfoDBReq)(nil), "mapgoo.paas.dap.device.AddObjectRegInfoDBReq")
	proto.RegisterType((*AddObjectRegInfoDBResp)(nil), "mapgoo.paas.dap.device.AddObjectRegInfoDBResp")
	proto.RegisterType((*GetMDTProductInfoDBReq)(nil), "mapgoo.paas.dap.device.GetMDTProductInfoDBReq")
	proto.RegisterType((*GetMDTProductInfoDBResp)(nil), "mapgoo.paas.dap.device.GetMDTProductInfoDBResp")
	proto.RegisterType((*UploadDeviceAppInfoDBResp)(nil), "mapgoo.paas.dap.device.UploadDeviceAppInfoDBResp")
	proto.RegisterType((*GetDeviceAppVerInfoDBReq)(nil), "mapgoo.paas.dap.device.GetDeviceAppVerInfoDBReq")
	proto.RegisterType((*GetDeviceAppVerInfoDBResp)(nil), "mapgoo.paas.dap.device.GetDeviceAppVerInfoDBResp")
	proto.RegisterType((*UpdateDeviceSelfRegDBReq)(nil), "mapgoo.paas.dap.device.UpdateDeviceSelfRegDBReq")
	proto.RegisterType((*UpdateDeviceSocolDBReq)(nil), "mapgoo.paas.dap.device.UpdateDeviceSocolDBReq")
	proto.RegisterType((*UpdateDeviceSocolDBResp)(nil), "mapgoo.paas.dap.device.UpdateDeviceSocolDBResp")
	proto.RegisterType((*SaveDeviceConfigDbReq)(nil), "mapgoo.paas.dap.device.SaveDeviceConfigDbReq")
	proto.RegisterType((*SaveDeviceConfigDbResp)(nil), "mapgoo.paas.dap.device.SaveDeviceConfigDbResp")
	proto.RegisterType((*DelDeviceConfigDbReq)(nil), "mapgoo.paas.dap.device.DelDeviceConfigDbReq")
	proto.RegisterType((*DelDeviceConfigDbResp)(nil), "mapgoo.paas.dap.device.DelDeviceConfigDbResp")
	proto.RegisterType((*GetDeviceConfigDbReq)(nil), "mapgoo.paas.dap.device.GetDeviceConfigDbReq")
	proto.RegisterType((*GetDeviceConfigDbResp)(nil), "mapgoo.paas.dap.device.GetDeviceConfigDbResp")
	proto.RegisterType((*GetDeviceConfigDbListReq)(nil), "mapgoo.paas.dap.device.GetDeviceConfigDbListReq")
	proto.RegisterType((*GetDeviceConfigDbListResp)(nil), "mapgoo.paas.dap.device.GetDeviceConfigDbListResp")
	proto.RegisterMapType((map[uint32]*DeviceConfigInfo)(nil), "mapgoo.paas.dap.device.GetDeviceConfigDbListResp.ConfigListEntry")
	proto.RegisterType((*SearchTrackObjectListDBReq)(nil), "mapgoo.paas.dap.device.SearchTrackObjectListDBReq")
	proto.RegisterType((*SearchTrackObjectListDBResp)(nil), "mapgoo.paas.dap.device.SearchTrackObjectListDBResp")
}

func init() { proto.RegisterFile("mapgoo.paas.dap.device.proto", fileDescriptor_33c410bd0313ceec) }

var fileDescriptor_33c410bd0313ceec = []byte{
	// 2520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x5a, 0xcf, 0x6f, 0x1b, 0xc7,
	0xf5, 0xcf, 0x52, 0x94, 0x44, 0x8e, 0x7e, 0x59, 0x1b, 0x49, 0xa6, 0x68, 0x5b, 0x94, 0x46, 0x72,
	0x2c, 0xcb, 0x31, 0xe9, 0xaf, 0x82, 0x6f, 0x5a, 0x18, 0x6d, 0x01, 0x49, 0x74, 0x5c, 0x22, 0x96,
	0xad, 0x2e, 0x1d, 0x17, 0xe8, 0xa1, 0xc4, 0x68, 0x77, 0x44, 0x4f, 0x44, 0x72, 0x37, 0xdc, 0xa5,
	0x6c, 0x06, 0xf0, 0xa5, 0x68, 0x51, 0x14, 0x3d, 0x04, 0x81, 0x6b, 0x24, 0x80, 0x51, 0x14, 0x45,
	0x10, 0xf4, 0xd4, 0x16, 0x28, 0xfa, 0x47, 0xf4, 0x58, 0xa0, 0x77, 0x22, 0x70, 0x7b, 0x28, 0x78,
	0xe8, 0xdf, 0x50, 0xcc, 0x9b, 0x5d, 0xee, 0xaf, 0x59, 0x8a, 0x54, 0x7a, 0x31, 0xb8, 0x6f, 0xde,
	0xbe, 0xf7, 0x99, 0xf7, 0x7b, 0x9f, 0x85, 0xae, 0x36, 0x89, 0x55, 0x37, 0xcd, 0xa2, 0x45, 0x88,
	0x5d, 0x34, 0x88, 0x55, 0x34, 0xe8, 0x19, 0xd3, 0x69, 0xd1, 0x6a, 0x9b, 0x8e, 0xa9, 0xae, 0xc8,
	0x4f, 0xf3, 0x21, 0xfa, 0x31, 0xb1, 0x5d, 0xfe, 0x7c, 0x2e, 0xc4, 0x1f, 0x90, 0x94, 0x0f, 0xe9,
	0x39, 0x63, 0x06, 0x35, 0x8b, 0x06, 0x71, 0x88, 0x7b, 0x7a, 0xbb, 0xce, 0x9c, 0xa7, 0x9d, 0xe3,
	0xa2, 0x6e, 0x36, 0x4b, 0x75, 0xb3, 0x6e, 0x96, 0x80, 0x7c, 0xdc, 0x39, 0x81, 0x27, 0x78, 0x80,
	0x5f, 0x9e, 0xb0, 0xba, 0x69, 0xd6, 0x1b, 0xb4, 0x44, 0x2c, 0x56, 0x22, 0xad, 0x96, 0xe9, 0x10,
	0x87, 0x99, 0x2d, 0x5b, 0x9c, 0xe2, 0x7f, 0x2b, 0x68, 0xe5, 0x3e, 0x75, 0x1e, 0x1d, 0x7f, 0x4c,
	0x75, 0xe7, 0x60, 0xef, 0x61, 0xa5, 0x75, 0x62, 0x96, 0xf7, 0x35, 0x6a, 0x5b, 0xea, 0x2e, 0x4a,
	0x73, 0xb4, 0x39, 0x65, 0x5d, 0xd9, 0x9e, 0xd9, 0x5d, 0x2b, 0xc6, 0xae, 0xb1, 0x4f, 0x6c, 0xca,
	0x39, 0xf9, 0x3b, 0x1a, 0xf0, 0xaa, 0x37, 0x51, 0x56, 0x27, 0xad, 0x9a, 0xed, 0x10, 0x87, 0xe6,
	0x52, 0xeb, 0xca, 0xf6, 0xdc, 0xfe, 0x6c, 0xbf, 0x57, 0xc8, 0x1c, 0xec, 0x3d, 0xac, 0x72, 0x9a,
	0x96, 0xd1, 0x49, 0x0b, 0x7e, 0xa9, 0x9b, 0x68, 0xfa, 0xa9, 0xd9, 0x30, 0x6a, 0xcc, 0xc8, 0x4d,
	0x00, 0x23, 0xea, 0xf7, 0x0a, 0x53, 0x3f, 0x34, 0x1b, 0x46, 0xa5, 0xac, 0x4d, 0xf1, 0xa3, 0x8a,
	0xc1, 0xe5, 0x99, 0x00, 0x8d, 0xb3, 0xa5, 0x7d, 0x79, 0x02, 0x6f, 0xa5, 0xac, 0x65, 0xc4, 0x71,
	0xc5, 0x50, 0x0b, 0x68, 0x92, 0xe9, 0x3a, 0x33, 0x72, 0x93, 0xeb, 0xca, 0x76, 0x76, 0x3f, 0xdb,
	0xef, 0x15, 0x26, 0x2b, 0x07, 0x07, 0x95, 0xb2, 0x26, 0xe8, 0xf8, 0x63, 0xb4, 0x5c, 0xa5, 0x4e,
	0x19, 0x0c, 0x7d, 0x44, 0xda, 0xa4, 0x69, 0x7f, 0x8b, 0x8b, 0x5e, 0x43, 0xa8, 0x65, 0x3a, 0x4c,
	0xa7, 0x35, 0xb3, 0x69, 0xc3, 0x4d, 0x33, 0x5a, 0x56, 0x50, 0x1e, 0x35, 0x6d, 0xfc, 0x4d, 0x0a,
	0x5d, 0xfe, 0xc8, 0x6a, 0x98, 0xc4, 0x38, 0x20, 0xed, 0xaa, 0x7d, 0xc6, 0x0c, 0xcf, 0xb0, 0x9f,
	0xa8, 0x2b, 0x28, 0xc5, 0x0c, 0x50, 0x36, 0xb7, 0x3f, 0xd5, 0xef, 0x15, 0x52, 0x95, 0xb2, 0x96,
	0x62, 0x86, 0x7a, 0x15, 0xa5, 0x59, 0x93, 0x32, 0x10, 0x96, 0xdd, 0xcf, 0xf4, 0x7b, 0x85, 0x74,
	0xe5, 0xf0, 0x5e, 0x45, 0x03, 0x2a, 0xbf, 0x9e, 0xcd, 0xe5, 0x80, 0xb1, 0xdc, 0xeb, 0x55, 0xab,
	0x4f, 0xf8, 0xf5, 0x80, 0xae, 0xae, 0xa0, 0x29, 0x6e, 0xf6, 0x8e, 0x2d, 0xec, 0xa4, 0xb9, 0x4f,
	0x6a, 0x01, 0xcd, 0x88, 0xe0, 0xaa, 0x39, 0x5d, 0x8b, 0x82, 0x75, 0xe6, 0x34, 0x24, 0x48, 0x8f,
	0xbb, 0x16, 0x55, 0x97, 0xd0, 0xa4, 0x63, 0x9e, 0xd2, 0x56, 0x6e, 0x8a, 0x4b, 0xd6, 0xc4, 0x83,
	0xaa, 0xa2, 0x74, 0xdb, 0x69, 0x5a, 0xb9, 0x69, 0x20, 0xc2, 0x6f, 0xb5, 0x84, 0x66, 0x40, 0x57,
	0x4d, 0x37, 0x3b, 0x2d, 0x27, 0x97, 0x81, 0x2b, 0xcc, 0xf7, 0x7b, 0x05, 0x04, 0x48, 0x0e, 0x38,
	0x55, 0x43, 0xc0, 0x02, 0xbf, 0xb9, 0xfb, 0x9e, 0x11, 0xe6, 0xd4, 0x1c, 0xd6, 0xa4, 0xb9, 0xec,
	0xba, 0xb2, 0x9d, 0x16, 0xee, 0xfb, 0x31, 0x61, 0xce, 0x63, 0xd6, 0xa4, 0x5a, 0xe6, 0x99, 0xfb,
	0x8b, 0xcb, 0xee, 0x58, 0x06, 0x71, 0xa8, 0x60, 0x46, 0xc0, 0x0c, 0xb2, 0x3f, 0x02, 0x32, 0xb0,
	0xa3, 0xce, 0xe0, 0x37, 0x7e, 0x88, 0x72, 0x72, 0x0b, 0x5f, 0xcc, 0xa3, 0xf8, 0x10, 0x2d, 0xdd,
	0xa7, 0xce, 0xbd, 0xe7, 0xcc, 0xe6, 0xd9, 0xe0, 0xbb, 0xeb, 0xff, 0xd1, 0x9c, 0xd9, 0x66, 0x75,
	0xd6, 0x22, 0x8d, 0x1a, 0xf8, 0x47, 0x01, 0x07, 0x5c, 0xea, 0xf7, 0x0a, 0xb3, 0xde, 0x01, 0xf8,
	0xc9, 0x7f, 0x6a, 0x52, 0x86, 0x5f, 0xa5, 0xd0, 0xb2, 0x44, 0xde, 0x05, 0xc3, 0x4d, 0x47, 0x19,
	0xd6, 0x3a, 0x31, 0x6b, 0x4d, 0x62, 0xe5, 0x52, 0xeb, 0x13, 0xdb, 0x33, 0xbb, 0x77, 0x8b, 0x09,
	0xc5, 0x48, 0xaa, 0xb4, 0xc8, 0x7f, 0x1e, 0x12, 0xeb, 0x5e, 0xcb, 0x69, 0x77, 0x85, 0x0f, 0x3c,
	0x79, 0xda, 0x34, 0x13, 0x67, 0x79, 0x1d, 0xcd, 0x06, 0xd9, 0xd4, 0x4b, 0x68, 0xe2, 0x94, 0x76,
	0xc5, 0x7d, 0x35, 0xfe, 0x53, 0xfd, 0x3e, 0x9a, 0x3c, 0x23, 0x8d, 0x8e, 0x48, 0xed, 0x99, 0xdd,
	0x1b, 0x45, 0x49, 0x09, 0x13, 0x09, 0x56, 0xa5, 0x8d, 0x13, 0x8d, 0xd6, 0x3f, 0x60, 0xb4, 0x61,
	0xd8, 0x9a, 0x78, 0xeb, 0x6e, 0xea, 0xbb, 0x0a, 0xfe, 0x53, 0x0a, 0x2d, 0xef, 0x19, 0x86, 0x48,
	0x60, 0x8d, 0xd6, 0x7d, 0x43, 0x7b, 0xf1, 0xaf, 0x48, 0xe3, 0x7f, 0x15, 0x4d, 0xd8, 0xac, 0xe9,
	0x26, 0xc7, 0x74, 0xbf, 0x57, 0x98, 0xa8, 0x56, 0x0e, 0x35, 0x4e, 0xe3, 0x11, 0xee, 0x16, 0x89,
	0x16, 0x69, 0x52, 0x91, 0x20, 0x1a, 0x12, 0xa4, 0x87, 0xa4, 0x19, 0x2a, 0x35, 0xe9, 0xc4, 0x52,
	0xe3, 0x4b, 0xd1, 0x4d, 0x43, 0xe4, 0xc9, 0x40, 0xca, 0x81, 0x69, 0x40, 0xca, 0x37, 0x0d, 0x87,
	0x27, 0x11, 0x17, 0x34, 0x05, 0x79, 0x94, 0x75, 0x29, 0x15, 0x43, 0xcd, 0xa1, 0xe9, 0x06, 0x6b,
	0xe9, 0xd4, 0xa6, 0x6e, 0xce, 0x78, 0x8f, 0xea, 0x66, 0x34, 0x82, 0x32, 0x70, 0x1e, 0x8a, 0x17,
	0xf5, 0x32, 0x9a, 0x26, 0x96, 0x55, 0xe3, 0x06, 0xcf, 0xc2, 0xf1, 0x14, 0xb1, 0xac, 0x0f, 0x69,
	0x17, 0x33, 0xb4, 0x22, 0xb3, 0xd7, 0x05, 0x03, 0xe9, 0x4a, 0xb0, 0xa0, 0x42, 0x81, 0xf6, 0x4b,
	0x28, 0xfe, 0x0e, 0xf4, 0x82, 0xc3, 0xf2, 0xe3, 0xa3, 0xb6, 0x69, 0x74, 0x74, 0xc7, 0xf7, 0x4d,
	0xf8, 0xee, 0x4a, 0xe4, 0xee, 0xf8, 0x05, 0xba, 0x2c, 0x7d, 0xf1, 0x82, 0x20, 0x73, 0x68, 0xfa,
	0x84, 0xe8, 0x8e, 0xd9, 0xee, 0x0a, 0x7f, 0x6b, 0xde, 0x23, 0xaf, 0x55, 0xc7, 0x6d, 0xd2, 0x72,
	0xab, 0xa0, 0x26, 0x1e, 0xf0, 0x23, 0xb4, 0x2a, 0x4a, 0x81, 0x88, 0xbd, 0x3d, 0xcb, 0xfa, 0x96,
	0xb5, 0xe0, 0x17, 0x0a, 0xca, 0xdd, 0xf7, 0x7a, 0xc5, 0x9e, 0x65, 0x3d, 0xa1, 0x6d, 0xdf, 0x16,
	0xa1, 0x9e, 0xa4, 0x0c, 0xed, 0x49, 0x3f, 0x40, 0x97, 0xb8, 0x53, 0x2d, 0xa2, 0x9f, 0x92, 0x3a,
	0x15, 0xe1, 0x29, 0x22, 0x78, 0xa9, 0xdf, 0x2b, 0xc4, 0xce, 0xb4, 0x79, 0x62, 0x59, 0x47, 0x82,
	0xc0, 0x03, 0x17, 0xff, 0x56, 0x41, 0xab, 0x09, 0x38, 0x6c, 0x4b, 0xfd, 0xde, 0x38, 0x37, 0x13,
	0x09, 0xc5, 0xc9, 0xae, 0x91, 0xf7, 0x51, 0x9a, 0x27, 0xbe, 0x9b, 0xca, 0x5b, 0xc9, 0xa9, 0xec,
	0xeb, 0x15, 0x32, 0x18, 0xd8, 0x89, 0xff, 0x8b, 0x7f, 0x9e, 0xe6, 0x45, 0x98, 0x97, 0xe4, 0x50,
	0xd6, 0x27, 0xe6, 0x33, 0x7f, 0xf6, 0xfb, 0x99, 0x68, 0xd7, 0x29, 0xbf, 0x9f, 0x01, 0xc1, 0x6d,
	0xd7, 0xbc, 0x21, 0x34, 0x0d, 0xa7, 0xe6, 0xc5, 0x9c, 0x98, 0x11, 0x16, 0xfa, 0xbd, 0x42, 0x90,
	0x0c, 0x41, 0xf8, 0x58, 0x24, 0xe0, 0x75, 0x3f, 0x01, 0xd3, 0x20, 0x73, 0xa6, 0xdf, 0x2b, 0x78,
	0x24, 0x3f, 0x1b, 0xb7, 0xfc, 0x62, 0x00, 0xbd, 0x50, 0xb0, 0xb9, 0xa4, 0x41, 0x35, 0x78, 0x3f,
	0x9a, 0xb3, 0xd0, 0x1c, 0xf7, 0x17, 0xfb, 0xbd, 0x42, 0xf8, 0x20, 0x92, 0xc6, 0x3b, 0xc1, 0xe0,
	0x98, 0x06, 0xf9, 0x73, 0xfd, 0x5e, 0xc1, 0x27, 0x06, 0xa2, 0x63, 0xcb, 0x4f, 0xf9, 0x8c, 0x0f,
	0xd8, 0x25, 0x79, 0xf9, 0xcf, 0x63, 0x88, 0xd9, 0x6e, 0x6b, 0x0c, 0x56, 0x88, 0x8c, 0x88, 0xa1,
	0xe8, 0x99, 0x36, 0xef, 0x51, 0xf6, 0xc4, 0xfb, 0xef, 0xa3, 0x39, 0x4b, 0x64, 0x65, 0xed, 0x98,
	0x38, 0xfa, 0x53, 0x68, 0xad, 0xee, 0x4d, 0x42, 0x07, 0xda, 0xac, 0xfb, 0xb8, 0xcf, 0x9f, 0xd4,
	0x9b, 0x68, 0x91, 0xd9, 0x35, 0x57, 0xb8, 0x67, 0xb1, 0x19, 0x18, 0x74, 0xe6, 0x99, 0x2d, 0xbc,
	0x0e, 0x25, 0xd4, 0xc0, 0x3f, 0x45, 0x2b, 0xa1, 0x28, 0x30, 0x75, 0xb3, 0x21, 0x62, 0xa0, 0x8c,
	0x66, 0xdd, 0xe1, 0xc3, 0xe6, 0x44, 0x37, 0x54, 0x37, 0xe2, 0xa1, 0x1a, 0x78, 0x13, 0xf2, 0xd0,
	0x9d, 0x59, 0x80, 0x80, 0x0f, 0xf9, 0x30, 0x25, 0x91, 0x7f, 0xc1, 0xec, 0xfe, 0x8f, 0x82, 0x96,
	0xab, 0xe4, 0xcc, 0x95, 0x76, 0x60, 0xb6, 0x4e, 0x58, 0xbd, 0x7c, 0xcc, 0xe1, 0x5e, 0x89, 0xa5,
	0x76, 0xc0, 0x5d, 0xdb, 0xdc, 0x11, 0x35, 0xca, 0x7b, 0x6b, 0xed, 0x8c, 0xb6, 0x6d, 0x66, 0xb6,
	0xdc, 0xc1, 0x6f, 0x9e, 0xd9, 0xd0, 0x72, 0x9f, 0x08, 0xaa, 0xfa, 0xc1, 0x60, 0x96, 0x69, 0x30,
	0xdb, 0xc9, 0x4d, 0x40, 0xc3, 0xbe, 0x9e, 0x9c, 0x61, 0x02, 0x02, 0xcc, 0xa4, 0xde, 0x88, 0xf3,
	0x80, 0xd9, 0x0e, 0x97, 0xc3, 0x5a, 0x36, 0x6d, 0x3b, 0x42, 0x4e, 0x7a, 0x2c, 0x39, 0xe2, 0x4d,
	0x2e, 0x07, 0x3f, 0x40, 0x2b, 0xb2, 0xfb, 0x5e, 0xd0, 0x7c, 0x35, 0xb4, 0x54, 0xa6, 0x8d, 0x31,
	0x8d, 0xb7, 0x83, 0x16, 0x6d, 0xea, 0x38, 0xac, 0x55, 0x87, 0x4a, 0x27, 0x2e, 0xc4, 0x27, 0x99,
	0xac, 0xb6, 0xe0, 0x1e, 0xf0, 0x8a, 0x07, 0x70, 0x3f, 0x44, 0xcb, 0x12, 0x05, 0x17, 0x44, 0xdb,
	0x80, 0xb1, 0x6e, 0x4c, 0xb4, 0x1b, 0x68, 0x36, 0x88, 0xd6, 0xed, 0x42, 0x33, 0x01, 0xa0, 0xbc,
	0x13, 0x89, 0xaf, 0x1c, 0x28, 0x4c, 0x9a, 0x78, 0xc0, 0x7f, 0x51, 0x60, 0xea, 0xfb, 0xdf, 0x60,
	0xe7, 0x23, 0x49, 0x70, 0x26, 0xe6, 0x28, 0xd2, 0xc1, 0x19, 0x58, 0x2d, 0x23, 0x64, 0x71, 0x6f,
	0x5f, 0x20, 0xce, 0xb2, 0xf0, 0x22, 0xd8, 0xfb, 0x47, 0x81, 0x66, 0xe7, 0x61, 0xe6, 0x07, 0xdc,
	0x4c, 0x11, 0x08, 0x4a, 0x0c, 0xc2, 0x12, 0x9a, 0x6c, 0xb0, 0x26, 0x73, 0xdc, 0x61, 0x42, 0x3c,
	0xe0, 0x2f, 0x53, 0x81, 0xc6, 0x15, 0x96, 0x79, 0x41, 0x5b, 0x1c, 0xa3, 0x19, 0x1d, 0xe4, 0xf8,
	0xa1, 0x33, 0xb3, 0xbb, 0x37, 0x64, 0x08, 0x96, 0xeb, 0x2e, 0x0a, 0x02, 0x7f, 0x84, 0x21, 0x57,
	0x43, 0xfa, 0x80, 0x90, 0xd7, 0xd1, 0x42, 0xe4, 0x38, 0x38, 0x03, 0xcf, 0x89, 0x19, 0xf8, 0x6e,
	0x78, 0x06, 0xde, 0x3a, 0xcf, 0xdc, 0x70, 0x87, 0xc0, 0x00, 0xfc, 0xb5, 0x82, 0xf2, 0x55, 0x4a,
	0xda, 0xfa, 0xd3, 0xc7, 0x6d, 0xa2, 0x9f, 0x8a, 0xa9, 0x81, 0x2b, 0x14, 0x15, 0x73, 0x15, 0x65,
	0x4e, 0x69, 0x57, 0x7c, 0xab, 0x09, 0xad, 0xd3, 0xa7, 0xb4, 0x0b, 0x1f, 0x6a, 0x97, 0x11, 0xff,
	0x59, 0x3b, 0x23, 0x0d, 0x37, 0x20, 0xa7, 0x4e, 0x69, 0xf7, 0x09, 0x69, 0xf0, 0x58, 0xb6, 0xf8,
	0x0c, 0x61, 0xb3, 0x4f, 0xbd, 0x78, 0xcc, 0x70, 0x42, 0x95, 0x7d, 0x0a, 0x6f, 0x85, 0x86, 0xdf,
	0x41, 0x8b, 0xbb, 0x86, 0x10, 0x1c, 0x34, 0xe8, 0x19, 0x6d, 0xb8, 0xdf, 0x85, 0x59, 0x4e, 0x79,
	0xc0, 0x09, 0xf8, 0x19, 0xba, 0x92, 0x08, 0xf3, 0x82, 0x3e, 0xdc, 0x42, 0xf3, 0x83, 0x9c, 0xf3,
	0xdd, 0x38, 0xa7, 0xcd, 0x7a, 0x89, 0xc7, 0xe5, 0xef, 0xfe, 0xf5, 0x1d, 0x34, 0x27, 0x0c, 0x58,
	0x3e, 0x3e, 0x6a, 0x9b, 0xcf, 0xbb, 0xea, 0x4b, 0x25, 0xdc, 0x60, 0xb8, 0x68, 0x31, 0x07, 0xa9,
	0xd2, 0x68, 0xf7, 0x8b, 0x1d, 0x28, 0xa7, 0x9f, 0xe4, 0xdf, 0x19, 0x85, 0xcd, 0xb6, 0xf0, 0xce,
	0xcf, 0xfe, 0xf1, 0xaf, 0x97, 0xa9, 0x2d, 0x8c, 0x4b, 0x06, 0xb1, 0x4a, 0x82, 0xaf, 0xd4, 0x91,
	0xab, 0xfe, 0x95, 0x82, 0xde, 0x1e, 0xc4, 0x59, 0x80, 0xbe, 0x91, 0x1c, 0x11, 0x43, 0xe1, 0x84,
	0x05, 0x01, 0x9c, 0x1b, 0x00, 0x67, 0x03, 0x17, 0x82, 0x70, 0xea, 0x12, 0x9d, 0x2f, 0xd0, 0xc2,
	0x00, 0xca, 0xe8, 0x30, 0xf0, 0x79, 0x2c, 0xb6, 0x85, 0x37, 0x01, 0xc2, 0x35, 0x7c, 0x45, 0x0a,
	0xc1, 0xd5, 0xf5, 0x4a, 0x94, 0xbd, 0x47, 0x81, 0xcf, 0x61, 0xf7, 0x44, 0xfa, 0x89, 0x18, 0xe5,
	0xe3, 0x58, 0xb6, 0x47, 0x63, 0xb4, 0x2d, 0x7c, 0x13, 0x10, 0x6d, 0xe2, 0x8d, 0x08, 0x22, 0x89,
	0xf6, 0xcf, 0x14, 0xa4, 0x56, 0xbb, 0x2d, 0xfd, 0x51, 0x60, 0x44, 0x4b, 0x02, 0x15, 0xe5, 0x4b,
	0x04, 0x15, 0x67, 0xb4, 0x2d, 0xfc, 0x0e, 0x80, 0x5a, 0xc7, 0x6b, 0x41, 0x50, 0x76, 0x5c, 0xf5,
	0xaf, 0x15, 0xb4, 0x78, 0x3f, 0xba, 0x85, 0x52, 0xa5, 0xf1, 0x10, 0x61, 0xe3, 0x78, 0x6e, 0x8c,
	0xc4, 0x67, 0x5b, 0xf8, 0x3a, 0xc0, 0x29, 0xe0, 0x6b, 0x41, 0x38, 0x71, 0xbd, 0x9f, 0x2b, 0x68,
	0xb1, 0x3a, 0x1a, 0x9a, 0x6a, 0x1c, 0xcd, 0xed, 0xa4, 0xea, 0x2b, 0x5d, 0xb3, 0xc9, 0x31, 0xc5,
	0xb5, 0xff, 0x46, 0x41, 0x6a, 0x7c, 0x23, 0xa9, 0x0e, 0x49, 0x19, 0xee, 0x70, 0x58, 0x34, 0x70,
	0x50, 0xc5, 0x21, 0x2d, 0x41, 0xb2, 0xe5, 0xf4, 0x1c, 0xa7, 0xae, 0x45, 0xa3, 0x29, 0xa2, 0xff,
	0x2b, 0x05, 0x2d, 0xc9, 0xf6, 0x4d, 0x6a, 0x29, 0x49, 0x61, 0xc2, 0xfe, 0x2f, 0x7f, 0x67, 0xbc,
	0x17, 0x6c, 0x0b, 0x6f, 0x03, 0x46, 0x8c, 0xd7, 0xc3, 0x55, 0x49, 0x02, 0xe6, 0x0b, 0x11, 0x5e,
	0xe1, 0x05, 0x90, 0xfa, 0xee, 0x18, 0xbb, 0xa2, 0x21, 0x6e, 0x95, 0x6e, 0x96, 0xe4, 0x6e, 0xad,
	0xc7, 0x30, 0xbc, 0x56, 0x90, 0x1a, 0xdf, 0x63, 0xa8, 0x89, 0xca, 0xa4, 0x3b, 0xa2, 0x64, 0xef,
	0xca, 0x57, 0x24, 0xf2, 0xb4, 0x24, 0x71, 0x18, 0xbf, 0x13, 0xb5, 0x3c, 0xba, 0xc1, 0x50, 0x87,
	0x45, 0x93, 0x64, 0x4f, 0x92, 0x2f, 0x8d, 0xc5, 0x3f, 0xa4, 0xc2, 0xc7, 0x90, 0xfc, 0x5e, 0x41,
	0xcb, 0xd2, 0x25, 0x87, 0xba, 0x23, 0xcb, 0x0c, 0x09, 0x2b, 0xc7, 0xf7, 0x7f, 0xc3, 0x63, 0x4f,
	0xb2, 0x3f, 0x91, 0x97, 0xdb, 0x8e, 0x14, 0xc9, 0x1f, 0x82, 0xd3, 0x6f, 0x70, 0x5d, 0xa1, 0xde,
	0x39, 0x77, 0x50, 0x8b, 0x6c, 0x59, 0x92, 0x91, 0x26, 0xee, 0x43, 0x12, 0x1b, 0x83, 0x04, 0xcf,
	0x6b, 0x05, 0xbd, 0xed, 0xb7, 0xff, 0xc1, 0xda, 0x22, 0x9a, 0x29, 0xd1, 0x39, 0xc1, 0x65, 0xf4,
	0xac, 0x79, 0x7b, 0x0c, 0xee, 0x24, 0x5f, 0xdb, 0x12, 0x14, 0x7f, 0x54, 0xd0, 0xaa, 0x64, 0xad,
	0x72, 0x9e, 0x2d, 0x93, 0x36, 0x31, 0xd1, 0xa8, 0x4c, 0xe4, 0x1e, 0x20, 0xbd, 0x0d, 0x48, 0x6f,
	0xe0, 0xeb, 0x49, 0x63, 0x50, 0x18, 0xd1, 0x4b, 0x51, 0xb2, 0xc5, 0xd1, 0x13, 0x66, 0x50, 0x93,
	0x1f, 0xa8, 0x37, 0x87, 0x76, 0xab, 0x01, 0x1f, 0x47, 0xb8, 0x33, 0x2a, 0x6b, 0x52, 0x4e, 0xd7,
	0xe3, 0xea, 0x5f, 0x2b, 0x81, 0x4f, 0x3f, 0x6f, 0x56, 0xda, 0xb3, 0x98, 0x7a, 0x6b, 0xa8, 0xb2,
	0x00, 0x27, 0x47, 0xf6, 0xee, 0xe8, 0xcc, 0x49, 0x95, 0xba, 0x2e, 0x03, 0xf1, 0x45, 0x70, 0x7a,
	0x3c, 0x20, 0x4d, 0xda, 0x26, 0x80, 0x7a, 0xb8, 0x25, 0x7c, 0x46, 0x8e, 0xed, 0xd6, 0xc8, 0xbc,
	0xe7, 0xce, 0x92, 0x01, 0x04, 0x5f, 0x45, 0xa6, 0xed, 0xc0, 0xd1, 0xed, 0xf3, 0x02, 0x29, 0x8c,
	0xaf, 0x38, 0x0e, 0xfb, 0x28, 0xd3, 0x77, 0x00, 0xca, 0x0b, 0x34, 0x3f, 0xb8, 0x29, 0x2c, 0x84,
	0xd4, 0x21, 0xd3, 0x2c, 0x30, 0x70, 0x44, 0x9b, 0xe7, 0xf2, 0xd8, 0x16, 0xc6, 0x00, 0xe3, 0x2a,
	0xce, 0x47, 0x2c, 0x25, 0x7e, 0xc1, 0x22, 0x8b, 0x07, 0xd7, 0x62, 0x6c, 0x27, 0x95, 0xdc, 0x2e,
	0xe4, 0xeb, 0xb1, 0x7c, 0x69, 0x2c, 0xfe, 0xa4, 0x66, 0xdb, 0x89, 0xe1, 0x78, 0xa5, 0xa0, 0x4b,
	0xd1, 0x8d, 0x4f, 0x72, 0xab, 0x95, 0xee, 0xc2, 0x92, 0x5b, 0xad, 0x7c, 0x95, 0x14, 0xb1, 0x1a,
	0xff, 0x8e, 0x2c, 0xc5, 0x20, 0x7c, 0xae, 0xa0, 0x85, 0xc8, 0x6a, 0x27, 0x79, 0x38, 0x91, 0x2d,
	0x99, 0x92, 0x87, 0x13, 0xe9, 0xc6, 0x08, 0x6f, 0x00, 0xa8, 0x2b, 0x78, 0xd5, 0x07, 0x15, 0xd5,
	0xcf, 0x31, 0x45, 0xd6, 0x05, 0x43, 0x07, 0xa6, 0x31, 0x30, 0x49, 0x37, 0x41, 0x32, 0x4c, 0x51,
	0xfd, 0x5f, 0xcb, 0xd6, 0x48, 0xb0, 0x12, 0xbc, 0x33, 0xe6, 0xc6, 0x63, 0x94, 0x46, 0x1a, 0xdd,
	0x91, 0x44, 0x4a, 0x85, 0x0c, 0xa1, 0x8b, 0xe6, 0xcf, 0x0a, 0xba, 0x9c, 0xb0, 0x24, 0x50, 0x77,
	0x93, 0xbf, 0x0e, 0x92, 0x96, 0x1f, 0xf9, 0xf7, 0xc6, 0x7e, 0xc7, 0xb6, 0xf0, 0x2d, 0x40, 0x7b,
	0x1d, 0x6f, 0x86, 0xbf, 0x2b, 0xe4, 0xa8, 0x7e, 0xa9, 0xa0, 0x39, 0x1e, 0x96, 0x7e, 0x9b, 0x08,
	0x7f, 0xe3, 0x05, 0xfe, 0xda, 0x22, 0xc4, 0xc6, 0xd1, 0xdd, 0x1c, 0x91, 0x33, 0xe6, 0x63, 0x0f,
	0x53, 0x48, 0xef, 0x67, 0x0a, 0x5a, 0x10, 0x28, 0x7d, 0xda, 0x4e, 0xa2, 0x86, 0x30, 0x63, 0xbc,
	0xf8, 0x0f, 0xe3, 0x4d, 0xfa, 0x8a, 0x8f, 0x6a, 0x7f, 0xe9, 0x56, 0x0d, 0xa0, 0xdc, 0x6b, 0xb7,
	0xe1, 0x7f, 0x3d, 0x6f, 0x9d, 0x7b, 0x69, 0x97, 0x33, 0xde, 0x2c, 0x87, 0x32, 0xdb, 0x16, 0xde,
	0x02, 0x50, 0x6b, 0xf8, 0xaa, 0xd4, 0x48, 0x1e, 0x00, 0xee, 0xb1, 0x32, 0x6d, 0xb8, 0x30, 0x0d,
	0xfa, 0x3c, 0xd9, 0x63, 0x21, 0xb6, 0xa1, 0x1e, 0x8b, 0x70, 0x26, 0x79, 0x2c, 0xac, 0x97, 0x7f,
	0xc2, 0x04, 0x6c, 0x76, 0xaf, 0xdd, 0x96, 0x34, 0x45, 0xb9, 0x23, 0x5c, 0xde, 0x78, 0x5d, 0x3d,
	0x87, 0x3d, 0x69, 0xdc, 0x89, 0xf3, 0xee, 0x2f, 0xff, 0xed, 0xcd, 0x9a, 0xf2, 0xf7, 0x37, 0x6b,
	0xca, 0x37, 0x6f, 0xd6, 0x94, 0x2f, 0xff, 0xb9, 0xf6, 0xd6, 0x4f, 0x26, 0x88, 0xc5, 0x8e, 0xde,
	0x3a, 0x52, 0x8e, 0x52, 0xc7, 0x53, 0xf0, 0xd7, 0x3e, 0xef, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff,
	0x8e, 0x29, 0x80, 0x5c, 0xc2, 0x24, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceDbProxyClient is the client API for DeviceDbProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceDbProxyClient interface {
	//设备添加/修改 设备信息CRUD
	UpdateDeviceBaseInfoDB(ctx context.Context, in *SaveDeviceInfoReq, opts ...grpc.CallOption) (*SaveDeviceInfoResp, error)
	//获取设备基本信息, 可根据原始IMEI查询设备基本信息Map
	GetDeviceBaseInfoDB(ctx context.Context, in *DeviceInfoReq, opts ...grpc.CallOption) (*DeviceBaseInfoResp, error)
	//获取设备信息, 可根据原始IMEI查询设备基本信息Map
	GetDeviceInfoDB(ctx context.Context, in *DeviceInfoReq, opts ...grpc.CallOption) (*DeviceInfoResp, error)
	// 根据原始IMEI获取设备基本信息Map
	GetOriginalIMEIInfoDB(ctx context.Context, in *OriginalIMEIInfoReq, opts ...grpc.CallOption) (*OriginalIMEIInfoResp, error)
	// 更新设备原始IMEI接口
	SyncOriginalImeiDB(ctx context.Context, in *SyncOriginalImeiReq, opts ...grpc.CallOption) (*SyncOriginalImeiResp, error)
	// 设备参数读取
	GetDeviceParamsDB(ctx context.Context, in *GetDeviceParamsReq, opts ...grpc.CallOption) (*GetDeviceParamsResp, error)
	// 设备能力上传
	SetDeviceParamsDB(ctx context.Context, in *SetDeviceParamsReq, opts ...grpc.CallOption) (*SetDeviceParamsDBResp, error)
	// 获取Can状态、设备信息请求
	GetObjectCANInfoDB(ctx context.Context, in *DeviceIMEIFieldReq, opts ...grpc.CallOption) (*GetObjectCANInfoDBResp, error)
	// 上传视频设备信息
	UploadCarSsvidInfoDB(ctx context.Context, in *UploadCarSsvidInfoDBReq, opts ...grpc.CallOption) (*UploadCarSsvidInfoDBResp, error)
	// 自注册部分1
	GetExistObjInfoDB(ctx context.Context, in *GetExistObjInfoDBReq, opts ...grpc.CallOption) (*GetExistObjInfoDBResp, error)
	// 保存设备自注册信息至数据表
	AddObjectRegInfoDB(ctx context.Context, in *AddObjectRegInfoDBReq, opts ...grpc.CallOption) (*AddObjectRegInfoDBResp, error)
	// 获取设备类型产品信息
	GetMDTProductInfoDB(ctx context.Context, in *GetMDTProductInfoDBReq, opts ...grpc.CallOption) (*GetMDTProductInfoDBResp, error)
	// 上传设备APK应用信息
	UploadDeviceAppInfoDB(ctx context.Context, in *UploadDeviceAppInfoReq, opts ...grpc.CallOption) (*UploadDeviceAppInfoDBResp, error)
	// 获取设备APP版本信息
	GetDeviceAppVerInfoDB(ctx context.Context, in *GetDeviceAppVerInfoDBReq, opts ...grpc.CallOption) (*GetDeviceAppVerInfoDBResp, error)
	// 设备自注册新增保存数据方法
	SaveDeviceSelfRegDB(ctx context.Context, in *SaveDeviceSelfRegInfoReq, opts ...grpc.CallOption) (*SaveDeviceSelfRegInfoResp, error)
	// 修改自注册设备信息
	UpdateDeviceSelfRegInfoDB(ctx context.Context, in *UpdateDeviceSelfRegDBReq, opts ...grpc.CallOption) (*UpdateDeviceSelfRegInfoResp, error)
	//获取设备摄像头信息列表
	GetDeviceVideoInfo(ctx context.Context, in *GetDeviceVideoInfoReq, opts ...grpc.CallOption) (*GetDeviceVideoInfoResp, error)
	//获取设备基本信息for openapi
	GetDeviceBaseInfoApi(ctx context.Context, in *GetDeviceBaseInfoApiReq, opts ...grpc.CallOption) (*GetDeviceBaseInfoApiResp, error)
	//获取设备摄像头通道数
	GetDeviceCameraInfo(ctx context.Context, in *GetDeviceCameraInfoReq, opts ...grpc.CallOption) (*GetDeviceCameraInfoResp, error)
	//更新设备摄像头通道数
	UpdateDeviceCameraInfo(ctx context.Context, in *UpdateDeviceCameraInfoReq, opts ...grpc.CallOption) (*UpdateDeviceCameraInfoResp, error)
	//获取Socol配置
	GetDeviceSocol(ctx context.Context, in *DeviceSocolReq, opts ...grpc.CallOption) (*DeviceSocolResp, error)
	//保存Socol配置
	UpdateDeviceSocol(ctx context.Context, in *UpdateDeviceSocolDBReq, opts ...grpc.CallOption) (*UpdateDeviceSocolDBResp, error)
	//保存和更新设备配置参数
	SaveDeviceConfig(ctx context.Context, in *SaveDeviceConfigDbReq, opts ...grpc.CallOption) (*SaveDeviceConfigDbResp, error)
	//删除设备配置参数
	DelDeviceConfig(ctx context.Context, in *DelDeviceConfigDbReq, opts ...grpc.CallOption) (*DelDeviceConfigDbResp, error)
	//获取设备配置参数
	GetDeviceConfig(ctx context.Context, in *GetDeviceConfigDbReq, opts ...grpc.CallOption) (*GetDeviceConfigDbResp, error)
	//获取设备配置参数
	GetDeviceConfigDbList(ctx context.Context, in *GetDeviceConfigDbListReq, opts ...grpc.CallOption) (*GetDeviceConfigDbListResp, error)
	//查询在线监控设备
	SearchTrackObjectListDB(ctx context.Context, in *SearchTrackObjectListDBReq, opts ...grpc.CallOption) (*SearchTrackObjectListDBResp, error)
	//视频编码信息上报
	SaveVideoInfo(ctx context.Context, in *SaveVideoInfoReq, opts ...grpc.CallOption) (*SaveVideoInfoResp, error)
	//查询视频信息
	SearchVideoInfo(ctx context.Context, in *SearchVideoInfoReq, opts ...grpc.CallOption) (*SearchVideoInfoResp, error)
	//上报视频错误码信息
	SaveVideoErrCode(ctx context.Context, in *SaveVideoErrCodeReq, opts ...grpc.CallOption) (*SaveVideoErrCodeResp, error)
	//删除
	DelVideoIndex(ctx context.Context, in *DelVideoIndexReq, opts ...grpc.CallOption) (*DelVideoIndexResp, error)
	//查询错误码
	SearchVideoErrInfo(ctx context.Context, in *SearchVideoErrInfoReq, opts ...grpc.CallOption) (*SearchVideoErrInfoResp, error)
}

type deviceDbProxyClient struct {
	cc *grpc.ClientConn
}

func NewDeviceDbProxyClient(cc *grpc.ClientConn) DeviceDbProxyClient {
	return &deviceDbProxyClient{cc}
}

func (c *deviceDbProxyClient) UpdateDeviceBaseInfoDB(ctx context.Context, in *SaveDeviceInfoReq, opts ...grpc.CallOption) (*SaveDeviceInfoResp, error) {
	out := new(SaveDeviceInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/UpdateDeviceBaseInfoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) GetDeviceBaseInfoDB(ctx context.Context, in *DeviceInfoReq, opts ...grpc.CallOption) (*DeviceBaseInfoResp, error) {
	out := new(DeviceBaseInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceBaseInfoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) GetDeviceInfoDB(ctx context.Context, in *DeviceInfoReq, opts ...grpc.CallOption) (*DeviceInfoResp, error) {
	out := new(DeviceInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceInfoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) GetOriginalIMEIInfoDB(ctx context.Context, in *OriginalIMEIInfoReq, opts ...grpc.CallOption) (*OriginalIMEIInfoResp, error) {
	out := new(OriginalIMEIInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/GetOriginalIMEIInfoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) SyncOriginalImeiDB(ctx context.Context, in *SyncOriginalImeiReq, opts ...grpc.CallOption) (*SyncOriginalImeiResp, error) {
	out := new(SyncOriginalImeiResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/SyncOriginalImeiDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) GetDeviceParamsDB(ctx context.Context, in *GetDeviceParamsReq, opts ...grpc.CallOption) (*GetDeviceParamsResp, error) {
	out := new(GetDeviceParamsResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceParamsDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) SetDeviceParamsDB(ctx context.Context, in *SetDeviceParamsReq, opts ...grpc.CallOption) (*SetDeviceParamsDBResp, error) {
	out := new(SetDeviceParamsDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/SetDeviceParamsDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) GetObjectCANInfoDB(ctx context.Context, in *DeviceIMEIFieldReq, opts ...grpc.CallOption) (*GetObjectCANInfoDBResp, error) {
	out := new(GetObjectCANInfoDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/GetObjectCANInfoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) UploadCarSsvidInfoDB(ctx context.Context, in *UploadCarSsvidInfoDBReq, opts ...grpc.CallOption) (*UploadCarSsvidInfoDBResp, error) {
	out := new(UploadCarSsvidInfoDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/UploadCarSsvidInfoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) GetExistObjInfoDB(ctx context.Context, in *GetExistObjInfoDBReq, opts ...grpc.CallOption) (*GetExistObjInfoDBResp, error) {
	out := new(GetExistObjInfoDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/GetExistObjInfoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) AddObjectRegInfoDB(ctx context.Context, in *AddObjectRegInfoDBReq, opts ...grpc.CallOption) (*AddObjectRegInfoDBResp, error) {
	out := new(AddObjectRegInfoDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/AddObjectRegInfoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) GetMDTProductInfoDB(ctx context.Context, in *GetMDTProductInfoDBReq, opts ...grpc.CallOption) (*GetMDTProductInfoDBResp, error) {
	out := new(GetMDTProductInfoDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/GetMDTProductInfoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) UploadDeviceAppInfoDB(ctx context.Context, in *UploadDeviceAppInfoReq, opts ...grpc.CallOption) (*UploadDeviceAppInfoDBResp, error) {
	out := new(UploadDeviceAppInfoDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/UploadDeviceAppInfoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) GetDeviceAppVerInfoDB(ctx context.Context, in *GetDeviceAppVerInfoDBReq, opts ...grpc.CallOption) (*GetDeviceAppVerInfoDBResp, error) {
	out := new(GetDeviceAppVerInfoDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceAppVerInfoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) SaveDeviceSelfRegDB(ctx context.Context, in *SaveDeviceSelfRegInfoReq, opts ...grpc.CallOption) (*SaveDeviceSelfRegInfoResp, error) {
	out := new(SaveDeviceSelfRegInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/SaveDeviceSelfRegDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) UpdateDeviceSelfRegInfoDB(ctx context.Context, in *UpdateDeviceSelfRegDBReq, opts ...grpc.CallOption) (*UpdateDeviceSelfRegInfoResp, error) {
	out := new(UpdateDeviceSelfRegInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/UpdateDeviceSelfRegInfoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) GetDeviceVideoInfo(ctx context.Context, in *GetDeviceVideoInfoReq, opts ...grpc.CallOption) (*GetDeviceVideoInfoResp, error) {
	out := new(GetDeviceVideoInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceVideoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) GetDeviceBaseInfoApi(ctx context.Context, in *GetDeviceBaseInfoApiReq, opts ...grpc.CallOption) (*GetDeviceBaseInfoApiResp, error) {
	out := new(GetDeviceBaseInfoApiResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceBaseInfoApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) GetDeviceCameraInfo(ctx context.Context, in *GetDeviceCameraInfoReq, opts ...grpc.CallOption) (*GetDeviceCameraInfoResp, error) {
	out := new(GetDeviceCameraInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceCameraInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) UpdateDeviceCameraInfo(ctx context.Context, in *UpdateDeviceCameraInfoReq, opts ...grpc.CallOption) (*UpdateDeviceCameraInfoResp, error) {
	out := new(UpdateDeviceCameraInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/UpdateDeviceCameraInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) GetDeviceSocol(ctx context.Context, in *DeviceSocolReq, opts ...grpc.CallOption) (*DeviceSocolResp, error) {
	out := new(DeviceSocolResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceSocol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) UpdateDeviceSocol(ctx context.Context, in *UpdateDeviceSocolDBReq, opts ...grpc.CallOption) (*UpdateDeviceSocolDBResp, error) {
	out := new(UpdateDeviceSocolDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/UpdateDeviceSocol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) SaveDeviceConfig(ctx context.Context, in *SaveDeviceConfigDbReq, opts ...grpc.CallOption) (*SaveDeviceConfigDbResp, error) {
	out := new(SaveDeviceConfigDbResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/SaveDeviceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) DelDeviceConfig(ctx context.Context, in *DelDeviceConfigDbReq, opts ...grpc.CallOption) (*DelDeviceConfigDbResp, error) {
	out := new(DelDeviceConfigDbResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/DelDeviceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) GetDeviceConfig(ctx context.Context, in *GetDeviceConfigDbReq, opts ...grpc.CallOption) (*GetDeviceConfigDbResp, error) {
	out := new(GetDeviceConfigDbResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) GetDeviceConfigDbList(ctx context.Context, in *GetDeviceConfigDbListReq, opts ...grpc.CallOption) (*GetDeviceConfigDbListResp, error) {
	out := new(GetDeviceConfigDbListResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceConfigDbList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) SearchTrackObjectListDB(ctx context.Context, in *SearchTrackObjectListDBReq, opts ...grpc.CallOption) (*SearchTrackObjectListDBResp, error) {
	out := new(SearchTrackObjectListDBResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/SearchTrackObjectListDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) SaveVideoInfo(ctx context.Context, in *SaveVideoInfoReq, opts ...grpc.CallOption) (*SaveVideoInfoResp, error) {
	out := new(SaveVideoInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/SaveVideoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) SearchVideoInfo(ctx context.Context, in *SearchVideoInfoReq, opts ...grpc.CallOption) (*SearchVideoInfoResp, error) {
	out := new(SearchVideoInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/SearchVideoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) SaveVideoErrCode(ctx context.Context, in *SaveVideoErrCodeReq, opts ...grpc.CallOption) (*SaveVideoErrCodeResp, error) {
	out := new(SaveVideoErrCodeResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/SaveVideoErrCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) DelVideoIndex(ctx context.Context, in *DelVideoIndexReq, opts ...grpc.CallOption) (*DelVideoIndexResp, error) {
	out := new(DelVideoIndexResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/DelVideoIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceDbProxyClient) SearchVideoErrInfo(ctx context.Context, in *SearchVideoErrInfoReq, opts ...grpc.CallOption) (*SearchVideoErrInfoResp, error) {
	out := new(SearchVideoErrInfoResp)
	err := c.cc.Invoke(ctx, "/mapgoo.paas.dap.device.DeviceDbProxy/SearchVideoErrInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceDbProxyServer is the server API for DeviceDbProxy service.
type DeviceDbProxyServer interface {
	//设备添加/修改 设备信息CRUD
	UpdateDeviceBaseInfoDB(context.Context, *SaveDeviceInfoReq) (*SaveDeviceInfoResp, error)
	//获取设备基本信息, 可根据原始IMEI查询设备基本信息Map
	GetDeviceBaseInfoDB(context.Context, *DeviceInfoReq) (*DeviceBaseInfoResp, error)
	//获取设备信息, 可根据原始IMEI查询设备基本信息Map
	GetDeviceInfoDB(context.Context, *DeviceInfoReq) (*DeviceInfoResp, error)
	// 根据原始IMEI获取设备基本信息Map
	GetOriginalIMEIInfoDB(context.Context, *OriginalIMEIInfoReq) (*OriginalIMEIInfoResp, error)
	// 更新设备原始IMEI接口
	SyncOriginalImeiDB(context.Context, *SyncOriginalImeiReq) (*SyncOriginalImeiResp, error)
	// 设备参数读取
	GetDeviceParamsDB(context.Context, *GetDeviceParamsReq) (*GetDeviceParamsResp, error)
	// 设备能力上传
	SetDeviceParamsDB(context.Context, *SetDeviceParamsReq) (*SetDeviceParamsDBResp, error)
	// 获取Can状态、设备信息请求
	GetObjectCANInfoDB(context.Context, *DeviceIMEIFieldReq) (*GetObjectCANInfoDBResp, error)
	// 上传视频设备信息
	UploadCarSsvidInfoDB(context.Context, *UploadCarSsvidInfoDBReq) (*UploadCarSsvidInfoDBResp, error)
	// 自注册部分1
	GetExistObjInfoDB(context.Context, *GetExistObjInfoDBReq) (*GetExistObjInfoDBResp, error)
	// 保存设备自注册信息至数据表
	AddObjectRegInfoDB(context.Context, *AddObjectRegInfoDBReq) (*AddObjectRegInfoDBResp, error)
	// 获取设备类型产品信息
	GetMDTProductInfoDB(context.Context, *GetMDTProductInfoDBReq) (*GetMDTProductInfoDBResp, error)
	// 上传设备APK应用信息
	UploadDeviceAppInfoDB(context.Context, *UploadDeviceAppInfoReq) (*UploadDeviceAppInfoDBResp, error)
	// 获取设备APP版本信息
	GetDeviceAppVerInfoDB(context.Context, *GetDeviceAppVerInfoDBReq) (*GetDeviceAppVerInfoDBResp, error)
	// 设备自注册新增保存数据方法
	SaveDeviceSelfRegDB(context.Context, *SaveDeviceSelfRegInfoReq) (*SaveDeviceSelfRegInfoResp, error)
	// 修改自注册设备信息
	UpdateDeviceSelfRegInfoDB(context.Context, *UpdateDeviceSelfRegDBReq) (*UpdateDeviceSelfRegInfoResp, error)
	//获取设备摄像头信息列表
	GetDeviceVideoInfo(context.Context, *GetDeviceVideoInfoReq) (*GetDeviceVideoInfoResp, error)
	//获取设备基本信息for openapi
	GetDeviceBaseInfoApi(context.Context, *GetDeviceBaseInfoApiReq) (*GetDeviceBaseInfoApiResp, error)
	//获取设备摄像头通道数
	GetDeviceCameraInfo(context.Context, *GetDeviceCameraInfoReq) (*GetDeviceCameraInfoResp, error)
	//更新设备摄像头通道数
	UpdateDeviceCameraInfo(context.Context, *UpdateDeviceCameraInfoReq) (*UpdateDeviceCameraInfoResp, error)
	//获取Socol配置
	GetDeviceSocol(context.Context, *DeviceSocolReq) (*DeviceSocolResp, error)
	//保存Socol配置
	UpdateDeviceSocol(context.Context, *UpdateDeviceSocolDBReq) (*UpdateDeviceSocolDBResp, error)
	//保存和更新设备配置参数
	SaveDeviceConfig(context.Context, *SaveDeviceConfigDbReq) (*SaveDeviceConfigDbResp, error)
	//删除设备配置参数
	DelDeviceConfig(context.Context, *DelDeviceConfigDbReq) (*DelDeviceConfigDbResp, error)
	//获取设备配置参数
	GetDeviceConfig(context.Context, *GetDeviceConfigDbReq) (*GetDeviceConfigDbResp, error)
	//获取设备配置参数
	GetDeviceConfigDbList(context.Context, *GetDeviceConfigDbListReq) (*GetDeviceConfigDbListResp, error)
	//查询在线监控设备
	SearchTrackObjectListDB(context.Context, *SearchTrackObjectListDBReq) (*SearchTrackObjectListDBResp, error)
	//视频编码信息上报
	SaveVideoInfo(context.Context, *SaveVideoInfoReq) (*SaveVideoInfoResp, error)
	//查询视频信息
	SearchVideoInfo(context.Context, *SearchVideoInfoReq) (*SearchVideoInfoResp, error)
	//上报视频错误码信息
	SaveVideoErrCode(context.Context, *SaveVideoErrCodeReq) (*SaveVideoErrCodeResp, error)
	//删除
	DelVideoIndex(context.Context, *DelVideoIndexReq) (*DelVideoIndexResp, error)
	//查询错误码
	SearchVideoErrInfo(context.Context, *SearchVideoErrInfoReq) (*SearchVideoErrInfoResp, error)
}

// UnimplementedDeviceDbProxyServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceDbProxyServer struct {
}

func (*UnimplementedDeviceDbProxyServer) UpdateDeviceBaseInfoDB(ctx context.Context, req *SaveDeviceInfoReq) (*SaveDeviceInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceBaseInfoDB not implemented")
}
func (*UnimplementedDeviceDbProxyServer) GetDeviceBaseInfoDB(ctx context.Context, req *DeviceInfoReq) (*DeviceBaseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceBaseInfoDB not implemented")
}
func (*UnimplementedDeviceDbProxyServer) GetDeviceInfoDB(ctx context.Context, req *DeviceInfoReq) (*DeviceInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfoDB not implemented")
}
func (*UnimplementedDeviceDbProxyServer) GetOriginalIMEIInfoDB(ctx context.Context, req *OriginalIMEIInfoReq) (*OriginalIMEIInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalIMEIInfoDB not implemented")
}
func (*UnimplementedDeviceDbProxyServer) SyncOriginalImeiDB(ctx context.Context, req *SyncOriginalImeiReq) (*SyncOriginalImeiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncOriginalImeiDB not implemented")
}
func (*UnimplementedDeviceDbProxyServer) GetDeviceParamsDB(ctx context.Context, req *GetDeviceParamsReq) (*GetDeviceParamsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceParamsDB not implemented")
}
func (*UnimplementedDeviceDbProxyServer) SetDeviceParamsDB(ctx context.Context, req *SetDeviceParamsReq) (*SetDeviceParamsDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceParamsDB not implemented")
}
func (*UnimplementedDeviceDbProxyServer) GetObjectCANInfoDB(ctx context.Context, req *DeviceIMEIFieldReq) (*GetObjectCANInfoDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectCANInfoDB not implemented")
}
func (*UnimplementedDeviceDbProxyServer) UploadCarSsvidInfoDB(ctx context.Context, req *UploadCarSsvidInfoDBReq) (*UploadCarSsvidInfoDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCarSsvidInfoDB not implemented")
}
func (*UnimplementedDeviceDbProxyServer) GetExistObjInfoDB(ctx context.Context, req *GetExistObjInfoDBReq) (*GetExistObjInfoDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExistObjInfoDB not implemented")
}
func (*UnimplementedDeviceDbProxyServer) AddObjectRegInfoDB(ctx context.Context, req *AddObjectRegInfoDBReq) (*AddObjectRegInfoDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddObjectRegInfoDB not implemented")
}
func (*UnimplementedDeviceDbProxyServer) GetMDTProductInfoDB(ctx context.Context, req *GetMDTProductInfoDBReq) (*GetMDTProductInfoDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMDTProductInfoDB not implemented")
}
func (*UnimplementedDeviceDbProxyServer) UploadDeviceAppInfoDB(ctx context.Context, req *UploadDeviceAppInfoReq) (*UploadDeviceAppInfoDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDeviceAppInfoDB not implemented")
}
func (*UnimplementedDeviceDbProxyServer) GetDeviceAppVerInfoDB(ctx context.Context, req *GetDeviceAppVerInfoDBReq) (*GetDeviceAppVerInfoDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceAppVerInfoDB not implemented")
}
func (*UnimplementedDeviceDbProxyServer) SaveDeviceSelfRegDB(ctx context.Context, req *SaveDeviceSelfRegInfoReq) (*SaveDeviceSelfRegInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDeviceSelfRegDB not implemented")
}
func (*UnimplementedDeviceDbProxyServer) UpdateDeviceSelfRegInfoDB(ctx context.Context, req *UpdateDeviceSelfRegDBReq) (*UpdateDeviceSelfRegInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceSelfRegInfoDB not implemented")
}
func (*UnimplementedDeviceDbProxyServer) GetDeviceVideoInfo(ctx context.Context, req *GetDeviceVideoInfoReq) (*GetDeviceVideoInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceVideoInfo not implemented")
}
func (*UnimplementedDeviceDbProxyServer) GetDeviceBaseInfoApi(ctx context.Context, req *GetDeviceBaseInfoApiReq) (*GetDeviceBaseInfoApiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceBaseInfoApi not implemented")
}
func (*UnimplementedDeviceDbProxyServer) GetDeviceCameraInfo(ctx context.Context, req *GetDeviceCameraInfoReq) (*GetDeviceCameraInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceCameraInfo not implemented")
}
func (*UnimplementedDeviceDbProxyServer) UpdateDeviceCameraInfo(ctx context.Context, req *UpdateDeviceCameraInfoReq) (*UpdateDeviceCameraInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceCameraInfo not implemented")
}
func (*UnimplementedDeviceDbProxyServer) GetDeviceSocol(ctx context.Context, req *DeviceSocolReq) (*DeviceSocolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceSocol not implemented")
}
func (*UnimplementedDeviceDbProxyServer) UpdateDeviceSocol(ctx context.Context, req *UpdateDeviceSocolDBReq) (*UpdateDeviceSocolDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceSocol not implemented")
}
func (*UnimplementedDeviceDbProxyServer) SaveDeviceConfig(ctx context.Context, req *SaveDeviceConfigDbReq) (*SaveDeviceConfigDbResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDeviceConfig not implemented")
}
func (*UnimplementedDeviceDbProxyServer) DelDeviceConfig(ctx context.Context, req *DelDeviceConfigDbReq) (*DelDeviceConfigDbResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDeviceConfig not implemented")
}
func (*UnimplementedDeviceDbProxyServer) GetDeviceConfig(ctx context.Context, req *GetDeviceConfigDbReq) (*GetDeviceConfigDbResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceConfig not implemented")
}
func (*UnimplementedDeviceDbProxyServer) GetDeviceConfigDbList(ctx context.Context, req *GetDeviceConfigDbListReq) (*GetDeviceConfigDbListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceConfigDbList not implemented")
}
func (*UnimplementedDeviceDbProxyServer) SearchTrackObjectListDB(ctx context.Context, req *SearchTrackObjectListDBReq) (*SearchTrackObjectListDBResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTrackObjectListDB not implemented")
}
func (*UnimplementedDeviceDbProxyServer) SaveVideoInfo(ctx context.Context, req *SaveVideoInfoReq) (*SaveVideoInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveVideoInfo not implemented")
}
func (*UnimplementedDeviceDbProxyServer) SearchVideoInfo(ctx context.Context, req *SearchVideoInfoReq) (*SearchVideoInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchVideoInfo not implemented")
}
func (*UnimplementedDeviceDbProxyServer) SaveVideoErrCode(ctx context.Context, req *SaveVideoErrCodeReq) (*SaveVideoErrCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveVideoErrCode not implemented")
}
func (*UnimplementedDeviceDbProxyServer) DelVideoIndex(ctx context.Context, req *DelVideoIndexReq) (*DelVideoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVideoIndex not implemented")
}
func (*UnimplementedDeviceDbProxyServer) SearchVideoErrInfo(ctx context.Context, req *SearchVideoErrInfoReq) (*SearchVideoErrInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchVideoErrInfo not implemented")
}

func RegisterDeviceDbProxyServer(s *grpc.Server, srv DeviceDbProxyServer) {
	s.RegisterService(&_DeviceDbProxy_serviceDesc, srv)
}

func _DeviceDbProxy_UpdateDeviceBaseInfoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDeviceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).UpdateDeviceBaseInfoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/UpdateDeviceBaseInfoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).UpdateDeviceBaseInfoDB(ctx, req.(*SaveDeviceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_GetDeviceBaseInfoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).GetDeviceBaseInfoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceBaseInfoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).GetDeviceBaseInfoDB(ctx, req.(*DeviceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_GetDeviceInfoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).GetDeviceInfoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceInfoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).GetDeviceInfoDB(ctx, req.(*DeviceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_GetOriginalIMEIInfoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OriginalIMEIInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).GetOriginalIMEIInfoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/GetOriginalIMEIInfoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).GetOriginalIMEIInfoDB(ctx, req.(*OriginalIMEIInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_SyncOriginalImeiDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncOriginalImeiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).SyncOriginalImeiDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/SyncOriginalImeiDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).SyncOriginalImeiDB(ctx, req.(*SyncOriginalImeiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_GetDeviceParamsDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceParamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).GetDeviceParamsDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceParamsDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).GetDeviceParamsDB(ctx, req.(*GetDeviceParamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_SetDeviceParamsDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceParamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).SetDeviceParamsDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/SetDeviceParamsDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).SetDeviceParamsDB(ctx, req.(*SetDeviceParamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_GetObjectCANInfoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceIMEIFieldReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).GetObjectCANInfoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/GetObjectCANInfoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).GetObjectCANInfoDB(ctx, req.(*DeviceIMEIFieldReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_UploadCarSsvidInfoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCarSsvidInfoDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).UploadCarSsvidInfoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/UploadCarSsvidInfoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).UploadCarSsvidInfoDB(ctx, req.(*UploadCarSsvidInfoDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_GetExistObjInfoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExistObjInfoDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).GetExistObjInfoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/GetExistObjInfoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).GetExistObjInfoDB(ctx, req.(*GetExistObjInfoDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_AddObjectRegInfoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddObjectRegInfoDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).AddObjectRegInfoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/AddObjectRegInfoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).AddObjectRegInfoDB(ctx, req.(*AddObjectRegInfoDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_GetMDTProductInfoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMDTProductInfoDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).GetMDTProductInfoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/GetMDTProductInfoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).GetMDTProductInfoDB(ctx, req.(*GetMDTProductInfoDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_UploadDeviceAppInfoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDeviceAppInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).UploadDeviceAppInfoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/UploadDeviceAppInfoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).UploadDeviceAppInfoDB(ctx, req.(*UploadDeviceAppInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_GetDeviceAppVerInfoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceAppVerInfoDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).GetDeviceAppVerInfoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceAppVerInfoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).GetDeviceAppVerInfoDB(ctx, req.(*GetDeviceAppVerInfoDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_SaveDeviceSelfRegDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDeviceSelfRegInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).SaveDeviceSelfRegDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/SaveDeviceSelfRegDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).SaveDeviceSelfRegDB(ctx, req.(*SaveDeviceSelfRegInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_UpdateDeviceSelfRegInfoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceSelfRegDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).UpdateDeviceSelfRegInfoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/UpdateDeviceSelfRegInfoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).UpdateDeviceSelfRegInfoDB(ctx, req.(*UpdateDeviceSelfRegDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_GetDeviceVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceVideoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).GetDeviceVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceVideoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).GetDeviceVideoInfo(ctx, req.(*GetDeviceVideoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_GetDeviceBaseInfoApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceBaseInfoApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).GetDeviceBaseInfoApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceBaseInfoApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).GetDeviceBaseInfoApi(ctx, req.(*GetDeviceBaseInfoApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_GetDeviceCameraInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceCameraInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).GetDeviceCameraInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceCameraInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).GetDeviceCameraInfo(ctx, req.(*GetDeviceCameraInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_UpdateDeviceCameraInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceCameraInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).UpdateDeviceCameraInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/UpdateDeviceCameraInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).UpdateDeviceCameraInfo(ctx, req.(*UpdateDeviceCameraInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_GetDeviceSocol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceSocolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).GetDeviceSocol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceSocol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).GetDeviceSocol(ctx, req.(*DeviceSocolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_UpdateDeviceSocol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceSocolDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).UpdateDeviceSocol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/UpdateDeviceSocol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).UpdateDeviceSocol(ctx, req.(*UpdateDeviceSocolDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_SaveDeviceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDeviceConfigDbReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).SaveDeviceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/SaveDeviceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).SaveDeviceConfig(ctx, req.(*SaveDeviceConfigDbReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_DelDeviceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDeviceConfigDbReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).DelDeviceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/DelDeviceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).DelDeviceConfig(ctx, req.(*DelDeviceConfigDbReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_GetDeviceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceConfigDbReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).GetDeviceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).GetDeviceConfig(ctx, req.(*GetDeviceConfigDbReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_GetDeviceConfigDbList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceConfigDbListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).GetDeviceConfigDbList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/GetDeviceConfigDbList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).GetDeviceConfigDbList(ctx, req.(*GetDeviceConfigDbListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_SearchTrackObjectListDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTrackObjectListDBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).SearchTrackObjectListDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/SearchTrackObjectListDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).SearchTrackObjectListDB(ctx, req.(*SearchTrackObjectListDBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_SaveVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveVideoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).SaveVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/SaveVideoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).SaveVideoInfo(ctx, req.(*SaveVideoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_SearchVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVideoInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).SearchVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/SearchVideoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).SearchVideoInfo(ctx, req.(*SearchVideoInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_SaveVideoErrCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveVideoErrCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).SaveVideoErrCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/SaveVideoErrCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).SaveVideoErrCode(ctx, req.(*SaveVideoErrCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_DelVideoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelVideoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).DelVideoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/DelVideoIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).DelVideoIndex(ctx, req.(*DelVideoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceDbProxy_SearchVideoErrInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVideoErrInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceDbProxyServer).SearchVideoErrInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapgoo.paas.dap.device.DeviceDbProxy/SearchVideoErrInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceDbProxyServer).SearchVideoErrInfo(ctx, req.(*SearchVideoErrInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceDbProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mapgoo.paas.dap.device.DeviceDbProxy",
	HandlerType: (*DeviceDbProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateDeviceBaseInfoDB",
			Handler:    _DeviceDbProxy_UpdateDeviceBaseInfoDB_Handler,
		},
		{
			MethodName: "GetDeviceBaseInfoDB",
			Handler:    _DeviceDbProxy_GetDeviceBaseInfoDB_Handler,
		},
		{
			MethodName: "GetDeviceInfoDB",
			Handler:    _DeviceDbProxy_GetDeviceInfoDB_Handler,
		},
		{
			MethodName: "GetOriginalIMEIInfoDB",
			Handler:    _DeviceDbProxy_GetOriginalIMEIInfoDB_Handler,
		},
		{
			MethodName: "SyncOriginalImeiDB",
			Handler:    _DeviceDbProxy_SyncOriginalImeiDB_Handler,
		},
		{
			MethodName: "GetDeviceParamsDB",
			Handler:    _DeviceDbProxy_GetDeviceParamsDB_Handler,
		},
		{
			MethodName: "SetDeviceParamsDB",
			Handler:    _DeviceDbProxy_SetDeviceParamsDB_Handler,
		},
		{
			MethodName: "GetObjectCANInfoDB",
			Handler:    _DeviceDbProxy_GetObjectCANInfoDB_Handler,
		},
		{
			MethodName: "UploadCarSsvidInfoDB",
			Handler:    _DeviceDbProxy_UploadCarSsvidInfoDB_Handler,
		},
		{
			MethodName: "GetExistObjInfoDB",
			Handler:    _DeviceDbProxy_GetExistObjInfoDB_Handler,
		},
		{
			MethodName: "AddObjectRegInfoDB",
			Handler:    _DeviceDbProxy_AddObjectRegInfoDB_Handler,
		},
		{
			MethodName: "GetMDTProductInfoDB",
			Handler:    _DeviceDbProxy_GetMDTProductInfoDB_Handler,
		},
		{
			MethodName: "UploadDeviceAppInfoDB",
			Handler:    _DeviceDbProxy_UploadDeviceAppInfoDB_Handler,
		},
		{
			MethodName: "GetDeviceAppVerInfoDB",
			Handler:    _DeviceDbProxy_GetDeviceAppVerInfoDB_Handler,
		},
		{
			MethodName: "SaveDeviceSelfRegDB",
			Handler:    _DeviceDbProxy_SaveDeviceSelfRegDB_Handler,
		},
		{
			MethodName: "UpdateDeviceSelfRegInfoDB",
			Handler:    _DeviceDbProxy_UpdateDeviceSelfRegInfoDB_Handler,
		},
		{
			MethodName: "GetDeviceVideoInfo",
			Handler:    _DeviceDbProxy_GetDeviceVideoInfo_Handler,
		},
		{
			MethodName: "GetDeviceBaseInfoApi",
			Handler:    _DeviceDbProxy_GetDeviceBaseInfoApi_Handler,
		},
		{
			MethodName: "GetDeviceCameraInfo",
			Handler:    _DeviceDbProxy_GetDeviceCameraInfo_Handler,
		},
		{
			MethodName: "UpdateDeviceCameraInfo",
			Handler:    _DeviceDbProxy_UpdateDeviceCameraInfo_Handler,
		},
		{
			MethodName: "GetDeviceSocol",
			Handler:    _DeviceDbProxy_GetDeviceSocol_Handler,
		},
		{
			MethodName: "UpdateDeviceSocol",
			Handler:    _DeviceDbProxy_UpdateDeviceSocol_Handler,
		},
		{
			MethodName: "SaveDeviceConfig",
			Handler:    _DeviceDbProxy_SaveDeviceConfig_Handler,
		},
		{
			MethodName: "DelDeviceConfig",
			Handler:    _DeviceDbProxy_DelDeviceConfig_Handler,
		},
		{
			MethodName: "GetDeviceConfig",
			Handler:    _DeviceDbProxy_GetDeviceConfig_Handler,
		},
		{
			MethodName: "GetDeviceConfigDbList",
			Handler:    _DeviceDbProxy_GetDeviceConfigDbList_Handler,
		},
		{
			MethodName: "SearchTrackObjectListDB",
			Handler:    _DeviceDbProxy_SearchTrackObjectListDB_Handler,
		},
		{
			MethodName: "SaveVideoInfo",
			Handler:    _DeviceDbProxy_SaveVideoInfo_Handler,
		},
		{
			MethodName: "SearchVideoInfo",
			Handler:    _DeviceDbProxy_SearchVideoInfo_Handler,
		},
		{
			MethodName: "SaveVideoErrCode",
			Handler:    _DeviceDbProxy_SaveVideoErrCode_Handler,
		},
		{
			MethodName: "DelVideoIndex",
			Handler:    _DeviceDbProxy_DelVideoIndex_Handler,
		},
		{
			MethodName: "SearchVideoErrInfo",
			Handler:    _DeviceDbProxy_SearchVideoErrInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapgoo.paas.dap.device.proto",
}

func (m *GetObjectCANInfoDBResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetObjectCANInfoDBResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetObjectCANInfoDBResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Iccid) > 0 {
		i -= len(m.Iccid)
		copy(dAtA[i:], m.Iccid)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.Iccid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x20
	}
	if m.HoldId != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.HoldId))
		i--
		dAtA[i] = 0x18
	}
	if m.CanState != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.CanState))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetDeviceParamsDBResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDeviceParamsDBResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDeviceParamsDBResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NoticeOms {
		i--
		if m.NoticeOms {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadCarSsvidInfoDBReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadCarSsvidInfoDBReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadCarSsvidInfoDBReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateTime != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x50
	}
	if m.WaitTime != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.WaitTime))
		i--
		dAtA[i] = 0x48
	}
	if m.SsvidCount != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.SsvidCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Rtmp) > 0 {
		i -= len(m.Rtmp)
		copy(dAtA[i:], m.Rtmp)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.Rtmp)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x32
	}
	if m.DeviceType != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.DeviceType))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Ssvid) > 0 {
		i -= len(m.Ssvid)
		copy(dAtA[i:], m.Ssvid)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.Ssvid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Imei) > 0 {
		i -= len(m.Imei)
		copy(dAtA[i:], m.Imei)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.Imei)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UploadCarSsvidInfoDBResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadCarSsvidInfoDBResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadCarSsvidInfoDBResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetExistObjInfoDBReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExistObjInfoDBReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetExistObjInfoDBReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OriginalImei) > 0 {
		i -= len(m.OriginalImei)
		copy(dAtA[i:], m.OriginalImei)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.OriginalImei)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetExistObjInfoDBResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExistObjInfoDBResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetExistObjInfoDBResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InfoMap) > 0 {
		for k := range m.InfoMap {
			v := m.InfoMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddObjectRegInfoDBReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddObjectRegInfoDBReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddObjectRegInfoDBReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AppKey) > 0 {
		i -= len(m.AppKey)
		copy(dAtA[i:], m.AppKey)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.AppKey)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.OriginalImei) > 0 {
		i -= len(m.OriginalImei)
		copy(dAtA[i:], m.OriginalImei)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.OriginalImei)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Lincese) > 0 {
		i -= len(m.Lincese)
		copy(dAtA[i:], m.Lincese)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.Lincese)))
		i--
		dAtA[i] = 0x3a
	}
	if m.MdttypeId != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.MdttypeId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ObjectCode) > 0 {
		i -= len(m.ObjectCode)
		copy(dAtA[i:], m.ObjectCode)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.ObjectCode)))
		i--
		dAtA[i] = 0x2a
	}
	if m.HoldId != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.HoldId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sim) > 0 {
		i -= len(m.Sim)
		copy(dAtA[i:], m.Sim)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.Sim)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Imei) > 0 {
		i -= len(m.Imei)
		copy(dAtA[i:], m.Imei)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.Imei)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddObjectRegInfoDBResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddObjectRegInfoDBResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddObjectRegInfoDBResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMDTProductInfoDBReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMDTProductInfoDBReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMDTProductInfoDBReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MdttypeId != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.MdttypeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetMDTProductInfoDBResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMDTProductInfoDBResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMDTProductInfoDBResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Brand) > 0 {
		i -= len(m.Brand)
		copy(dAtA[i:], m.Brand)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.Brand)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Factory) > 0 {
		i -= len(m.Factory)
		copy(dAtA[i:], m.Factory)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.Factory)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadDeviceAppInfoDBResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadDeviceAppInfoDBResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadDeviceAppInfoDBResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceAppVerInfoDBReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceAppVerInfoDBReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceAppVerInfoDBReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AppPackageName) > 0 {
		i -= len(m.AppPackageName)
		copy(dAtA[i:], m.AppPackageName)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.AppPackageName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceAppVerInfoDBResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceAppVerInfoDBResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceAppVerInfoDBResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDeviceSelfRegDBReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDeviceSelfRegDBReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDeviceSelfRegDBReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsUpdateHoldId {
		i--
		if m.IsUpdateHoldId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.ProductBatch) > 0 {
		i -= len(m.ProductBatch)
		copy(dAtA[i:], m.ProductBatch)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.ProductBatch)))
		i--
		dAtA[i] = 0x52
	}
	if m.IsupdateAppKey {
		i--
		if m.IsupdateAppKey {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.AppKey) > 0 {
		i -= len(m.AppKey)
		copy(dAtA[i:], m.AppKey)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.AppKey)))
		i--
		dAtA[i] = 0x42
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.OriginalImei) > 0 {
		i -= len(m.OriginalImei)
		copy(dAtA[i:], m.OriginalImei)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.OriginalImei)))
		i--
		dAtA[i] = 0x32
	}
	if m.HoldId != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.HoldId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Lincese) > 0 {
		i -= len(m.Lincese)
		copy(dAtA[i:], m.Lincese)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.Lincese)))
		i--
		dAtA[i] = 0x22
	}
	if m.MdtTypeId != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.MdtTypeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Iccid) > 0 {
		i -= len(m.Iccid)
		copy(dAtA[i:], m.Iccid)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.Iccid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Imei) > 0 {
		i -= len(m.Imei)
		copy(dAtA[i:], m.Imei)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.Imei)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDeviceSocolDBReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDeviceSocolDBReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDeviceSocolDBReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeviceSocol != nil {
		{
			size, err := m.DeviceSocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDeviceSocolDBResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDeviceSocolDBResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDeviceSocolDBResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveDeviceConfigDbReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveDeviceConfigDbReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveDeviceConfigDbReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InsertList) > 0 {
		for iNdEx := len(m.InsertList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InsertList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.UpdateList) > 0 {
		for iNdEx := len(m.UpdateList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdateList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.IsExistVersion {
		i--
		if m.IsExistVersion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SaveDeviceConfigDbResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveDeviceConfigDbResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveDeviceConfigDbResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelDeviceConfigDbReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelDeviceConfigDbReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelDeviceConfigDbReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SettingNameList) > 0 {
		for iNdEx := len(m.SettingNameList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SettingNameList[iNdEx])
			copy(dAtA[i:], m.SettingNameList[iNdEx])
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.SettingNameList[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelDeviceConfigDbResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelDeviceConfigDbResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelDeviceConfigDbResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceConfigDbReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceConfigDbReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceConfigDbReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SettingName) > 0 {
		i -= len(m.SettingName)
		copy(dAtA[i:], m.SettingName)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.SettingName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ObjectId != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceConfigDbResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceConfigDbResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceConfigDbResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ParamList) > 0 {
		for iNdEx := len(m.ParamList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ParamList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.UpdateTime != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceConfigDbListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceConfigDbListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceConfigDbListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.UpdateTime != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDeviceConfigDbListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceConfigDbListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDeviceConfigDbListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConfigList) > 0 {
		for k := range m.ConfigList {
			v := m.ConfigList[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchTrackObjectListDBReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchTrackObjectListDBReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTrackObjectListDBReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HoldLevel != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.HoldLevel))
		i--
		dAtA[i] = 0x28
	}
	if m.HoldId != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.HoldId))
		i--
		dAtA[i] = 0x20
	}
	if m.PageSize != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.KeyVal) > 0 {
		i -= len(m.KeyVal)
		copy(dAtA[i:], m.KeyVal)
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(len(m.KeyVal)))
		i--
		dAtA[i] = 0x12
	}
	if m.KeyType != 0 {
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SearchTrackObjectListDBResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchTrackObjectListDBResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTrackObjectListDBResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ObjectIdList) > 0 {
		dAtA19 := make([]byte, len(m.ObjectIdList)*10)
		var j18 int
		for _, num := range m.ObjectIdList {
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		i -= j18
		copy(dAtA[i:], dAtA19[:j18])
		i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(j18))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapgooPaasDapDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMapgooPaasDapDevice(dAtA []byte, offset int, v uint64) int {
	offset -= sovMapgooPaasDapDevice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetObjectCANInfoDBResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.CanState != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.CanState))
	}
	if m.HoldId != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.HoldId))
	}
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.ObjectId))
	}
	l = len(m.Iccid)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetDeviceParamsDBResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.NoticeOms {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadCarSsvidInfoDBReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.Id))
	}
	l = len(m.Imei)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	l = len(m.Ssvid)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.Status))
	}
	if m.DeviceType != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.DeviceType))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	l = len(m.Rtmp)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.SsvidCount != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.SsvidCount))
	}
	if m.WaitTime != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.WaitTime))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.UpdateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadCarSsvidInfoDBResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetExistObjInfoDBReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OriginalImei)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetExistObjInfoDBResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if len(m.InfoMap) > 0 {
		for k, v := range m.InfoMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMapgooPaasDapDevice(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMapgooPaasDapDevice(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMapgooPaasDapDevice(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddObjectRegInfoDBReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Imei)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	l = len(m.Sim)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.HoldId != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.HoldId))
	}
	l = len(m.ObjectCode)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.MdttypeId != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.MdttypeId))
	}
	l = len(m.Lincese)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	l = len(m.OriginalImei)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddObjectRegInfoDBResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.ObjectId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMDTProductInfoDBReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MdttypeId != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.MdttypeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMDTProductInfoDBResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	l = len(m.Factory)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	l = len(m.Brand)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadDeviceAppInfoDBResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceAppVerInfoDBReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.ObjectId))
	}
	l = len(m.AppPackageName)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceAppVerInfoDBResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDeviceSelfRegDBReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Imei)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	l = len(m.Iccid)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.MdtTypeId != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.MdtTypeId))
	}
	l = len(m.Lincese)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.HoldId != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.HoldId))
	}
	l = len(m.OriginalImei)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.ObjectId))
	}
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.IsupdateAppKey {
		n += 2
	}
	l = len(m.ProductBatch)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.IsUpdateHoldId {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDeviceSocolDBReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceSocol != nil {
		l = m.DeviceSocol.Size()
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDeviceSocolDBResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveDeviceConfigDbReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.ObjectId))
	}
	if m.IsExistVersion {
		n += 2
	}
	if len(m.UpdateList) > 0 {
		for _, e := range m.UpdateList {
			l = e.Size()
			n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
		}
	}
	if len(m.InsertList) > 0 {
		for _, e := range m.InsertList {
			l = e.Size()
			n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveDeviceConfigDbResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelDeviceConfigDbReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.ObjectId))
	}
	if len(m.SettingNameList) > 0 {
		for _, s := range m.SettingNameList {
			l = len(s)
			n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelDeviceConfigDbResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceConfigDbReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObjectId != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.ObjectId))
	}
	l = len(m.SettingName)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceConfigDbResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.UpdateTime))
	}
	if len(m.ParamList) > 0 {
		for _, e := range m.ParamList {
			l = e.Size()
			n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceConfigDbListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateTime != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.UpdateTime))
	}
	if m.Limit != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDeviceConfigDbListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if len(m.ConfigList) > 0 {
		for k, v := range m.ConfigList {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMapgooPaasDapDevice(uint64(l))
			}
			mapEntrySize := 1 + sovMapgooPaasDapDevice(uint64(k)) + l
			n += mapEntrySize + 1 + sovMapgooPaasDapDevice(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchTrackObjectListDBReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyType != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.KeyType))
	}
	l = len(m.KeyVal)
	if l > 0 {
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.PageSize))
	}
	if m.HoldId != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.HoldId))
	}
	if m.HoldLevel != 0 {
		n += 1 + sovMapgooPaasDapDevice(uint64(m.HoldLevel))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchTrackObjectListDBResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMapgooPaasDapDevice(uint64(l))
	}
	if len(m.ObjectIdList) > 0 {
		l = 0
		for _, e := range m.ObjectIdList {
			l += sovMapgooPaasDapDevice(uint64(e))
		}
		n += 1 + sovMapgooPaasDapDevice(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMapgooPaasDapDevice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMapgooPaasDapDevice(x uint64) (n int) {
	return sovMapgooPaasDapDevice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetObjectCANInfoDBResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetObjectCANInfoDBResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetObjectCANInfoDBResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanState", wireType)
			}
			m.CanState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CanState |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldId", wireType)
			}
			m.HoldId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iccid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iccid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDeviceParamsDBResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDeviceParamsDBResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDeviceParamsDBResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeOms", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoticeOms = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadCarSsvidInfoDBReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadCarSsvidInfoDBReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadCarSsvidInfoDBReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ssvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ssvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			m.DeviceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtmp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rtmp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SsvidCount", wireType)
			}
			m.SsvidCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SsvidCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitTime", wireType)
			}
			m.WaitTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadCarSsvidInfoDBResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadCarSsvidInfoDBResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadCarSsvidInfoDBResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExistObjInfoDBReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExistObjInfoDBReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExistObjInfoDBReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalImei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalImei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExistObjInfoDBResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExistObjInfoDBResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExistObjInfoDBResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InfoMap == nil {
				m.InfoMap = make(map[string]*DeviceSelfRegFields)
			}
			var mapkey string
			var mapvalue *DeviceSelfRegFields
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapgooPaasDapDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMapgooPaasDapDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMapgooPaasDapDevice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMapgooPaasDapDevice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMapgooPaasDapDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMapgooPaasDapDevice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMapgooPaasDapDevice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DeviceSelfRegFields{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMapgooPaasDapDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.InfoMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddObjectRegInfoDBReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddObjectRegInfoDBReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddObjectRegInfoDBReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sim", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sim = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldId", wireType)
			}
			m.HoldId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdttypeId", wireType)
			}
			m.MdttypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MdttypeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lincese", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lincese = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalImei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalImei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddObjectRegInfoDBResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddObjectRegInfoDBResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddObjectRegInfoDBResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMDTProductInfoDBReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMDTProductInfoDBReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMDTProductInfoDBReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdttypeId", wireType)
			}
			m.MdttypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MdttypeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMDTProductInfoDBResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMDTProductInfoDBResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMDTProductInfoDBResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Factory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadDeviceAppInfoDBResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadDeviceAppInfoDBResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadDeviceAppInfoDBResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceAppVerInfoDBReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceAppVerInfoDBReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceAppVerInfoDBReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppPackageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppPackageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceAppVerInfoDBResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceAppVerInfoDBResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceAppVerInfoDBResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &DeviceAppVerInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDeviceSelfRegDBReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDeviceSelfRegDBReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDeviceSelfRegDBReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iccid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iccid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdtTypeId", wireType)
			}
			m.MdtTypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MdtTypeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lincese", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lincese = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldId", wireType)
			}
			m.HoldId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalImei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalImei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsupdateAppKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsupdateAppKey = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductBatch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductBatch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUpdateHoldId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUpdateHoldId = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDeviceSocolDBReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDeviceSocolDBReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDeviceSocolDBReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceSocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceSocol == nil {
				m.DeviceSocol = &DeviceSocolInfo{}
			}
			if err := m.DeviceSocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDeviceSocolDBResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDeviceSocolDBResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDeviceSocolDBResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveDeviceConfigDbReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveDeviceConfigDbReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveDeviceConfigDbReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsExistVersion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsExistVersion = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateList = append(m.UpdateList, &DeviceConfigParam{})
			if err := m.UpdateList[len(m.UpdateList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsertList = append(m.InsertList, &DeviceConfigParam{})
			if err := m.InsertList[len(m.InsertList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveDeviceConfigDbResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveDeviceConfigDbResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveDeviceConfigDbResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelDeviceConfigDbReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelDeviceConfigDbReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelDeviceConfigDbReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettingNameList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettingNameList = append(m.SettingNameList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelDeviceConfigDbResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelDeviceConfigDbResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelDeviceConfigDbResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceConfigDbReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceConfigDbReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceConfigDbReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettingName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettingName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceConfigDbResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceConfigDbResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceConfigDbResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamList = append(m.ParamList, &DeviceConfigParam{})
			if err := m.ParamList[len(m.ParamList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceConfigDbListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceConfigDbListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceConfigDbListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceConfigDbListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceConfigDbListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceConfigDbListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigList == nil {
				m.ConfigList = make(map[uint32]*DeviceConfigInfo)
			}
			var mapkey uint32
			var mapvalue *DeviceConfigInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapgooPaasDapDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMapgooPaasDapDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMapgooPaasDapDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMapgooPaasDapDevice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMapgooPaasDapDevice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DeviceConfigInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMapgooPaasDapDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ConfigList[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchTrackObjectListDBReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchTrackObjectListDBReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchTrackObjectListDBReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyVal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldId", wireType)
			}
			m.HoldId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldLevel", wireType)
			}
			m.HoldLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchTrackObjectListDBResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchTrackObjectListDBResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchTrackObjectListDBResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseRespInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapgooPaasDapDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ObjectIdList = append(m.ObjectIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMapgooPaasDapDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMapgooPaasDapDevice
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMapgooPaasDapDevice
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ObjectIdList) == 0 {
					m.ObjectIdList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMapgooPaasDapDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ObjectIdList = append(m.ObjectIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapgooPaasDapDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapgooPaasDapDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMapgooPaasDapDevice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMapgooPaasDapDevice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapgooPaasDapDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMapgooPaasDapDevice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMapgooPaasDapDevice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMapgooPaasDapDevice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMapgooPaasDapDevice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMapgooPaasDapDevice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMapgooPaasDapDevice = fmt.Errorf("proto: unexpected end of group")
)

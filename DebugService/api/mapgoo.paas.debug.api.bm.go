// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: mapgoo.paas.debug.api.proto

package api

import (
	"context"

	bm "github.com/mapgoo-lab/atreus/pkg/net/http/blademaster"
	"github.com/mapgoo-lab/atreus/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathDebugServiceGetRouterInfo = "/debug/getRouterInfo"
var PathDebugServiceGetDeviceInfo = "/debug/getDeviceInfo"
var PathDebugServiceAddDeviceTrace = "/debug/addDeviceTrace"
var PathDebugServiceDeleteDeviceTrace = "/debug/deleteDeviceTrace"

// DebugServiceBMServer is the server API for DebugService service.
type DebugServiceBMServer interface {
	// 获取路由信息
	GetRouterInfo(ctx context.Context, req *GetRouterInfoReq) (resp *GetRouterInfoResp, err error)

	// 获取设备信息
	GetDeviceInfo(ctx context.Context, req *GetDeviceInfoReq) (resp *GetDeviceBaseInfoResp, err error)

	// 添加设备跟踪
	AddDeviceTrace(ctx context.Context, req *AddDeviceTraceReq) (resp *AddDeviceTraceResp, err error)

	// 删除设备跟踪
	DeleteDeviceTrace(ctx context.Context, req *DeleteDeviceTraceReq) (resp *DeleteDeviceTraceResp, err error)
}

var DebugServiceSvc DebugServiceBMServer

func debugServiceGetRouterInfo(c *bm.Context) {
	p := new(GetRouterInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DebugServiceSvc.GetRouterInfo(c, p)
	c.JSON(resp, err)
}

func debugServiceGetDeviceInfo(c *bm.Context) {
	p := new(GetDeviceInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DebugServiceSvc.GetDeviceInfo(c, p)
	c.JSON(resp, err)
}

func debugServiceAddDeviceTrace(c *bm.Context) {
	p := new(AddDeviceTraceReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DebugServiceSvc.AddDeviceTrace(c, p)
	c.JSON(resp, err)
}

func debugServiceDeleteDeviceTrace(c *bm.Context) {
	p := new(DeleteDeviceTraceReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := DebugServiceSvc.DeleteDeviceTrace(c, p)
	c.JSON(resp, err)
}

// RegisterDebugServiceBMServer Register the blademaster route
func RegisterDebugServiceBMServer(e *bm.Engine, server DebugServiceBMServer) {
	DebugServiceSvc = server
	e.POST("/debug/getRouterInfo", debugServiceGetRouterInfo)
	e.POST("/debug/getDeviceInfo", debugServiceGetDeviceInfo)
	e.GET("/debug/addDeviceTrace", debugServiceAddDeviceTrace)
	e.GET("/debug/deleteDeviceTrace", debugServiceDeleteDeviceTrace)
}
